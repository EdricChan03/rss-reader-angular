{"version":3,"file":"main.css","mappings":"AAAA;ACGA;AA+EA;;CAAA;AD9EA;AE0ME;EACE,gBAlMU;EAmMV,eApMQ;EAqMR;AFvMJ;AE0ME;EAEE;AFxMJ;AE2ME;EACE;AFxMJ;AGuKE;ECzGE;EAcF;ED6FE;AHnKJ;AGsKE;EC9GE;EAcF;EDkGE;AHlKJ;AGqKE;ECnHE;EAcF;EDuGE;AHjKJ;AGoKE;ECxHE;EAcF;ED4GE;AHhKJ;AGsKE;EChIE;EDyIA;AH1KJ;AG6KE;EC5IE;EDqJA;AHjLJ;AGoLE;ECxJE;EAcF;AJrCF;AGmLE;EC5JE;EAcF;AJhCF;AGiLI;EACE;AH/KN;AGmLE;ECpKE;EAcF;AJxBF;AGkLE;ECxKE;EAcF;ED4JE;AH9KJ;AGiLE;EC7KE;EAcF;EDiKE;AH7KJ;AGgLE;EClLE;EAcF;EDsKE;AH5KJ;AG+KE;ECvLE;EAcF;ED2KE;AH3KJ;AKzEE;ED2DE;EAcF;AJKF;AMqEE;;EAGI;EACA;EACA;ANnEN;AOLE;EACE;APQJ;AQ/EE;EACE;ARkFJ;AQ/EE;EAEI;EACA;ARiFN;AQ7EE;EACE;ARgFJ;AQ7EE;;EAEE;ARgFJ;ASpBE;EACE;ATuBJ;ASnBE;EACE;ATsBJ;AU1CE;EACE;EACA;AV6CJ;AU3CI;;EAEE,eA7FkB;AV0IxB;AW3GE;EACE;AX8GJ;AW3GE;EACE;EACA;AX8GJ;AW3GE;EACE;AX8GJ;AYoCE;EACE;AZjCJ;AYoCE;EACE,eAzLsB;AZwJ1B;AYoCE;;EAGI;EACA;AZlCN;AYsCE;EAEI,eArM6B;EAsM7B;AZpCN;Aa3JE;ET0DE;EAcF;AJwFF;Ac3HE;EAEI;EACA;EACA;Ad6HN;AczHE;EVaE;EAcF;AJmGF;Ae5BE;EX5FE,kBAeU;EAdV,gBAeY;EAdZ,kBAeY;EAdZ,qCAeY;EAGd;AJ2GF;AehCE;EACE,yBAPuB;Af0C3B;Ae7BI;;EACE,eAvB2B;EAwB3B,kBAxCU;AfyEhB;Ae7BI;;EACE;EACA;AfgCN;Ae9BM;;EACE;EACA,kBAlDQ;AfmFhB;Ae5BE;EACE;EAEA;Af8BJ;Ae1BI;;EAzEF;EAEA;AfuGF;AexBI;EAjFF;EAEA;Af2GF;AerBE;EACE;EACA,sBApEiB;Af4FrB;AerBE;EACE;AfwBJ;AerBE;EAGE,iBAhEuB;AfsF3B;AenBE;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;AfmBJ;AgB9JI;EACE,sBAJqB;AhBqK3B;AgB9JI;EACE;AhBgKN;AgB5JM;;EAxDJ;EAEA;AhBuNF;AgB1JM;EA/DJ;EAEA;AhB2NF;AgBtJM;EAvEJ;EAEA;AhB+NF;AgBnJI;EACE;AhBqJN;AgBlJI;EAGE,cAzCqB;AhB2L3B;AgB/II;EACE,0BAjDmB;EAqDnB;AhB8IN;AgBxIE;EAGM;;IA3FN;EhBsOA;EgBpIM;IAlGN;EhByOA;EgB/HM;IA1GN;EhB4OA;AACF;AiB1NI;EACE;AjB4NN;AiBzNI;EACE;EACA,kBAT2B;AjBoOjC;AiBvNM;;EAnCJ;EAEA;AjB6PF;AiBnNM;EA5CJ;EAEA;AjBiQF;AkB5MI;EACE;AlB+MN;AkB5MI;EACE;EACA,mBAT8B;AlBuNpC;AkB1MM;;EA1CJ;EAEA;AlBuPF;AkBtMM;EAnDJ;EAEA;AlB2PF;AmB/TE;;EAGE;AnBiUJ;AoBrUE;;EARA;EACA;EACA;EAQE;EACA;ApB0UJ;AoBvUI;;EACE,eDJwB;AnB8U9B;AqB/QE;EACE;ArBkRJ;AsBhTE;EAEI;EACA;EACA;AtBkTN;AuBzTE;;EAGI;EACA;AvB2TN;AwBnSE;EACE;AxBsSJ;AyBxSE;EACE;AzB2SJ;AyBxSE;EACE;AzB2SJ;A0BzSE;EACE;A1B4SJ;A2B7ME;EAEI;EACA;EACA;A3B+MN;A4B9QE;EACE;A5BiRJ;A4B9QE;EAEI;EACA;A5BgRN;A4B5QE;EACE;A5B+QJ;A4B5QE;EACE;A5B+QJ;A4B5QE;EAEI;EACA;A5B8QN;A6BrQE;EACE;A7BwQJ;A6BrQE;EAEI;EACA;EACA;A7BuQN;A8BzVE;;;;;;;E1BOE;EAcF;E0BbE;A9B6VJ;A+BpZE;EACE;EACA,eArBQ;EAsBR,gBArBe;EAsBf,mBAtBe;A/B6anB;A+BpZE;EACE,eAvBgB;EAwBhB,gBAvBuB;EAwBvB,mBAxBuB;A/B+a3B;AgCxYE;EACE,qCAHY;AhC8YhB;AgCxYE;EACE,qCAPY;AhCkZhB;AgCtYI;EACE;AhCyYN;AoB5bE;EARA;EACA;EACA;EAQE;EACA;ApBgcJ;AoB7bI;EACE,eY6C0B;AhCkZhC;AgC/YI;EACE;AhCiZN;AoBzcE;EARA;EACA;EACA;EAQE;EACA;ApB6cJ;AoB1cI;EACE,eYkD0B;AhC0ZhC;AgCvZI;EACE;EACA;EACA;AhCyZN;AgCnZI;EACE;AhCsZN;AoB5dE;EARA;EACA;EACA;EAQE;EACA;ApBgeJ;AoB7dI;EACE,eYgE0B;AhC+ZhC;AgC5ZI;EACE;AhC8ZN;AoBzeE;EARA;EACA;EACA;EAQE;EACA;ApB6eJ;AoB1eI;EACE,eYqE0B;AhCuahC;AgCpaI;EACE,qCA1CU;EA2CV;EACA;AhCsaN;AiC/cE;EAEI;EACA;AjCidN;AkCnfE;E9B2DE;EAcF;AJ+aF;AmChfE;EAEI;EACA;AnCkfN;AmC9eE;EACE;EAEE;EACA;EACA;AnCgfN;AoChgBE;EACE;ApCmgBJ;AoChgBE;;EAEE;EACA;ApCmgBJ;AqC9hBE;EACE;EAIA;ArC8hBJ;AqCvhBI;EACE;ArCyhBN;AqCrhBE;EACE;ArCwhBJ;AqCrhBE;EACE;EACA;EACA;EAEA;EACA;ArCuhBJ;AsChhBI;EDHE;ArCshBN;AsCvjBE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;AtCmjBJ;AuCzjBE;EAEE;EAGA;EACA;EACA;EACA;AvCyjBJ;AuCrjBE;EACE;EACA,aA3BwB;AvCmlB5B;AuCtjBI;EAGE;AvCsjBN;AuC9iBE;EACE;EACA;EACA,aA1Cc;AvC2lBlB;AuC7iBE;EAGE;EACA;EACA;EACA,aApDc;EAwDd;EACA;EACA;AvC2iBJ;AuCxiBE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApEuB;EAqEvB;EACA;EACA;EACA;AvCyiBJ;AuCviBI;EACE;AvCyiBN;AuCpiBM;EAGE;AvCoiBR;AuC/hBE;EACE,+BAtFqB;AvCwnBzB;AuC1hBI;EACE;AvC6hBN;AuCvhBE;EACE;EACA,aA3Gc;EAgHd;EAIA;EAGA;EACA;AvCihBJ;AuC7gBE;EACE;EAKA;EAKA;AvCwgBJ;AwC/oBE;EACE;AxCkpBJ;AwC5oBE;EAyCA;EACA;EAxCE;EACA;AxCgpBJ;AwCvoBE;EA6BA;EACA;EA5BE;AxC2oBJ;AwCjoBE;EAA0C;AxCqoB5C;AwCroBE;EAA0C;AxCqoB5C;AwCpoBE;EAAwC;AxCuoB1C;AwCvoBE;EAAwC;AxCuoB1C;AwCroBE;EAEE;UAAA;AxCsoBJ;AwCnoBE;EAEE;UAAA;AxCqoBJ;AyCvlBE;EACE;AzC0lBJ;A0CvpBE;EACE;A1C0pBJ;AAhqBA;EAGE;AAiqBF;A2C7lBE;EACE;A3C+lBJ;A2C7lBI;EACE;A3C+lBN;A2C5lBI;EACE;A3C8lBN;AClsBE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;ADosBJ;AClsBE;EAEE;ADosBJ;ACtsBE;;EAEE;ADosBJ;AClsBE;EACE;EACA;ADosBJ;AClsBE;;;;EAIE;ADosBJ;AClsBE;;EAEE;ADosBJ;AClsBE;;;EAGE;ADosBJ;AClsBE;;;;EAIE;ADosBJ;AClsBE;;;;;;;EAOE;ADosBJ;AClsBE;EACE;ADosBJ;AClsBE;EACE;EACA;EACA;ADosBJ;AClsBE;EACE;EACA;EACA;ADosBJ;AClsBE;;EAEE;ADosBJ;AClsBE;EACE;ADosBJ;AClsBE;EACE;ADosBJ;AClsBE;EACE;ADosBJ;A2C9vBE;EAEE;EAIA;A3C4vBJ;A2C/vBI;EACE;A3CiwBN;A2C3vBE;EACE;A3C6vBJ;A2C1vBE;EACE;EACA;A3C4vBJ;A2C3vBI;EACE;A3C6vBN;A2CzvBE;;EAEE;A3C2vBJ;A2CxvBE;EACE;A3C0vBJ;A2CxvBE;EACE;A3C0vBJ;A2CvvBE;EACE;A3CyvBJ;A2CvvBE;EACE;A3CyvBJ;A2CpvBE;EACE;EACA;A3CsvBJ;A2CpvBI;EACE;EACA;A3CsvBN;A2C5uBM;EACE;EACA;A3C8uBR;A2ChvBM;EACE;EACA;A3CkvBR;A2CpvBM;EACE;EACA;A3CsvBR;A4C5zBE;EAII;A5C2zBN;AiC7zBE;EACE;AjC+zBJ;AiC7zBI;EAEE;AjC8zBN;AiC1zBI;EACE;AjC4zBN;AiCzzBI;EACE;EACA;AjC2zBN;AiCxzBI;EACE;AjC0zBN;AiCtzBE;EACE;AjCwzBJ;AiCrzBE;EACE;AjCuzBJ;AiCpzBE;EACE;AjCszBJ;AkC11BE;EACE;AlC41BJ;AkCz1BE;EACE;AlC21BJ;A6Ct1BE;EACE;A7Cw1BJ;A6Ct1BI;EACE;A7Cw1BN;A6Cp1BE;EACE,cAZe;A7Ck2BnB;A6Cn1BE;;EAEE;A7Cq1BJ;A6C70BE;;;;EAIE;A7C+0BJ;A6C50BE;;EAEE;A7C80BJ;A6Cz0BI;;EACE,mBAxCa;A7Co3BnB;A8Cr3BE;EAIE;EACA;A9Co3BJ;A8C72BI;ECkIF;A/C8uBF;A8Ch3BI;ECkIF;A/CivBF;A8Cn3BI;ECkIF;A/CovBF;A8Ct3BI;ECkIF;A/CuvBF;A8Cz3BI;ECkIF;A/C0vBF;A8C53BI;ECkIF;A/C6vBF;A8C/3BI;ECkIF;A/CgwBF;A8Cl4BI;ECkIF;A/CmwBF;A8Cr4BI;ECkIF;A/CswBF;A8Cx4BI;ECkIF;A/CywBF;A8C34BI;ECkIF;A/C4wBF;A8C94BI;ECkIF;A/C+wBF;A8Cj5BI;ECkIF;A/CkxBF;A8Cp5BI;ECkIF;A/CqxBF;A8Cv5BI;ECkIF;A/CwxBF;A8C15BI;ECkIF;A/C2xBF;A8C75BI;ECkIF;A/C8xBF;A8Ch6BI;ECkIF;A/CiyBF;A8Cn6BI;ECkIF;A/CoyBF;A8Ct6BI;ECkIF;A/CuyBF;A8Cz6BI;ECkIF;A/C0yBF;A8C56BI;ECkIF;A/C6yBF;A8C/6BI;ECkIF;A/CgzBF;A8Cl7BI;ECkIF;A/CmzBF;A8Cr7BI;ECkIF;A/CszBF;A8Cj7BI;EACE;A9Cm7BN;AgD78BE;EAEE;EACA;AhD+8BJ;A+CnzBE;EAXA;A/Ci0BF;AgD38BI;EACE;AhD68BN;AgD38BM;EACE;AhD68BR;AEh4BE;EACE;AFk4BJ;AE93BI;EACE;AFg4BN;AE53BE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF83BJ;AE33BE;;EAEE;AF63BJ;AEx3BE;EAEE;AFy3BJ;AEt+BE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AFm/Bb;AEp+BI;EACE;AFs+BN;AEj+BI;EACE;AFm+BN;AE99BI;EACE;AFg+BN;AE39BI;EACE;EACA;AF69BN;AEx9BI;EACE;AF09BN;AEr9BI;EACE;EACA;AFu9BN;AEj9BM;EACE;AFm9BR;AE98BM;EACE;EACA;AFg9BR;AE38BM;EACE;AF68BR;AEx8BM;EACE;EACA;AF08BR;AE7gCE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AF2hCf;AE3gCI;EACE;AF6gCN;AExgCI;EACE;AF0gCN;AErgCI;EACE;AFugCN;AElgCI;EACE;EACA;AFogCN;AE//BI;EACE;AFigCN;AE5/BI;EACE;EACA;AF8/BN;AEx/BM;EACE;AF0/BR;AEr/BM;EACE;EACA;AFu/BR;AEl/BM;EACE;AFo/BR;AE/+BM;EACE;EACA;AFi/BR;AEpjCE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFgkCb;AEljCI;EACE;AFojCN;AE/iCI;EACE;AFijCN;AE5iCI;EACE;AF8iCN;AEziCI;EACE;EACA;AF2iCN;AEtiCI;EACE;AFwiCN;AEniCI;EACE;EACA;AFqiCN;AE/hCM;EACE;AFiiCR;AE5hCM;EACE;EACA;AF8hCR;AEzhCM;EACE;AF2hCR;AEthCM;EACE;EACA;AFwhCR;AEt9BE;EACE;EACA;AFw9BJ;AsC/kCI;EpC0HE;EACA;AFw9BN;AEn9BI;EACE;EACA;AFs9BN;AEj9BI;EACE;EACA;AFm9BN;AE98BI;EAWI;EAMF;AFi8BN;AK5nCE;E0CkJA;E1ChJE;EACA;AL8nCJ;AM5iCE;EAKE;EACA;AN0iCJ;AM1kCE;EACE;AN4kCJ;AM1kCE;EACE;AN4kCJ;AM1kCE;EACE;AN4kCJ;AMxkCI;EAEE;ANykCN;AM5oCE;EACE;AN8oCJ;AM3oCE;EACE;AN6oCJ;AM1oCE;EACE;AN4oCJ;AMzoCE;EACE;AN2oCJ;AM1jCI;EACE,YAxGY;EAyGZ;AN4jCN;AMxjCE;EACE;AN0jCJ;AMrjCE;EACE;ANujCJ;AMpjCE;EAEE;EACA;ANqjCJ;AMhnCE;EACE;ANknCJ;AMhnCE;EACE;ANknCJ;AMhnCE;EACE;ANknCJ;AM9mCI;EAEE;AN+mCN;AM5nCE;EACE;AN8nCJ;AM5nCE;EACE;AN8nCJ;AM5nCE;EACE;AN8nCJ;AM1nCI;EAEE;AN2nCN;AM7pCE;EAXA,0CADmB;AN4qCrB;AM5pCE;EAfA,oCADmB;AN+qCrB;AM3pCE;EAnBA,0CADmB;ANkrCrB;A+C/iCE;EAXA;A/C6jCF;A+CljCE;EAXA;A/CgkCF;A+CrjCE;EAXA;A/CmkCF;A+CxjCE;EAXA;A/CskCF;A+C3jCE;EAXA;A/CykCF;A+C9jCE;EAXA;A/C4kCF;A+CjkCE;EAXA;A/C+kCF;A+CpkCE;;EAXA;A/CmlCF;AOjtCI;;EACE;APotCN;AOhtCE;EACE;APktCJ;AOhtCI;EACE;APktCN;AO9sCE;EACE;EACA;APgtCJ;AO9sCI;EACE;APgtCN;AO5sCE;EACE;AP8sCJ;AO3sCE;EACE;EACA;AP6sCJ;AOzsCI;EACE;EACA;EACA;AP2sCN;AOvsCE;EACE;EACA;APysCJ;AOvsCI;EACE;APysCN;AOrsCE;EACE;EACA;APusCJ;AOrsCI;EACE;APusCN;AOpsCI;EACE;APssCN;AOlsCE;;EAEE;APosCJ;AOlrCI;EACE,iBALc;APyrCpB;AQzxCE;EAEE;EACA;AR2xCJ;A+CloCE;EAXA;A/CgpCF;A+CroCE;EAXA;A/CmpCF;AQzxCE;EACE;AR2xCJ;ASzxCE;EACE;AT2xCJ;ASxxCE;EACE,aAdoB;ATwyCxB;ASvxCE;EAGE;ATuxCJ;ASpxCE;EAGE;AToxCJ;ASjxCE;EACE,yBA9BoB;ATizCxB;AS/wCI;EACE;ATixCN;AS9wCI;EACE;ATgxCN;AS7wCI;EACE;AT+wCN;ASxwCM;EACE,yBA5CW;ATszCnB;ASrwCM;EACE,qBAlDW;ATyzCnB;ASnwCI;EACE;ATqwCN;AS/vCE;EACE;ATiwCJ;AS5vCI;;EACE;AT+vCN;AS5vCI;;EACE;AT+vCN;AS5vCI;;EACE;AT+vCN;AU7yCE;EA5CA,yBAyCwB;EAxCxB,0BAyCwB;AVmzC1B;AU11CE;EACE,0BAsCsB;EArCtB;AV41CJ;AUjzCM;EqCmGJ;A/CitCF;AUhzCM;EACE;AVkzCR;AU9yCI;EACE;AVgzCN;AU7yCI;EACE;AV+yCN;AU1yCI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVy1C1B;AU92CE;EACE,YAoBsB;EAnBtB;AVg3CJ;AU11CE;EAVA,0CADmB;AVw2CrB;AUjzCI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVo2C1B;AUz3CE;EACE,YAoBsB;EAnBtB;AV23CJ;AUr2CE;EAVA,0CADmB;AVm3CrB;AUxzCI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AV+2C1B;AUp4CE;EACE,0BAoBsB;EAnBtB;AVs4CJ;AUh3CE;EAVA,oCADmB;AV83CrB;AW94CE;EACE;AXg5CJ;AW74CE;;;;EAIE;AX+4CJ;AW54CE;;EAEE;AX84CJ;AW34CE;EACE;AX64CJ;AW14CE;EACE;AX44CJ;AY71CE;EACE;AZ+1CJ;AY11CE;;;EAGE;AZ41CJ;AYz1CE;EACE;AZ21CJ;AYx1CE;;EAEE;AZ01CJ;AYv1CE;;EAEE;EACA;AZy1CJ;AYr4CE;EAiDI,0BA/Ba;AZs3CnB;AYn1CE;EACE,0BApCe;AZy3CnB;AYl1CE;EAOI;AZ80CN;AY94CE;EA2EI;AZs0CN;AYj5CE;EAoFM;AZg0CR;AY9uCE;EACE,mCA9MA;AZ87CJ;AY7uCE;;EAEE,kCAViB;AZyvCrB;AY5uCE;;EAEE;AZ8uCJ;AY3uCE;;EAEE;AZ6uCJ;AY1uCE;;EAEE,mBAxBc;AZowClB;AYzuCE;;EAEE,mBA5BuB;AZuwC3B;AYh9CE;EACE;EACA;AZk9CJ;AY/8CE;EAII;AZ88CN;AYr8CE;EACE;AZu8CJ;AYr7CE;;EASI;AZg7CN;AYl8CE;EASA;IASI;EZo7CJ;AACF;AY51CE;EmCCA;EnCCE;EACA;AZ81CJ;AY7xCE;EACE,mCA9MA;AZ6+CJ;AY5xCE;;EAEE,kCAViB;AZwyCrB;AY3xCE;;EAEE;AZ6xCJ;AY1xCE;;EAEE;AZ4xCJ;AYzxCE;;EAEE,mBAxBc;AZmzClB;AYxxCE;;EAEE,mBA5BuB;AZszC3B;AY//CE;EACE;EACA;AZigDJ;AY9/CE;EAII;AZ6/CN;AYp/CE;EACE;AZs/CJ;AYp+CE;;EASI;AZ+9CN;AYj/CE;EASA;IASI;EZm+CJ;AACF;AYv0CE;EACE,kCA9MA;AZuhDJ;AYt0CE;;EAEE,kCAViB;AZk1CrB;AYr0CE;;EAEE;AZu0CJ;AYp0CE;;EAEE;AZs0CJ;AYn0CE;;EAEE,mBAxBc;AZ61ClB;AYl0CE;;EAEE,mBA5BuB;AZg2C3B;AYziDE;EACE;EACA;AZ2iDJ;AYxiDE;EAII;AZuiDN;AY9hDE;EACE;AZgiDJ;AY9gDE;;EASI;AZygDN;AY3hDE;EASA;IASI;EZ6gDJ;AACF;AYv6CE;EmCbA;A/Cu7CF;AYt6CE;EACE;AZw6CJ;AYt6CI;EACE;AZw6CN;AYr6CI;EACE;AZu6CN;AYn6CE;EACE;AZq6CJ;AaplDE;EkCiJA;ElC/IE;EACA;AbslDJ;AiD9lDE;EACE;AjDgmDJ;AiD7lDE;EACE;AjD+lDJ;Ac7lDE;EAEE;EACA;Ad8lDJ;A+Cv8CE;EAXA;A/Cq9CF;Ac9lDE;EACE;AdgmDJ;AkDhnDM;EpCoBF;Ad+lDJ;Ac1lDE;EACE;IAEE;Ed2lDJ;AACF;AcxlDE;EACE;Ad0lDJ;AcvlDE;;EAEE;AdylDJ;ActlDE;EACE;AdwlDJ;ActlDI;;EAEE;AdwlDN;Ac3jDI;EACE,YALe;AdkkDrB;Ac3jDM;EACE,YAVY;AdukDpB;Ae/mDE;EACE,yBAZA;Af8nDJ;Ae/mDE;EACE,yBAhBA;AfioDJ;Ae9mDE;EACE,cAnBoB;AfmoDxB;Ae9mDI;EACE,cAhBqB;AfgoD3B;Ae7mDI;EACE,cAnBmB;AfkoDzB;Ae3mDE;EACE,cA9BqB;Af2oDzB;Ae1mDE;EACE,qCA9BA;Af0oDJ;AexmDI;EACE,yBAhCsB;Af0oD5B;AexmDM;EACE,yBArCmB;Af+oD3B;AevmDM;EACE,yBAxCiB;AfipDzB;AenmDI;EACE,cA9CsB;AfmpD5B;AelmDI;EACE,cApDqB;AfwpD3B;AejmDI;EACE,cAvDmB;Af0pDzB;Ae3lDI;EACE,cAhEmB;Af6pDzB;Ae3lDM;;EAEE,cApEiB;AfiqDzB;AezlDI;;EAEE,yBA1EmB;AfqqDzB;AevlDE;EACE,cA/EqB;AfwqDzB;AgBnrDI;EACE,0BANU;AhB2rDhB;AgBlrDI;EACE,0BAVU;AhB8rDhB;AgBjrDI;EACE,qCAZF;AhB+rDJ;AgBhrDI;EmCzBF;EACA;EACA;AnD4sDF;AoDtsDI;EACE,qCAJF;ApD4sDJ;AoDrsDI;EDZF;EACA;EACA;AnDotDF;AiBtsDI;EACE,qCATF;AjBitDJ;AiBrsDI;EACE,qCAXF;AjBktDJ;AiBpsDI;EACE,qCAbF;AjBmtDJ;AiBlsDM;EACE,0BAjBiB;AjBqtDzB;AiBjsDM;EACE;AjBmsDR;AkB/sDI;EACE,0BAXF;AlB4tDJ;AkB9sDI;EACE,0BAbF;AlB6tDJ;AkB5sDM;EACE,cAjBkB;AlB+tD1B;AkB3sDM;EACE,cApBiB;AlBiuDzB;AkB1sDM;EACE,cAvBe;AlBmuDvB;AkBtsDM;EACE,cA9Be;AlBsuDvB;AkBnsDM;EACE,0BA3CiB;AlBgvDzB;AkBlsDM;EACE,0BAtCJ;AlB0uDJ;AqDxvDI;EACE;ArD0vDN;AqDvvDI;EACE;ArDyvDN;AqDtvDI;EACE;ArDwvDN;AqB5vDE;EACE;ArB8vDJ;AqB3vDE;;EAEE;ArB6vDJ;AqB1vDE;EACE;ArB4vDJ;AsD/wDE;EjCsBI;ArB4vDN;AsDlxDE;EjCsBI;ArB4vDN;AsD9wDE;EjCkBI;ArB+vDN;AsD7wDE;EjCcI;ArBkwDN;AsD1wDE;EjCQI;ArBqwDN;AqBhvDE;EACE;ArBkvDJ;AqB/uDE;;EAEE;ArBivDJ;AqB9uDE;EACE;ArBgvDJ;AgChyDI;EACE;AhCkyDN;AgC/xDI;EACE;AhCiyDN;AgC9xDI;EACE;AhCgyDN;AgC7xDI;EACE;EACA;AhC+xDN;AgCxxDI;;;;;EACE;AhC8xDN;AgCzxDI;EACE;AhC2xDN;AsBxzDE;EAEE;AtByzDJ;A+C/pDE;EAXA;A/C6qDF;AsBzzDE;EACE;EACA;AtB2zDJ;AsBxzDM;;;EAGE;AtB0zDR;AsBrzDE;;EAEE;AtBuzDJ;AsBhzDI;;;;EACE;AtBqzDN;AuBj1DE;EACE;AvBm1DJ;AuBh1DE;;EAEE;AvBk1DJ;AuB/0DE;;EAEE;EACA;AvBi1DJ;AuB90DE;;EAEE;AvBg1DJ;AuB50DI;;;;EAIE;AvB80DN;AuBvzDI;EACE,gBALK;AvB8zDX;AuD/1DE;EACE;AvDk2DJ;AuD/1DE;EACE;AvDi2DJ;AuD91DE;EACE;AvDg2DJ;AuD51DI;EACE;AvD81DN;AuD31DI;EACE;AvD61DN;AuD11DI;EACE;AvD41DN;AuDv1DI;EACE;AvDy1DN;AuDt1DI;EACE;AvDw1DN;AuDr1DI;EACE;AvDu1DN;AwDx4DI;EACE;AxD04DN;AwDv4DI;EACE;AxDy4DN;AwDt4DI;EACE;AxDw4DN;AwBj4DE;EACE;AxBm4DJ;AwBx5DE;EACE;AxB05DJ;AwBv5DE;;EAIE;AxBu5DJ;AwB/5DE;EACE;AxBi6DJ;AwB95DE;;EAIE;AxB85DJ;AwBt6DE;EACE;AxBw6DJ;AwBr6DE;;EAIE;AxBq6DJ;AwBp4DM;;EAEE;AxBs4DR;AwBn4DM;;EAEE;AxBq4DR;AwBl4DM;EACE;AxBo4DR;AwB93DI;EACE;AxBg4DN;AyBj7DE;EACE;AzBm7DJ;AyBh7DE;EACE;AzBk7DJ;AyB/6DE;EACE;AzBi7DJ;AyB96DE;EACE;AzBg7DJ;AyB76DE;EACE;AzB+6DJ;A+CxyDE;EAXA;A/CszDF;AyB/6DI;EACE;AzBi7DN;AyB36DM;EACE;AzB66DR;AyB16DM;EACE;AzB46DR;AyBz6DM;EACE;AzB26DR;AyBv6DI;EACE;AzBy6DN;AyBt6DI;EACE;AzBw6DN;AyDl9DE;EACE,yBALmC;EAMnC;AzDo9DJ;AyDj9DE;EACE,uBAXwB;EAYxB;AzDm9DJ;AyDj9DI;EACE,uBAb2B;AzDg+DjC;AyDh9DI;EV6HF;A/Cs1DF;AyD58DE;EACE,2CAvBmB;AzDq+DvB;AyD58DI;EACE,0CA1BiB;EA2BjB;AzD88DN;AyD18DE;EACE,0CAhCmB;EAiCnB;AzD48DJ;AyD18DI;EACE;EACA,2CArCiB;AzDi/DvB;AyDx8DE;EAQI;AzDm8DN;A0B5/DI;EACE;A1B8/DN;A0B3/DI;EAGE;A1B2/DN;A0Bx/DI;EAGE;A1Bw/DN;A0BrgEI;EACE;A1BugEN;A0BpgEI;EAGE;A1BogEN;A0BjgEI;EAGE;A1BigEN;A0B9gEI;EACE;A1BghEN;A0B7gEI;EAGE;A1B6gEN;A0B1gEI;EAGE;A1B0gEN;A0Br+DI;EAGE,uBAhBqB;A1Bq/D3B;A0Bj+DE;EqB2FA;ErBzFE;A1Bm+DJ;A0Bh+DE;EACE,qCA3BoB;A1B6/DxB;A2Bx/DE;EACE,qCAbqB;A3BugEzB;A2BtiEE;;;EAGE;A3BwiEJ;A2BriEE;EACE;A3BuiEJ;A2BpiEE;EAGE,yCADQ;A3BqiEZ;A2BjjEE;;;EAGE;A3BmjEJ;A2BhjEE;EACE;A3BkjEJ;A2B/iEE;EAGE,yCADQ;A3BgjEZ;A2B5jEE;;;EAGE;A3B8jEJ;A2B3jEE;EACE;A3B6jEJ;A2B1jEE;EAGE,wCADQ;A3B2jEZ;A2BxgEI;;EACE,qCAhC2B;A3B2iEjC;A2BtgEI;;;EAGE,qCAvCwB;A3B+iE9B;A2BpgEM;EACE,qCA5CsB;A3BkjE9B;A2BhgEI;EAGE,qCADQ;A3BigEd;A2Bt/DM;;EAEE,qCA/DJ;A3BujEJ;A2Bp/DQ;;EAEE,qCAnEN;A3ByjEJ;A2Bh/DM;EACE,iCAhFiB;EAiFjB;A3Bk/DR;A2B7+DQ;EACE,iCAtFuB;A3BqkEjC;A2B5+DQ;EACE,iCAzFoB;A3BukE9B;A2Bx+DE;EACE,gCAzFA;A3BmkEJ;A2Bj+DE;EACE;EAIA;A3Bg+DJ;A2Bt9DE;EACE;A3Bw9DJ;A4BxmEI;EAIE;A5BumEN;A4BpmEI;EACE;A5BsmEN;A4BhmEI;EACE;IACE;E5BkmEN;AACF;A4B/lEI;;EAIE;A5B+lEN;A4B5lEI;EAGE;EACA;A5B4lEN;A4BzlEI;;;EAGE;EACA;A5B2lEN;A4BvlEM;EACE;A5BylER;A4BtlEM;;;EAGE;EACA;A5BwlER;A4BnlEM;EACE;A5BqlER;A4BllEM;;;EAGE;EACA;A5BolER;A4BhlEI;EACE;EACA;A5BklEN;A4B/kEI;EACE;A5BilEN;A4B9kEI;EACE;A5BglEN;A4B5kEE;EACE;A5B8kEJ;A4B3kEE;EACE;A5B6kEJ;A4B1kEE;;;EAGE;A5B4kEJ;A4BniEI;EACE,YANK;A5B2iEX;A4BliEI;;EAEE;A5BqiEN;A4BhiEI;EACE;EACA;A5BmiEN;A4B9hEM;EACE;A5BiiER;A4B5hEI;EACE;A5B+hEN;A0DpsEE;EAYI;A1D4rEN;A6BpsEE;;EAEE,4CAJc;A7B0sElB;A6BlsEI;;EAEE,yCAVY;EAWZ;A7BosEN;A6BhsEE;EACE;A7BksEJ;A6BhsEI;EACE;A7BksEN;A6B9rEE;EACE;A7BgsEJ;A6B7rEE;EACE;A7B+rEJ;A6B3rEE;;EAEE;EACA;A7B6rEJ;A6B/oEM;;;;;EACE;A7BqpER;A6BhqEE;EACE;A7BkqEJ;A6BnqEE;EACE;A7BqqEJ;A6B5pEM;;;;;EACE;A7BkqER;A6B7qEE;EACE;A7B+qEJ;A6BhrEE;EACE;A7BkrEJ;A6BzqEM;;;;;EACE;A7B+qER;A6B1rEE;EACE;A7B4rEJ;A6B7rEE;EACE;A7B+rEJ;A6BtrEM;;;;;EACE;A7B4rER;A6BjrEE;EACE;A7BmrEJ;A6B/qEE;EACE;A7BirEJ;A6B/qEI;EACE;A7BirEN;A6B5qEE;;;;;;;EAIE;A7BirEJ;A6B9qEE;;;EAGE;EACA;A7BgrEJ;A6B3qEE;;;;;EAIE;EACA;A7B8qEJ;A6B7tEM;;;;;EACE;A7BmuER;A6BxtEE;EACE;A7B0tEJ;A6BttEE;EACE;A7BwtEJ;A6BttEI;EACE;A7BwtEN;A6BntEE;;;;;;;EAIE;A7BwtEJ;A6BrtEE;;;EAGE;EACA;A7ButEJ;A6BltEE;;;;;EAIE;EACA;A7BqtEJ;A6BpwEM;;;;;EACE;A7B0wER;A6B/vEE;EACE;A7BiwEJ;A6B7vEE;EACE;A7B+vEJ;A6B7vEI;EACE;A7B+vEN;A6B1vEE;;;;;;;EAIE;A7B+vEJ;A6B5vEE;;;EAGE;EACA;A7B8vEJ;A6BzvEE;;;;;EAIE;EACA;A7B4vEJ;A8Bt1EE;EACE;EACA;A9Bw1EJ;A8Bt1EI;EApCF;EACA;A9B63EF;A8Bt1EI;EAxCF;EACA;A9Bi4EF;A8Bt1EI;EA5CF;EACA;A9Bq4EF;A8Bj4EE;;;EAGE;A9Bm4EJ;A8Bh4EE;;;;;EAKE;A9Bk4EJ;A8B/3EE;EACE;A9Bi4EJ;A8B95EE;EACE,gBA6Ee;A9Bm1EnB;A8B95EE;EACE,YA0Ee;A9Bu1EnB;A8B30EI;EA1FF;IACE,gBA+Ec;E9B01EhB;;E8Bv6EA;IACE,YA4Ec;E9B81EhB;AACF;A+Bt6EE;EACE;A/Bw6EJ;AoC/6EE;EACE;ApCi7EJ;AoC96EE;;EAEE;ApCg7EJ;AoCx5EI;EACE,gBALK;ApC+5EX;AmCz7EE;EAGE;EACA;EY6IF;A/C8yEF;AmCt7EE;EACE;AnCw7EJ;AAh7EE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;AAk7EJ;AAh7EE;EAEE;AAk7EJ;AAp7EE;;EAEE;AAk7EJ;AAh7EE;EACE;EACA;AAk7EJ;AAh7EE;;;;EAIE;AAk7EJ;AAh7EE;;EAEE;AAk7EJ;AAh7EE;;;EAGE;AAk7EJ;AAh7EE;;;;EAIE;AAk7EJ;AAh7EE;;;;;;;EAOE;AAk7EJ;AAh7EE;EACE;AAk7EJ;AAh7EE;EACE;EACA;EACA;AAk7EJ;AAh7EE;EACE;EACA;EACA;AAk7EJ;AAh7EE;;EAEE;AAk7EJ;AAh7EE;EACE;AAk7EJ;AAh7EE;EACE;AAk7EJ;AAh7EE;EACE;AAk7EJ;A2Cx7EE;EACE;A3C27EJ;A2Cz7EI;EACE;A3C27EN;A2Cx7EI;EACE;A3C07EN;AC58EE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;AD88EJ;AC58EE;EACE;AD88EJ;AC/8EE;EACE;AD88EJ;AC58EE;EACE;EACA;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;;EAEE;AD88EJ;AC58EE;;;;EAIE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;;;;;EAKE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;EACA;EACA;EACA;AD88EJ;AC58EE;EACE;EACA;EACA;EACA;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;AC58EE;EACE;AD88EJ;A2C9mFE;EAEE;EAIA;A3C4mFJ;A2C/mFI;EACE;A3CinFN;A2C3mFE;EACE;A3C6mFJ;A2C1mFE;EACE;EACA;A3C4mFJ;A2C3mFI;EACE;A3C6mFN;A2CzmFE;;EAEE;A3C2mFJ;A2CxmFE;EACE;A3C0mFJ;A2CxmFE;EACE;A3C0mFJ;A2CvmFE;EACE;A3CymFJ;A2CvmFE;EACE;A3CymFJ;A2CpmFE;EACE;EACA;A3CsmFJ;A2CpmFI;EACE;EACA;A3CsmFN;A2C5lFM;EACE;EACA;A3C8lFR;A2ChmFM;EACE;EACA;A3CkmFR;A2CpmFM;EACE;EACA;A3CsmFR;A4C5qFE;EAII;A5C2qFN;AiC7qFE;EACE;AjC+qFJ;AiC7qFI;EAEE;AjC8qFN;AiC1qFI;EACE;AjC4qFN;AiCzqFI;EACE;EACA;AjC2qFN;AiCxqFI;EACE;AjC0qFN;AiCtqFE;EACE;AjCwqFJ;AiCrqFE;EACE;AjCuqFJ;AiCpqFE;EACE;AjCsqFJ;AkC1sFE;EACE;AlC4sFJ;AkCzsFE;EACE;AlC2sFJ;A6CtsFE;EACE;A7CwsFJ;A6CtsFI;EACE;A7CwsFN;A6CpsFE;EACE,cAZe;A7CktFnB;A6CnsFE;;EAEE;A7CqsFJ;A6C7rFE;;;;EAIE;A7C+rFJ;A6C5rFE;;EAEE;A7C8rFJ;A6CzrFI;;EACE,mBAxCa;A7CouFnB;A8CruFE;EAIE;EACA;A9CouFJ;A8C7tFI;ECkIF;A/C8lFF;A8ChuFI;ECkIF;A/CimFF;A8CnuFI;ECkIF;A/ComFF;A8CtuFI;ECkIF;A/CumFF;A8CzuFI;ECkIF;A/C0mFF;A8C5uFI;ECkIF;A/C6mFF;A8C/uFI;ECkIF;A/CgnFF;A8ClvFI;ECkIF;A/CmnFF;A8CrvFI;ECkIF;A/CsnFF;A8CxvFI;ECkIF;A/CynFF;A8C3vFI;ECkIF;A/C4nFF;A8C9vFI;ECkIF;A/C+nFF;A8CjwFI;ECkIF;A/CkoFF;A8CpwFI;ECkIF;A/CqoFF;A8CvwFI;ECkIF;A/CwoFF;A8C1wFI;ECkIF;A/C2oFF;A8C7wFI;ECkIF;A/C8oFF;A8ChxFI;ECkIF;A/CipFF;A8CnxFI;ECkIF;A/CopFF;A8CtxFI;ECkIF;A/CupFF;A8CzxFI;ECkIF;A/C0pFF;A8C5xFI;ECkIF;A/C6pFF;A8C/xFI;ECkIF;A/CgqFF;A8ClyFI;ECkIF;A/CmqFF;A8CryFI;ECkIF;A/CsqFF;A8CjyFI;EACE;A9CmyFN;AgD7zFE;EAEE;EACA;AhD+zFJ;A+CnqFE;EAXA;A/CirFF;AgD3zFI;EACE;AhD6zFN;AgD3zFM;EACE;AhD6zFR;AEhvFE;EACE;AFkvFJ;AE9uFI;EACE;AFgvFN;AE5uFE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF8uFJ;AE3uFE;;EAEE;AF6uFJ;AExuFE;EAEE;AFyuFJ;AEt1FE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AFm2Fb;AEp1FI;EACE;AFs1FN;AEj1FI;EACE;AFm1FN;AE90FI;EACE;AFg1FN;AE30FI;EACE;EACA;AF60FN;AEx0FI;EACE;AF00FN;AEr0FI;EACE;EACA;AFu0FN;AEj0FM;EACE;AFm0FR;AE9zFM;EACE;EACA;AFg0FR;AE3zFM;EACE;AF6zFR;AExzFM;EACE;EACA;AF0zFR;AE73FE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AF24Ff;AE33FI;EACE;AF63FN;AEx3FI;EACE;AF03FN;AEr3FI;EACE;AFu3FN;AEl3FI;EACE;EACA;AFo3FN;AE/2FI;EACE;AFi3FN;AE52FI;EACE;EACA;AF82FN;AEx2FM;EACE;AF02FR;AEr2FM;EACE;EACA;AFu2FR;AEl2FM;EACE;AFo2FR;AE/1FM;EACE;EACA;AFi2FR;AEp6FE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFg7Fb;AEl6FI;EACE;AFo6FN;AE/5FI;EACE;AFi6FN;AE55FI;EACE;AF85FN;AEz5FI;EACE;EACA;AF25FN;AEt5FI;EACE;AFw5FN;AEn5FI;EACE;EACA;AFq5FN;AE/4FM;EACE;AFi5FR;AE54FM;EACE;EACA;AF84FR;AEz4FM;EACE;AF24FR;AEt4FM;EACE;EACA;AFw4FR;AEt0FE;EACE;EACA;AFw0FJ;AsC/7FI;EpC0HE;EACA;AFw0FN;AEn0FI;EACE;EACA;AFs0FN;AEj0FI;EACE;EACA;AFm0FN;AE9zFI;EAWI;EAMF;AFizFN;AK5+FE;E0CkJA;E1ChJE;EACA;AL8+FJ;AM55FE;EAKE;EACA;AN05FJ;AM17FE;EACE;AN47FJ;AM17FE;EACE;AN47FJ;AM17FE;EACE;AN47FJ;AMx7FI;EAEE;ANy7FN;AM5/FE;EACE;AN8/FJ;AM3/FE;EACE;AN6/FJ;AM1/FE;EACE;AN4/FJ;AMz/FE;EACE;AN2/FJ;AM16FI;EACE,YAxGY;EAyGZ;AN46FN;AMx6FE;EACE;AN06FJ;AMr6FE;EACE;ANu6FJ;AMp6FE;EAEE;EACA;ANq6FJ;AMh+FE;EACE;ANk+FJ;AMh+FE;EACE;ANk+FJ;AMh+FE;EACE;ANk+FJ;AM99FI;EAEE;AN+9FN;AM5+FE;EACE;AN8+FJ;AM5+FE;EACE;AN8+FJ;AM5+FE;EACE;AN8+FJ;AM1+FI;EAEE;AN2+FN;AM7gGE;EAXA,0CADmB;AN4hGrB;AM5gGE;EAfA,oCADmB;AN+hGrB;AM3gGE;EAnBA,0CADmB;ANkiGrB;A+C/5FE;EAXA;A/C66FF;A+Cl6FE;EAXA;A/Cg7FF;A+Cr6FE;EAXA;A/Cm7FF;A+Cx6FE;EAXA;A/Cs7FF;A+C36FE;EAXA;A/Cy7FF;A+C96FE;EAXA;A/C47FF;A+Cj7FE;EAXA;A/C+7FF;A+Cp7FE;;EAXA;A/Cm8FF;AOjkGI;;EACE;APokGN;AOhkGE;EACE;APkkGJ;AOhkGI;EACE;APkkGN;AO9jGE;EACE;EACA;APgkGJ;AO9jGI;EACE;APgkGN;AO5jGE;EACE;AP8jGJ;AO3jGE;EACE;EACA;AP6jGJ;AOzjGI;EACE;EACA;EACA;AP2jGN;AOvjGE;EACE;EACA;APyjGJ;AOvjGI;EACE;APyjGN;AOrjGE;EACE;EACA;APujGJ;AOrjGI;EACE;APujGN;AOpjGI;EACE;APsjGN;AOljGE;;EAEE;APojGJ;AQtoGE;EAEE;EACA;ARuoGJ;A+C9+FE;EAXA;A/C4/FF;A+Cj/FE;EAXA;A/C+/FF;AQroGE;EACE;ARuoGJ;ASroGE;EACE;ATuoGJ;ASpoGE;EACE,aAdoB;ATopGxB;ASnoGE;EAGE;ATmoGJ;AShoGE;EAGE;ATgoGJ;AS7nGE;EACE,yBA9BoB;AT6pGxB;AS3nGI;EACE;AT6nGN;AS1nGI;EACE;AT4nGN;ASznGI;EACE;AT2nGN;ASpnGM;EACE,yBA5CW;ATkqGnB;ASjnGM;EACE,qBAlDW;ATqqGnB;AS/mGI;EACE;ATinGN;AS3mGE;EACE;AT6mGJ;ASxmGI;;EACE;AT2mGN;ASxmGI;;EACE;AT2mGN;ASxmGI;;EACE;AT2mGN;AUzpGE;EA5CA,yBAyCwB;EAxCxB,YAyCwB;AV+pG1B;AUtsGE;EACE,YAsCsB;EArCtB;AVwsGJ;AU7pGM;EqCmGJ;A/C6jGF;AU5pGM;EACE;AV8pGR;AU1pGI;EACE;AV4pGN;AUzpGI;EACE;AV2pGN;AUtpGI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVqsG1B;AU1tGE;EACE,YAoBsB;EAnBtB;AV4tGJ;AUtsGE;EAVA,0CADmB;AVotGrB;AU7pGI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVgtG1B;AUruGE;EACE,YAoBsB;EAnBtB;AVuuGJ;AUjtGE;EAVA,0CADmB;AV+tGrB;AUpqGI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AV2tG1B;AUhvGE;EACE,0BAoBsB;EAnBtB;AVkvGJ;AU5tGE;EAVA,oCADmB;AV0uGrB;AW1vGE;EACE;AX4vGJ;AWzvGE;;;;EAIE;AX2vGJ;AWxvGE;;EAEE;AX0vGJ;AWvvGE;EACE;AXyvGJ;AWtvGE;EACE;AXwvGJ;AYzsGE;EACE;AZ2sGJ;AYtsGE;;;EAGE;AZwsGJ;AYrsGE;EACE;AZusGJ;AYpsGE;;EAEE;AZssGJ;AYnsGE;;EAEE;EACA;AZqsGJ;AYjvGE;EAiDI,+BA/Ba;AZkuGnB;AY/rGE;EACE,+BApCe;AZquGnB;AY9rGE;EAOI;AZ0rGN;AY1vGE;EA2EI;AZkrGN;AY7vGE;EAoFM;AZ4qGR;AY1lGE;EACE,kCA9MA;AZ0yGJ;AYzlGE;;EAEE,kCAViB;AZqmGrB;AYxlGE;;EAEE;AZ0lGJ;AYvlGE;;EAEE;AZylGJ;AYtlGE;;EAEE,mBAxBc;AZgnGlB;AYrlGE;;EAEE,mBA5BuB;AZmnG3B;AY5zGE;EACE;EACA;AZ8zGJ;AY3zGE;EAII;AZ0zGN;AYjzGE;EACE;AZmzGJ;AYjyGE;;EASI;AZ4xGN;AY9yGE;EASA;IASI;EZgyGJ;AACF;AYxsGE;EmCCA;EnCCE;EACA;AZ0sGJ;AYzoGE;EACE,oCA9MA;AZy1GJ;AYxoGE;;EAEE,kCAViB;AZopGrB;AYvoGE;;EAEE;AZyoGJ;AYtoGE;;EAEE;AZwoGJ;AYroGE;;EAEE,mBAxBc;AZ+pGlB;AYpoGE;;EAEE,mBA5BuB;AZkqG3B;AY32GE;EACE;EACA;AZ62GJ;AY12GE;EAII;AZy2GN;AYh2GE;EACE;AZk2GJ;AYh1GE;;EASI;AZ20GN;AY71GE;EASA;IASI;EZ+0GJ;AACF;AYnrGE;EACE,kCA9MA;AZm4GJ;AYlrGE;;EAEE,kCAViB;AZ8rGrB;AYjrGE;;EAEE;AZmrGJ;AYhrGE;;EAEE;AZkrGJ;AY/qGE;;EAEE,mBAxBc;AZysGlB;AY9qGE;;EAEE,mBA5BuB;AZ4sG3B;AYr5GE;EACE;EACA;AZu5GJ;AYp5GE;EAII;AZm5GN;AY14GE;EACE;AZ44GJ;AY13GE;;EASI;AZq3GN;AYv4GE;EASA;IASI;EZy3GJ;AACF;AYnxGE;EmCbA;A/CmyGF;AYlxGE;EACE;AZoxGJ;AYlxGI;EACE;AZoxGN;AYjxGI;EACE;AZmxGN;AY/wGE;EACE;AZixGJ;Aah8GE;EkCiJA;ElC/IE;EACA;Abk8GJ;AiD18GE;EACE;AjD48GJ;AiDz8GE;EACE;AjD28GJ;Acz8GE;EAEE;EACA;Ad08GJ;A+CnzGE;EAXA;A/Ci0GF;Ac18GE;EACE;Ad48GJ;AkD59GM;EpCoBF;Ad28GJ;Act8GE;EACE;IAEE;Edu8GJ;AACF;Acp8GE;EACE;Ads8GJ;Acn8GE;;EAEE;Adq8GJ;Acl8GE;EACE;Ado8GJ;Acl8GI;;EAEE;Ado8GN;Aer9GE;EACE,+BAZA;Afm+GJ;Aep9GE;EACE,+BAhBA;Afs+GJ;Aen9GE;EACE,cAnBoB;Afw+GxB;Aen9GI;EACE,cAhBqB;Afq+G3B;Ael9GI;EACE,cAnBmB;Afu+GzB;Aeh9GE;EACE,cA9BqB;Afg/GzB;Ae/8GE;EACE,uBA9BA;Af++GJ;Ae78GI;EACE,yBAhCsB;Af++G5B;Ae78GM;EACE,yBArCmB;Afo/G3B;Ae58GM;EACE,yBAxCiB;Afs/GzB;Aex8GI;EACE,cA9CsB;Afw/G5B;Aev8GI;EACE,cApDqB;Af6/G3B;Aet8GI;EACE,cAvDmB;Af+/GzB;Aeh8GI;EACE,cAhEmB;AfkgHzB;Aeh8GM;;EAEE,cApEiB;AfsgHzB;Ae97GI;;EAEE,yBA1EmB;Af0gHzB;Ae57GE;EACE,cA/EqB;Af6gHzB;AgBxhHI;EACE,+BANU;AhBgiHhB;AgBvhHI;EACE,+BAVU;AhBmiHhB;AgBthHI;EACE,0CAZF;AhBoiHJ;AgBrhHI;EmCzBF;EACA;EACA;AnDijHF;AoD3iHI;EACE,0CAJF;ApDijHJ;AoD1iHI;EDZF;EACA;EACA;AnDyjHF;AiB3iHI;EACE,0CATF;AjBsjHJ;AiB1iHI;EACE,2CAXF;AjBujHJ;AiBziHI;EACE,0CAbF;AjBwjHJ;AiBviHM;EACE,+BAjBiB;AjB0jHzB;AiBtiHM;EACE;AjBwiHR;AkBpjHI;EACE,+BAXF;AlBikHJ;AkBnjHI;EACE,YAbF;AlBkkHJ;AkBjjHM;EACE,cAjBkB;AlBokH1B;AkBhjHM;EACE,cApBiB;AlBskHzB;AkB/iHM;EACE,cAvBe;AlBwkHvB;AkB3iHM;EACE,cA9Be;AlB2kHvB;AkBxiHM;EACE,+BA3CiB;AlBqlHzB;AkBviHM;EACE,gCAtCJ;AlB+kHJ;AqD7lHI;EACE;ArD+lHN;AqD5lHI;EACE;ArD8lHN;AqD3lHI;EACE;ArD6lHN;AqBjmHE;EACE;ArBmmHJ;AqBhmHE;;EAEE;ArBkmHJ;AqB/lHE;EACE;ArBimHJ;AsDpnHE;EjCsBI;ArBimHN;AsDvnHE;EjCsBI;ArBimHN;AsDnnHE;EjCkBI;ArBomHN;AsDlnHE;EjCcI;ArBumHN;AsD/mHE;EjCQI;ArB0mHN;AqBhmHQ;EACE,0BsCbU;A3D+mHpB;AqB/lHQ;EACE,0BsCfW;A3DgnHrB;AqB3lHE;EACE;ArB6lHJ;AqB1lHE;;EAEE;ArB4lHJ;AqBzlHE;EACE;ArB2lHJ;AgC3oHI;EACE;AhC6oHN;AgC1oHI;EACE;AhC4oHN;AgCzoHI;EACE;AhC2oHN;AgCxoHI;EACE;EACA;AhC0oHN;AgCnoHI;;;;;EACE;AhCyoHN;AgCpoHI;EACE;AhCsoHN;AsBnqHE;EAEE;AtBoqHJ;A+C1gHE;EAXA;A/CwhHF;AsBpqHE;EACE;EACA;AtBsqHJ;AsBnqHM;;;EAGE;AtBqqHR;AsBhqHE;;EAEE;AtBkqHJ;AsB3pHI;;;;EACE;AtBgqHN;AuB5rHE;EACE;AvB8rHJ;AuB3rHE;;EAEE;AvB6rHJ;AuB1rHE;;EAEE;EACA;AvB4rHJ;AuBzrHE;;EAEE;AvB2rHJ;AuBvrHI;;;;EAIE;AvByrHN;AuDvsHE;EACE;AvDysHJ;AuDtsHE;EACE;AvDwsHJ;AuDrsHE;EACE;AvDusHJ;AuDnsHI;EACE;AvDqsHN;AuDlsHI;EACE;AvDosHN;AuDjsHI;EACE;AvDmsHN;AuD9rHI;EACE;AvDgsHN;AuD7rHI;EACE;AvD+rHN;AuD5rHI;EACE;AvD8rHN;AwD/uHI;EACE;AxDivHN;AwD9uHI;EACE;AxDgvHN;AwD7uHI;EACE;AxD+uHN;AwBxuHE;EACE;AxB0uHJ;AwB/vHE;EACE;AxBiwHJ;AwB9vHE;;EAIE;AxB8vHJ;AwBtwHE;EACE;AxBwwHJ;AwBrwHE;;EAIE;AxBqwHJ;AwB7wHE;EACE;AxB+wHJ;AwB5wHE;;EAIE;AxB4wHJ;AwB3uHM;;EAEE;AxB6uHR;AwB1uHM;;EAEE;AxB4uHR;AwBzuHM;EACE;AxB2uHR;AwBruHI;EACE;AxBuuHN;AyBxxHE;EACE;AzB0xHJ;AyBvxHE;EACE;AzByxHJ;AyBtxHE;EACE;AzBwxHJ;AyBrxHE;EACE;AzBuxHJ;AyBpxHE;EACE;AzBsxHJ;A+C/oHE;EAXA;A/C6pHF;AyBtxHI;EACE;AzBwxHN;AyBlxHM;EACE;AzBoxHR;AyBjxHM;EACE;AzBmxHR;AyBhxHM;EACE;AzBkxHR;AyB9wHI;EACE;AzBgxHN;AyB7wHI;EACE;AzB+wHN;AyDzzHE;EACE,yBALmC;EAMnC;AzD2zHJ;AyDxzHE;EACE,yBAXwB;EAYxB;AzD0zHJ;AyDxzHI;EACE,yBAb2B;AzDu0HjC;AyDvzHI;EV6HF;A/C6rHF;AyDnzHE;EACE,iDAvBmB;AzD40HvB;AyDnzHI;EACE,gDA1BiB;EA2BjB;AzDqzHN;AyDjzHE;EACE,gDAhCmB;EAiCnB;AzDmzHJ;AyDjzHI;EACE;EACA,iDArCiB;AzDw1HvB;AyD/yHE;EAQI;AzD0yHN;A0Bn2HI;EACE;A1Bq2HN;A0Bl2HI;EAGE;A1Bk2HN;A0B/1HI;EAGE;A1B+1HN;A0B52HI;EACE;A1B82HN;A0B32HI;EAGE;A1B22HN;A0Bx2HI;EAGE;A1Bw2HN;A0Br3HI;EACE;A1Bu3HN;A0Bp3HI;EAGE;A1Bo3HN;A0Bj3HI;EAGE;A1Bi3HN;A0B50HI;EAGE,uBAhBqB;A1B41H3B;A0Bx0HE;EqB2FA;ErBzFE;A1B00HJ;A0Bv0HE;EACE,0CA3BoB;A1Bo2HxB;A2B/1HE;EACE,0CAbqB;A3B82HzB;A2B74HE;;;EAGE;A3B+4HJ;A2B54HE;EACE;A3B84HJ;A2B34HE;EAGE,wCADQ;A3B44HZ;A2Bx5HE;;;EAGE;A3B05HJ;A2Bv5HE;EACE;A3By5HJ;A2Bt5HE;EAGE,0CADQ;A3Bu5HZ;A2Bn6HE;;;EAGE;A3Bq6HJ;A2Bl6HE;EACE;A3Bo6HJ;A2Bj6HE;EAGE,wCADQ;A3Bk6HZ;A2B/2HI;;EACE,0CAhC2B;A3Bk5HjC;A2B72HI;;;EAGE,0CAvCwB;A3Bs5H9B;A2B32HM;EACE,0CA5CsB;A3By5H9B;A2Bv2HI;EAGE,2CADQ;A3Bw2Hd;A2B71HM;;EAEE,uBA/DJ;A3B85HJ;A2B31HQ;;EAEE,0CAnEN;A3Bg6HJ;A2Bv1HM;EACE,sCAhFiB;EAiFjB;A3By1HR;A2Bp1HQ;EACE,sCAtFuB;A3B46HjC;A2Bn1HQ;EACE,sCAzFoB;A3B86H9B;A2B/0HE;EACE,sCAzFA;A3B06HJ;A2Bx0HE;EACE;EAIA;A3Bu0HJ;A2B7zHE;EACE;A3B+zHJ;A4B/8HI;EAIE;A5B88HN;A4B38HI;EACE;A5B68HN;A4Bv8HI;EACE;IACE;E5By8HN;AACF;A4Bt8HI;;EAIE;A5Bs8HN;A4Bn8HI;EAGE;EACA;A5Bm8HN;A4Bh8HI;;;EAGE;EACA;A5Bk8HN;A4B97HM;EACE;A5Bg8HR;A4B77HM;;;EAGE;EACA;A5B+7HR;A4B17HM;EACE;A5B47HR;A4Bz7HM;;;EAGE;EACA;A5B27HR;A4Bv7HI;EACE;EACA;A5By7HN;A4Bt7HI;EACE;A5Bw7HN;A4Br7HI;EACE;A5Bu7HN;A4Bn7HE;EACE;A5Bq7HJ;A4Bl7HE;EACE;A5Bo7HJ;A4Bj7HE;;;EAGE;A5Bm7HJ;A0DthIE;EAYI;A1D6gIN;A6BrhIE;;EAEE,kDAJc;A7B2hIlB;A6BnhII;;EAEE,+CAVY;EAWZ;A7BqhIN;A6BjhIE;EACE;A7BmhIJ;A6BjhII;EACE;A7BmhIN;A6B/gIE;EACE;A7BihIJ;A6B9gIE;EACE;A7BghIJ;A6B5gIE;;EAEE;EACA;A7B8gIJ;A6Bh+HM;;;;;EACE;A7Bs+HR;A6Bj/HE;EACE;A7Bm/HJ;A6Bp/HE;EACE;A7Bs/HJ;A6B7+HM;;;;;EACE;A7Bm/HR;A6B9/HE;EACE;A7BggIJ;A6BjgIE;EACE;A7BmgIJ;A6B1/HM;;;;;EACE;A7BggIR;A6B3gIE;EACE;A7B6gIJ;A6B9gIE;EACE;A7BghIJ;A6BvgIM;;;;;EACE;A7B6gIR;A6BlgIE;EACE;A7BogIJ;A6BhgIE;EACE;A7BkgIJ;A6BhgII;EACE;A7BkgIN;A6B7/HE;;;;;;;EAIE;A7BkgIJ;A6B//HE;;;EAGE;EACA;A7BigIJ;A6B5/HE;;;;;EAIE;EACA;A7B+/HJ;A6B9iIM;;;;;EACE;A7BojIR;A6BziIE;EACE;A7B2iIJ;A6BviIE;EACE;A7ByiIJ;A6BviII;EACE;A7ByiIN;A6BpiIE;;;;;;;EAIE;A7ByiIJ;A6BtiIE;;;EAGE;EACA;A7BwiIJ;A6BniIE;;;;;EAIE;EACA;A7BsiIJ;A6BrlIM;;;;;EACE;A7B2lIR;A6BhlIE;EACE;A7BklIJ;A6B9kIE;EACE;A7BglIJ;A6B9kII;EACE;A7BglIN;A6B3kIE;;;;;;;EAIE;A7BglIJ;A6B7kIE;;;EAGE;EACA;A7B+kIJ;A6B1kIE;;;;;EAIE;EACA;A7B6kIJ;A8BvqIE;EACE;EACA;A9ByqIJ;A8BvqII;EApCF;EACA;A9B8sIF;A8BvqII;EAxCF;EACA;A9BktIF;A8BvqII;EA5CF;EACA;A9BstIF;A8BltIE;;;EAGE;A9BotIJ;A8BjtIE;;;;;EAKE;A9BmtIJ;A8BhtIE;EACE;A9BktIJ;A+BtuIE;EACE;A/BwuIJ;AoC/uIE;EACE;ApCivIJ;AoC9uIE;;EAEE;ApCgvIJ;AmCtvIE;EAGE;EACA;EY6IF;A/C0mIF;AmClvIE;EACE;AnCovIJ;A2CzqIE;EACE;A3C4qIJ;A2C1qII;EACE;A3C4qIN;A2CzqII;EACE;A3C2qIN;AC7rIE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;AD+rIJ;AC7rIE;EACE;AD+rIJ;AChsIE;EACE;AD+rIJ;AC7rIE;EACE;EACA;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;;EAEE;AD+rIJ;AC7rIE;;;;EAIE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;;;;;EAKE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;EACA;EACA;EACA;AD+rIJ;AC7rIE;EACE;EACA;EACA;EACA;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;AC7rIE;EACE;AD+rIJ;A2C/1IE;EAEE;EAIA;A3C61IJ;A2Ch2II;EACE;A3Ck2IN;A2C51IE;EACE;A3C81IJ;A2C31IE;EACE;EACA;A3C61IJ;A2C51II;EACE;A3C81IN;A2C11IE;;EAEE;A3C41IJ;A2Cz1IE;EACE;A3C21IJ;A2Cz1IE;EACE;A3C21IJ;A2Cx1IE;EACE;A3C01IJ;A2Cx1IE;EACE;A3C01IJ;A2Cr1IE;EACE;EACA;A3Cu1IJ;A2Cr1II;EACE;EACA;A3Cu1IN;A2C70IM;EACE;EACA;A3C+0IR;A2Cj1IM;EACE;EACA;A3Cm1IR;A2Cr1IM;EACE;EACA;A3Cu1IR;A4C75IE;EAII;A5C45IN;AiC95IE;EACE;AjCg6IJ;AiC95II;EAEE;AjC+5IN;AiC35II;EACE;AjC65IN;AiC15II;EACE;EACA;AjC45IN;AiCz5II;EACE;AjC25IN;AiCv5IE;EACE;AjCy5IJ;AiCt5IE;EACE;AjCw5IJ;AiCr5IE;EACE;AjCu5IJ;AkC37IE;EACE;AlC67IJ;AkC17IE;EACE;AlC47IJ;A6Cv7IE;EACE;A7Cy7IJ;A6Cv7II;EACE;A7Cy7IN;A6Cr7IE;EACE,cAZe;A7Cm8InB;A6Cp7IE;;EAEE;A7Cs7IJ;A6C96IE;;;;EAIE;A7Cg7IJ;A6C76IE;;EAEE;A7C+6IJ;A6C16II;;EACE,mBAxCa;A7Cq9InB;A8Ct9IE;EAIE;EACA;A9Cq9IJ;A8C98II;ECkIF;A/C+0IF;A8Cj9II;ECkIF;A/Ck1IF;A8Cp9II;ECkIF;A/Cq1IF;A8Cv9II;ECkIF;A/Cw1IF;A8C19II;ECkIF;A/C21IF;A8C79II;ECkIF;A/C81IF;A8Ch+II;ECkIF;A/Ci2IF;A8Cn+II;ECkIF;A/Co2IF;A8Ct+II;ECkIF;A/Cu2IF;A8Cz+II;ECkIF;A/C02IF;A8C5+II;ECkIF;A/C62IF;A8C/+II;ECkIF;A/Cg3IF;A8Cl/II;ECkIF;A/Cm3IF;A8Cr/II;ECkIF;A/Cs3IF;A8Cx/II;ECkIF;A/Cy3IF;A8C3/II;ECkIF;A/C43IF;A8C9/II;ECkIF;A/C+3IF;A8CjgJI;ECkIF;A/Ck4IF;A8CpgJI;ECkIF;A/Cq4IF;A8CvgJI;ECkIF;A/Cw4IF;A8C1gJI;ECkIF;A/C24IF;A8C7gJI;ECkIF;A/C84IF;A8ChhJI;ECkIF;A/Ci5IF;A8CnhJI;ECkIF;A/Co5IF;A8CthJI;ECkIF;A/Cu5IF;A8ClhJI;EACE;A9CohJN;AgD9iJE;EAEE;EACA;AhDgjJJ;A+Cp5IE;EAXA;A/Ck6IF;AgD5iJI;EACE;AhD8iJN;AgD5iJM;EACE;AhD8iJR;AEj+IE;EACE;AFm+IJ;AE/9II;EACE;AFi+IN;AE79IE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF+9IJ;AE59IE;;EAEE;AF89IJ;AEz9IE;EAEE;AF09IJ;AEvkJE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AFolJb;AErkJI;EACE;AFukJN;AElkJI;EACE;AFokJN;AE/jJI;EACE;AFikJN;AE5jJI;EACE;EACA;AF8jJN;AEzjJI;EACE;AF2jJN;AEtjJI;EACE;EACA;AFwjJN;AEljJM;EACE;AFojJR;AE/iJM;EACE;EACA;AFijJR;AE5iJM;EACE;AF8iJR;AEziJM;EACE;EACA;AF2iJR;AE9mJE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AF4nJf;AE5mJI;EACE;AF8mJN;AEzmJI;EACE;AF2mJN;AEtmJI;EACE;AFwmJN;AEnmJI;EACE;EACA;AFqmJN;AEhmJI;EACE;AFkmJN;AE7lJI;EACE;EACA;AF+lJN;AEzlJM;EACE;AF2lJR;AEtlJM;EACE;EACA;AFwlJR;AEnlJM;EACE;AFqlJR;AEhlJM;EACE;EACA;AFklJR;AErpJE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFiqJb;AEnpJI;EACE;AFqpJN;AEhpJI;EACE;AFkpJN;AE7oJI;EACE;AF+oJN;AE1oJI;EACE;EACA;AF4oJN;AEvoJI;EACE;AFyoJN;AEpoJI;EACE;EACA;AFsoJN;AEhoJM;EACE;AFkoJR;AE7nJM;EACE;EACA;AF+nJR;AE1nJM;EACE;AF4nJR;AEvnJM;EACE;EACA;AFynJR;AEvjJE;EACE;EACA;AFyjJJ;AsChrJI;EpC0HE;EACA;AFyjJN;AEpjJI;EACE;EACA;AFujJN;AEljJI;EACE;EACA;AFojJN;AE/iJI;EAWI;EAMF;AFkiJN;AK7tJE;E0CkJA;E1ChJE;EACA;AL+tJJ;AM7oJE;EAKE;EACA;AN2oJJ;AM3qJE;EACE;AN6qJJ;AM3qJE;EACE;AN6qJJ;AM3qJE;EACE;AN6qJJ;AMzqJI;EAEE;AN0qJN;AM7uJE;EACE;AN+uJJ;AM5uJE;EACE;AN8uJJ;AM3uJE;EACE;AN6uJJ;AM1uJE;EACE;AN4uJJ;AM3pJI;EACE,YAxGY;EAyGZ;AN6pJN;AMzpJE;EACE;AN2pJJ;AMtpJE;EACE;ANwpJJ;AMrpJE;EAEE;EACA;ANspJJ;AMjtJE;EACE;ANmtJJ;AMjtJE;EACE;ANmtJJ;AMjtJE;EACE;ANmtJJ;AM/sJI;EAEE;ANgtJN;AM7tJE;EACE;AN+tJJ;AM7tJE;EACE;AN+tJJ;AM7tJE;EACE;AN+tJJ;AM3tJI;EAEE;AN4tJN;AM9vJE;EAXA,0CADmB;AN6wJrB;AM7vJE;EAfA,oCADmB;ANgxJrB;AM5vJE;EAnBA,0CADmB;ANmxJrB;A+ChpJE;EAXA;A/C8pJF;A+CnpJE;EAXA;A/CiqJF;A+CtpJE;EAXA;A/CoqJF;A+CzpJE;EAXA;A/CuqJF;A+C5pJE;EAXA;A/C0qJF;A+C/pJE;EAXA;A/C6qJF;A+ClqJE;EAXA;A/CgrJF;A+CrqJE;;EAXA;A/CorJF;AOlzJI;;EACE;APqzJN;AOjzJE;EACE;APmzJJ;AOjzJI;EACE;APmzJN;AO/yJE;EACE;EACA;APizJJ;AO/yJI;EACE;APizJN;AO7yJE;EACE;AP+yJJ;AO5yJE;EACE;EACA;AP8yJJ;AO1yJI;EACE;EACA;EACA;AP4yJN;AOxyJE;EACE;EACA;AP0yJJ;AOxyJI;EACE;AP0yJN;AOtyJE;EACE;EACA;APwyJJ;AOtyJI;EACE;APwyJN;AOryJI;EACE;APuyJN;AOnyJE;;EAEE;APqyJJ;AQv3JE;EAEE;EACA;ARw3JJ;A+C/tJE;EAXA;A/C6uJF;A+CluJE;EAXA;A/CgvJF;AQt3JE;EACE;ARw3JJ;ASt3JE;EACE;ATw3JJ;ASr3JE;EACE,aAdoB;ATq4JxB;ASp3JE;EAGE;ATo3JJ;ASj3JE;EAGE;ATi3JJ;AS92JE;EACE,yBA9BoB;AT84JxB;AS52JI;EACE;AT82JN;AS32JI;EACE;AT62JN;AS12JI;EACE;AT42JN;ASr2JM;EACE,yBA5CW;ATm5JnB;ASl2JM;EACE,qBAlDW;ATs5JnB;ASh2JI;EACE;ATk2JN;AS51JE;EACE;AT81JJ;ASz1JI;;EACE;AT41JN;ASz1JI;;EACE;AT41JN;ASz1JI;;EACE;AT41JN;AU14JE;EA5CA,yBAyCwB;EAxCxB,YAyCwB;AVg5J1B;AUv7JE;EACE,YAsCsB;EArCtB;AVy7JJ;AU94JM;EqCmGJ;A/C8yJF;AU74JM;EACE;AV+4JR;AU34JI;EACE;AV64JN;AU14JI;EACE;AV44JN;AUv4JI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVs7J1B;AU38JE;EACE,YAoBsB;EAnBtB;AV68JJ;AUv7JE;EAVA,0CADmB;AVq8JrB;AU94JI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVi8J1B;AUt9JE;EACE,YAoBsB;EAnBtB;AVw9JJ;AUl8JE;EAVA,0CADmB;AVg9JrB;AUr5JI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AV48J1B;AUj+JE;EACE,0BAoBsB;EAnBtB;AVm+JJ;AU78JE;EAVA,oCADmB;AV29JrB;AW3+JE;EACE;AX6+JJ;AW1+JE;;;;EAIE;AX4+JJ;AWz+JE;;EAEE;AX2+JJ;AWx+JE;EACE;AX0+JJ;AWv+JE;EACE;AXy+JJ;AY17JE;EACE;AZ47JJ;AYv7JE;;;EAGE;AZy7JJ;AYt7JE;EACE;AZw7JJ;AYr7JE;;EAEE;AZu7JJ;AYp7JE;;EAEE;EACA;AZs7JJ;AYl+JE;EAiDI,+BA/Ba;AZm9JnB;AYh7JE;EACE,+BApCe;AZs9JnB;AY/6JE;EAOI;AZ26JN;AY3+JE;EA2EI;AZm6JN;AY9+JE;EAoFM;AZ65JR;AY30JE;EACE,mCA9MA;AZ2hKJ;AY10JE;;EAEE,kCAViB;AZs1JrB;AYz0JE;;EAEE;AZ20JJ;AYx0JE;;EAEE;AZ00JJ;AYv0JE;;EAEE,mBAxBc;AZi2JlB;AYt0JE;;EAEE,mBA5BuB;AZo2J3B;AY7iKE;EACE;EACA;AZ+iKJ;AY5iKE;EAII;AZ2iKN;AYliKE;EACE;AZoiKJ;AYlhKE;;EASI;AZ6gKN;AY/hKE;EASA;IASI;EZihKJ;AACF;AYz7JE;EmCCA;EnCCE;EACA;AZ27JJ;AY13JE;EACE,oCA9MA;AZ0kKJ;AYz3JE;;EAEE,kCAViB;AZq4JrB;AYx3JE;;EAEE;AZ03JJ;AYv3JE;;EAEE;AZy3JJ;AYt3JE;;EAEE,mBAxBc;AZg5JlB;AYr3JE;;EAEE,mBA5BuB;AZm5J3B;AY5lKE;EACE;EACA;AZ8lKJ;AY3lKE;EAII;AZ0lKN;AYjlKE;EACE;AZmlKJ;AYjkKE;;EASI;AZ4jKN;AY9kKE;EASA;IASI;EZgkKJ;AACF;AYp6JE;EACE,kCA9MA;AZonKJ;AYn6JE;;EAEE,kCAViB;AZ+6JrB;AYl6JE;;EAEE;AZo6JJ;AYj6JE;;EAEE;AZm6JJ;AYh6JE;;EAEE,mBAxBc;AZ07JlB;AY/5JE;;EAEE,mBA5BuB;AZ67J3B;AYtoKE;EACE;EACA;AZwoKJ;AYroKE;EAII;AZooKN;AY3nKE;EACE;AZ6nKJ;AY3mKE;;EASI;AZsmKN;AYxnKE;EASA;IASI;EZ0mKJ;AACF;AYpgKE;EmCbA;A/CohKF;AYngKE;EACE;AZqgKJ;AYngKI;EACE;AZqgKN;AYlgKI;EACE;AZogKN;AYhgKE;EACE;AZkgKJ;AajrKE;EkCiJA;ElC/IE;EACA;AbmrKJ;AiD3rKE;EACE;AjD6rKJ;AiD1rKE;EACE;AjD4rKJ;Ac1rKE;EAEE;EACA;Ad2rKJ;A+CpiKE;EAXA;A/CkjKF;Ac3rKE;EACE;Ad6rKJ;AkD7sKM;EpCoBF;Ad4rKJ;AcvrKE;EACE;IAEE;EdwrKJ;AACF;AcrrKE;EACE;AdurKJ;AcprKE;;EAEE;AdsrKJ;AcnrKE;EACE;AdqrKJ;AcnrKI;;EAEE;AdqrKN;AetsKE;EACE,+BAZA;AfotKJ;AersKE;EACE,+BAhBA;AfutKJ;AepsKE;EACE,cAnBoB;AfytKxB;AepsKI;EACE,cAhBqB;AfstK3B;AensKI;EACE,cAnBmB;AfwtKzB;AejsKE;EACE,cA9BqB;AfiuKzB;AehsKE;EACE,uBA9BA;AfguKJ;Ae9rKI;EACE,yBAhCsB;AfguK5B;Ae9rKM;EACE,yBArCmB;AfquK3B;Ae7rKM;EACE,yBAxCiB;AfuuKzB;AezrKI;EACE,cA9CsB;AfyuK5B;AexrKI;EACE,cApDqB;Af8uK3B;AevrKI;EACE,cAvDmB;AfgvKzB;AejrKI;EACE,cAhEmB;AfmvKzB;AejrKM;;EAEE,cApEiB;AfuvKzB;Ae/qKI;;EAEE,yBA1EmB;Af2vKzB;Ae7qKE;EACE,cA/EqB;Af8vKzB;AgBzwKI;EACE,+BANU;AhBixKhB;AgBxwKI;EACE,+BAVU;AhBoxKhB;AgBvwKI;EACE,0CAZF;AhBqxKJ;AgBtwKI;EmCzBF;EACA;EACA;AnDkyKF;AoD5xKI;EACE,0CAJF;ApDkyKJ;AoD3xKI;EDZF;EACA;EACA;AnD0yKF;AiB5xKI;EACE,0CATF;AjBuyKJ;AiB3xKI;EACE,2CAXF;AjBwyKJ;AiB1xKI;EACE,0CAbF;AjByyKJ;AiBxxKM;EACE,+BAjBiB;AjB2yKzB;AiBvxKM;EACE;AjByxKR;AkBryKI;EACE,+BAXF;AlBkzKJ;AkBpyKI;EACE,YAbF;AlBmzKJ;AkBlyKM;EACE,cAjBkB;AlBqzK1B;AkBjyKM;EACE,cApBiB;AlBuzKzB;AkBhyKM;EACE,cAvBe;AlByzKvB;AkB5xKM;EACE,cA9Be;AlB4zKvB;AkBzxKM;EACE,+BA3CiB;AlBs0KzB;AkBxxKM;EACE,gCAtCJ;AlBg0KJ;AqD90KI;EACE;ArDg1KN;AqD70KI;EACE;ArD+0KN;AqD50KI;EACE;ArD80KN;AqBl1KE;EACE;ArBo1KJ;AqBj1KE;;EAEE;ArBm1KJ;AqBh1KE;EACE;ArBk1KJ;AsDr2KE;EjCsBI;ArBk1KN;AsDx2KE;EjCsBI;ArBk1KN;AsDp2KE;EjCkBI;ArBq1KN;AsDn2KE;EjCcI;ArBw1KN;AsDh2KE;EjCQI;ArB21KN;AqBj1KQ;EACE,0BsCbU;A3Dg2KpB;AqBh1KQ;EACE,0BsCfW;A3Di2KrB;AqB50KE;EACE;ArB80KJ;AqB30KE;;EAEE;ArB60KJ;AqB10KE;EACE;ArB40KJ;AgC53KI;EACE;AhC83KN;AgC33KI;EACE;AhC63KN;AgC13KI;EACE;AhC43KN;AgCz3KI;EACE;EACA;AhC23KN;AgCp3KI;;;;;EACE;AhC03KN;AgCr3KI;EACE;AhCu3KN;AsBp5KE;EAEE;AtBq5KJ;A+C3vKE;EAXA;A/CywKF;AsBr5KE;EACE;EACA;AtBu5KJ;AsBp5KM;;;EAGE;AtBs5KR;AsBj5KE;;EAEE;AtBm5KJ;AsB54KI;;;;EACE;AtBi5KN;AuB76KE;EACE;AvB+6KJ;AuB56KE;;EAEE;AvB86KJ;AuB36KE;;EAEE;EACA;AvB66KJ;AuB16KE;;EAEE;AvB46KJ;AuBx6KI;;;;EAIE;AvB06KN;AuDx7KE;EACE;AvD07KJ;AuDv7KE;EACE;AvDy7KJ;AuDt7KE;EACE;AvDw7KJ;AuDp7KI;EACE;AvDs7KN;AuDn7KI;EACE;AvDq7KN;AuDl7KI;EACE;AvDo7KN;AuD/6KI;EACE;AvDi7KN;AuD96KI;EACE;AvDg7KN;AuD76KI;EACE;AvD+6KN;AwDh+KI;EACE;AxDk+KN;AwD/9KI;EACE;AxDi+KN;AwD99KI;EACE;AxDg+KN;AwBz9KE;EACE;AxB29KJ;AwBh/KE;EACE;AxBk/KJ;AwB/+KE;;EAIE;AxB++KJ;AwBv/KE;EACE;AxBy/KJ;AwBt/KE;;EAIE;AxBs/KJ;AwB9/KE;EACE;AxBggLJ;AwB7/KE;;EAIE;AxB6/KJ;AwB59KM;;EAEE;AxB89KR;AwB39KM;;EAEE;AxB69KR;AwB19KM;EACE;AxB49KR;AwBt9KI;EACE;AxBw9KN;AyBzgLE;EACE;AzB2gLJ;AyBxgLE;EACE;AzB0gLJ;AyBvgLE;EACE;AzBygLJ;AyBtgLE;EACE;AzBwgLJ;AyBrgLE;EACE;AzBugLJ;A+Ch4KE;EAXA;A/C84KF;AyBvgLI;EACE;AzBygLN;AyBngLM;EACE;AzBqgLR;AyBlgLM;EACE;AzBogLR;AyBjgLM;EACE;AzBmgLR;AyB//KI;EACE;AzBigLN;AyB9/KI;EACE;AzBggLN;AyD1iLE;EACE,yBALmC;EAMnC;AzD4iLJ;AyDziLE;EACE,yBAXwB;EAYxB;AzD2iLJ;AyDziLI;EACE,yBAb2B;AzDwjLjC;AyDxiLI;EV6HF;A/C86KF;AyDpiLE;EACE,iDAvBmB;AzD6jLvB;AyDpiLI;EACE,gDA1BiB;EA2BjB;AzDsiLN;AyDliLE;EACE,gDAhCmB;EAiCnB;AzDoiLJ;AyDliLI;EACE;EACA,iDArCiB;AzDykLvB;AyDhiLE;EAQI;AzD2hLN;A0BplLI;EACE;A1BslLN;A0BnlLI;EAGE;A1BmlLN;A0BhlLI;EAGE;A1BglLN;A0B7lLI;EACE;A1B+lLN;A0B5lLI;EAGE;A1B4lLN;A0BzlLI;EAGE;A1BylLN;A0BtmLI;EACE;A1BwmLN;A0BrmLI;EAGE;A1BqmLN;A0BlmLI;EAGE;A1BkmLN;A0B7jLI;EAGE,uBAhBqB;A1B6kL3B;A0BzjLE;EqB2FA;ErBzFE;A1B2jLJ;A0BxjLE;EACE,0CA3BoB;A1BqlLxB;A2BhlLE;EACE,0CAbqB;A3B+lLzB;A2B9nLE;;;EAGE;A3BgoLJ;A2B7nLE;EACE;A3B+nLJ;A2B5nLE;EAGE,yCADQ;A3B6nLZ;A2BzoLE;;;EAGE;A3B2oLJ;A2BxoLE;EACE;A3B0oLJ;A2BvoLE;EAGE,0CADQ;A3BwoLZ;A2BppLE;;;EAGE;A3BspLJ;A2BnpLE;EACE;A3BqpLJ;A2BlpLE;EAGE,wCADQ;A3BmpLZ;A2BhmLI;;EACE,0CAhC2B;A3BmoLjC;A2B9lLI;;;EAGE,0CAvCwB;A3BuoL9B;A2B5lLM;EACE,0CA5CsB;A3B0oL9B;A2BxlLI;EAGE,2CADQ;A3BylLd;A2B9kLM;;EAEE,uBA/DJ;A3B+oLJ;A2B5kLQ;;EAEE,0CAnEN;A3BipLJ;A2BxkLM;EACE,sCAhFiB;EAiFjB;A3B0kLR;A2BrkLQ;EACE,sCAtFuB;A3B6pLjC;A2BpkLQ;EACE,sCAzFoB;A3B+pL9B;A2BhkLE;EACE,sCAzFA;A3B2pLJ;A2BzjLE;EACE;EAIA;A3BwjLJ;A2B9iLE;EACE;A3BgjLJ;A4BhsLI;EAIE;A5B+rLN;A4B5rLI;EACE;A5B8rLN;A4BxrLI;EACE;IACE;E5B0rLN;AACF;A4BvrLI;;EAIE;A5BurLN;A4BprLI;EAGE;EACA;A5BorLN;A4BjrLI;;;EAGE;EACA;A5BmrLN;A4B/qLM;EACE;A5BirLR;A4B9qLM;;;EAGE;EACA;A5BgrLR;A4B3qLM;EACE;A5B6qLR;A4B1qLM;;;EAGE;EACA;A5B4qLR;A4BxqLI;EACE;EACA;A5B0qLN;A4BvqLI;EACE;A5ByqLN;A4BtqLI;EACE;A5BwqLN;A4BpqLE;EACE;A5BsqLJ;A4BnqLE;EACE;A5BqqLJ;A4BlqLE;;;EAGE;A5BoqLJ;A0DvwLE;EAYI;A1D8vLN;A6BtwLE;;EAEE,kDAJc;A7B4wLlB;A6BpwLI;;EAEE,+CAVY;EAWZ;A7BswLN;A6BlwLE;EACE;A7BowLJ;A6BlwLI;EACE;A7BowLN;A6BhwLE;EACE;A7BkwLJ;A6B/vLE;EACE;A7BiwLJ;A6B7vLE;;EAEE;EACA;A7B+vLJ;A6BjtLM;;;;;EACE;A7ButLR;A6BluLE;EACE;A7BouLJ;A6BruLE;EACE;A7BuuLJ;A6B9tLM;;;;;EACE;A7BouLR;A6B/uLE;EACE;A7BivLJ;A6BlvLE;EACE;A7BovLJ;A6B3uLM;;;;;EACE;A7BivLR;A6B5vLE;EACE;A7B8vLJ;A6B/vLE;EACE;A7BiwLJ;A6BxvLM;;;;;EACE;A7B8vLR;A6BnvLE;EACE;A7BqvLJ;A6BjvLE;EACE;A7BmvLJ;A6BjvLI;EACE;A7BmvLN;A6B9uLE;;;;;;;EAIE;A7BmvLJ;A6BhvLE;;;EAGE;EACA;A7BkvLJ;A6B7uLE;;;;;EAIE;EACA;A7BgvLJ;A6B/xLM;;;;;EACE;A7BqyLR;A6B1xLE;EACE;A7B4xLJ;A6BxxLE;EACE;A7B0xLJ;A6BxxLI;EACE;A7B0xLN;A6BrxLE;;;;;;;EAIE;A7B0xLJ;A6BvxLE;;;EAGE;EACA;A7ByxLJ;A6BpxLE;;;;;EAIE;EACA;A7BuxLJ;A6Bt0LM;;;;;EACE;A7B40LR;A6Bj0LE;EACE;A7Bm0LJ;A6B/zLE;EACE;A7Bi0LJ;A6B/zLI;EACE;A7Bi0LN;A6B5zLE;;;;;;;EAIE;A7Bi0LJ;A6B9zLE;;;EAGE;EACA;A7Bg0LJ;A6B3zLE;;;;;EAIE;EACA;A7B8zLJ;A8Bx5LE;EACE;EACA;A9B05LJ;A8Bx5LI;EApCF;EACA;A9B+7LF;A8Bx5LI;EAxCF;EACA;A9Bm8LF;A8Bx5LI;EA5CF;EACA;A9Bu8LF;A8Bn8LE;;;EAGE;A9Bq8LJ;A8Bl8LE;;;;;EAKE;A9Bo8LJ;A8Bj8LE;EACE;A9Bm8LJ;A+Bv9LE;EACE;A/By9LJ;AoCh+LE;EACE;ApCk+LJ;AoC/9LE;;EAEE;ApCi+LJ;AmCv+LE;EAGE;EACA;EY6IF;A/C21LF;AmCn+LE;EACE;AnCq+LJ;A2C15LE;EACE;A3C65LJ;A2C35LI;EACE;A3C65LN;A2C15LI;EACE;A3C45LN;AChgME;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;ADkgMJ;AChgME;EAEE;ADkgMJ;ACpgME;;EAEE;ADkgMJ;AChgME;EACE;EACA;ADkgMJ;AChgME;;;;EAIE;ADkgMJ;AChgME;;EAEE;ADkgMJ;AChgME;;;EAGE;ADkgMJ;AChgME;;;;EAIE;ADkgMJ;AChgME;;;;;;;EAOE;ADkgMJ;AChgME;EACE;ADkgMJ;AChgME;EACE;EACA;EACA;ADkgMJ;AChgME;EACE;EACA;EACA;ADkgMJ;AChgME;;EAEE;ADkgMJ;AChgME;EACE;ADkgMJ;AChgME;EACE;ADkgMJ;AChgME;EACE;ADkgMJ;A2C5jME;EAEE;EAIA;A3C0jMJ;A2C7jMI;EACE;A3C+jMN;A2CzjME;EACE;A3C2jMJ;A2CxjME;EACE;EACA;A3C0jMJ;A2CzjMI;EACE;A3C2jMN;A2CvjME;;EAEE;A3CyjMJ;A2CtjME;EACE;A3CwjMJ;A2CtjME;EACE;A3CwjMJ;A2CrjME;EACE;A3CujMJ;A2CrjME;EACE;A3CujMJ;A2CljME;EACE;EACA;A3CojMJ;A2CljMI;EACE;EACA;A3CojMN;A2C1iMM;EACE;EACA;A3C4iMR;A2C9iMM;EACE;EACA;A3CgjMR;A2CljMM;EACE;EACA;A3CojMR;A4C1nME;EAII;A5CynMN;AiC3nME;EACE;AjC6nMJ;AiC3nMI;EAEE;AjC4nMN;AiCxnMI;EACE;AjC0nMN;AiCvnMI;EACE;EACA;AjCynMN;AiCtnMI;EACE;AjCwnMN;AiCpnME;EACE;AjCsnMJ;AiCnnME;EACE;AjCqnMJ;AiClnME;EACE;AjConMJ;AkCxpME;EACE;AlC0pMJ;AkCvpME;EACE;AlCypMJ;A6CppME;EACE;A7CspMJ;A6CppMI;EACE;A7CspMN;A6ClpME;EACE,cAZe;A7CgqMnB;A6CjpME;;EAEE;A7CmpMJ;A6C3oME;;;;EAIE;A7C6oMJ;A6C1oME;;EAEE;A7C4oMJ;A6CvoMI;;EACE,mBAxCa;A7CkrMnB;A8CnrME;EAIE;EACA;A9CkrMJ;A8C3qMI;ECkIF;A/C4iMF;A8C9qMI;ECkIF;A/C+iMF;A8CjrMI;ECkIF;A/CkjMF;A8CprMI;ECkIF;A/CqjMF;A8CvrMI;ECkIF;A/CwjMF;A8C1rMI;ECkIF;A/C2jMF;A8C7rMI;ECkIF;A/C8jMF;A8ChsMI;ECkIF;A/CikMF;A8CnsMI;ECkIF;A/CokMF;A8CtsMI;ECkIF;A/CukMF;A8CzsMI;ECkIF;A/C0kMF;A8C5sMI;ECkIF;A/C6kMF;A8C/sMI;ECkIF;A/CglMF;A8CltMI;ECkIF;A/CmlMF;A8CrtMI;ECkIF;A/CslMF;A8CxtMI;ECkIF;A/CylMF;A8C3tMI;ECkIF;A/C4lMF;A8C9tMI;ECkIF;A/C+lMF;A8CjuMI;ECkIF;A/CkmMF;A8CpuMI;ECkIF;A/CqmMF;A8CvuMI;ECkIF;A/CwmMF;A8C1uMI;ECkIF;A/C2mMF;A8C7uMI;ECkIF;A/C8mMF;A8ChvMI;ECkIF;A/CinMF;A8CnvMI;ECkIF;A/ConMF;A8C/uMI;EACE;A9CivMN;AgD3wME;EAEE;EACA;AhD6wMJ;A+CjnME;EAXA;A/C+nMF;AgDzwMI;EACE;AhD2wMN;AgDzwMM;EACE;AhD2wMR;AE9rME;EACE;AFgsMJ;AE5rMI;EACE;AF8rMN;AE1rME;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF4rMJ;AEzrME;;EAEE;AF2rMJ;AEtrME;EAEE;AFurMJ;AEpyME;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AFizMb;AElyMI;EACE;AFoyMN;AE/xMI;EACE;AFiyMN;AE5xMI;EACE;AF8xMN;AEzxMI;EACE;EACA;AF2xMN;AEtxMI;EACE;AFwxMN;AEnxMI;EACE;EACA;AFqxMN;AE/wMM;EACE;AFixMR;AE5wMM;EACE;EACA;AF8wMR;AEzwMM;EACE;AF2wMR;AEtwMM;EACE;EACA;AFwwMR;AE30ME;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AFy1Mf;AEz0MI;EACE;AF20MN;AEt0MI;EACE;AFw0MN;AEn0MI;EACE;AFq0MN;AEh0MI;EACE;EACA;AFk0MN;AE7zMI;EACE;AF+zMN;AE1zMI;EACE;EACA;AF4zMN;AEtzMM;EACE;AFwzMR;AEnzMM;EACE;EACA;AFqzMR;AEhzMM;EACE;AFkzMR;AE7yMM;EACE;EACA;AF+yMR;AEl3ME;EACE,WARS;EAST,YATS;EAUT,iBAVS;AF83Mb;AEh3MI;EACE;AFk3MN;AE72MI;EACE;AF+2MN;AE12MI;EACE;AF42MN;AEv2MI;EACE;EACA;AFy2MN;AEp2MI;EACE;AFs2MN;AEj2MI;EACE;EACA;AFm2MN;AE71MM;EACE;AF+1MR;AE11MM;EACE;EACA;AF41MR;AEv1MM;EACE;AFy1MR;AEp1MM;EACE;EACA;AFs1MR;AEpxME;EACE;EACA;AFsxMJ;AsC74MI;EpC0HE;EACA;AFsxMN;AEjxMI;EACE;EACA;AFoxMN;AE/wMI;EACE;EACA;AFixMN;AE5wMI;EAWI;EAMF;AF+vMN;AK17ME;E0CkJA;E1ChJE;EACA;AL47MJ;AM12ME;EAKE;EACA;ANw2MJ;AMx4ME;EACE;AN04MJ;AMx4ME;EACE;AN04MJ;AMx4ME;EACE;AN04MJ;AMt4MI;EAEE;ANu4MN;AM18ME;EACE;AN48MJ;AMz8ME;EACE;AN28MJ;AMx8ME;EACE;AN08MJ;AMv8ME;EACE;ANy8MJ;AMx3MI;EACE,YAxGY;EAyGZ;AN03MN;AMt3ME;EACE;ANw3MJ;AMn3ME;EACE;ANq3MJ;AMl3ME;EAEE;EACA;ANm3MJ;AM96ME;EACE;ANg7MJ;AM96ME;EACE;ANg7MJ;AM96ME;EACE;ANg7MJ;AM56MI;EAEE;AN66MN;AM17ME;EACE;AN47MJ;AM17ME;EACE;AN47MJ;AM17ME;EACE;AN47MJ;AMx7MI;EAEE;ANy7MN;AM39ME;EAXA,0CADmB;AN0+MrB;AM19ME;EAfA,0CADmB;AN6+MrB;AMz9ME;EAnBA,0CADmB;ANg/MrB;A+C72ME;EAXA;A/C23MF;A+Ch3ME;EAXA;A/C83MF;A+Cn3ME;EAXA;A/Ci4MF;A+Ct3ME;EAXA;A/Co4MF;A+Cz3ME;EAXA;A/Cu4MF;A+C53ME;EAXA;A/C04MF;A+C/3ME;EAXA;A/C64MF;A+Cl4ME;;EAXA;A/Ci5MF;AO/gNI;;EACE;APkhNN;AO9gNE;EACE;APghNJ;AO9gNI;EACE;APghNN;AO5gNE;EACE;EACA;AP8gNJ;AO5gNI;EACE;AP8gNN;AO1gNE;EACE;AP4gNJ;AOzgNE;EACE;EACA;AP2gNJ;AOvgNI;EACE;EACA;EACA;APygNN;AOrgNE;EACE;EACA;APugNJ;AOrgNI;EACE;APugNN;AOngNE;EACE;EACA;APqgNJ;AOngNI;EACE;APqgNN;AOlgNI;EACE;APogNN;AOhgNE;;EAEE;APkgNJ;AQplNE;EAEE;EACA;ARqlNJ;A+C57ME;EAXA;A/C08MF;A+C/7ME;EAXA;A/C68MF;AQnlNE;EACE;ARqlNJ;ASnlNE;EACE;ATqlNJ;ASllNE;EACE,aAdoB;ATkmNxB;ASjlNE;EAGE;ATilNJ;AS9kNE;EAGE;AT8kNJ;AS3kNE;EACE,yBA9BoB;AT2mNxB;ASzkNI;EACE;AT2kNN;ASxkNI;EACE;AT0kNN;ASvkNI;EACE;ATykNN;ASlkNM;EACE,yBA5CW;ATgnNnB;AS/jNM;EACE,qBAlDW;ATmnNnB;AS7jNI;EACE;AT+jNN;ASzjNE;EACE;AT2jNJ;AStjNI;;EACE;ATyjNN;AStjNI;;EACE;ATyjNN;AStjNI;;EACE;ATyjNN;AUvmNE;EA5CA,yBAyCwB;EAxCxB,0BAyCwB;AV6mN1B;AUppNE;EACE,0BAsCsB;EArCtB;AVspNJ;AU3mNM;EqCmGJ;A/C2gNF;AU1mNM;EACE;AV4mNR;AUxmNI;EACE;AV0mNN;AUvmNI;EACE;AVymNN;AUpmNI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVmpN1B;AUxqNE;EACE,YAoBsB;EAnBtB;AV0qNJ;AUppNE;EAVA,0CADmB;AVkqNrB;AU3mNI;EAvEF,yBAyBE;EAxBF,YAuBwB;AV8pN1B;AUnrNE;EACE,YAoBsB;EAnBtB;AVqrNJ;AU/pNE;EAVA,0CADmB;AV6qNrB;AUlnNI;EA3EF,yBAyBE;EAxBF,YAuBwB;AVyqN1B;AU9rNE;EACE,YAoBsB;EAnBtB;AVgsNJ;AU1qNE;EAVA,0CADmB;AVwrNrB;AWxsNE;EACE;AX0sNJ;AWvsNE;;;;EAIE;AXysNJ;AWtsNE;;EAEE;AXwsNJ;AWrsNE;EACE;AXusNJ;AWpsNE;EACE;AXssNJ;AYvpNE;EACE;AZypNJ;AYppNE;;;EAGE;AZspNJ;AYnpNE;EACE;AZqpNJ;AYlpNE;;EAEE;AZopNJ;AYjpNE;;EAEE;EACA;AZmpNJ;AY/rNE;EAiDI,0BA/Ba;AZgrNnB;AY7oNE;EACE,0BApCe;AZmrNnB;AY5oNE;EAOI;AZwoNN;AYxsNE;EA2EI;AZgoNN;AY3sNE;EAoFM;AZ0nNR;AYxiNE;EACE,kCA9MA;AZwvNJ;AYviNE;;EAEE,kCAViB;AZmjNrB;AYtiNE;;EAEE;AZwiNJ;AYriNE;;EAEE;AZuiNJ;AYpiNE;;EAEE,mBAxBc;AZ8jNlB;AYniNE;;EAEE,mBA5BuB;AZikN3B;AY1wNE;EACE;EACA;AZ4wNJ;AYzwNE;EAII;AZwwNN;AY/vNE;EACE;AZiwNJ;AY/uNE;;EASI;AZ0uNN;AY5vNE;EASA;IASI;EZ8uNJ;AACF;AYtpNE;EmCCA;EnCCE;EACA;AZwpNJ;AYvlNE;EACE,mCA9MA;AZuyNJ;AYtlNE;;EAEE,kCAViB;AZkmNrB;AYrlNE;;EAEE;AZulNJ;AYplNE;;EAEE;AZslNJ;AYnlNE;;EAEE,mBAxBc;AZ6mNlB;AYllNE;;EAEE,mBA5BuB;AZgnN3B;AYzzNE;EACE;EACA;AZ2zNJ;AYxzNE;EAII;AZuzNN;AY9yNE;EACE;AZgzNJ;AY9xNE;;EASI;AZyxNN;AY3yNE;EASA;IASI;EZ6xNJ;AACF;AYjoNE;EACE,kCA9MA;AZi1NJ;AYhoNE;;EAEE,kCAViB;AZ4oNrB;AY/nNE;;EAEE;AZioNJ;AY9nNE;;EAEE;AZgoNJ;AY7nNE;;EAEE,mBAxBc;AZupNlB;AY5nNE;;EAEE,mBA5BuB;AZ0pN3B;AYn2NE;EACE;EACA;AZq2NJ;AYl2NE;EAII;AZi2NN;AYx1NE;EACE;AZ01NJ;AYx0NE;;EASI;AZm0NN;AYr1NE;EASA;IASI;EZu0NJ;AACF;AYjuNE;EmCbA;A/CivNF;AYhuNE;EACE;AZkuNJ;AYhuNI;EACE;AZkuNN;AY/tNI;EACE;AZiuNN;AY7tNE;EACE;AZ+tNJ;Aa94NE;EkCiJA;ElC/IE;EACA;Abg5NJ;AiDx5NE;EACE;AjD05NJ;AiDv5NE;EACE;AjDy5NJ;Acv5NE;EAEE;EACA;Adw5NJ;A+CjwNE;EAXA;A/C+wNF;Acx5NE;EACE;Ad05NJ;AkD16NM;EpCoBF;Ady5NJ;Acp5NE;EACE;IAEE;Edq5NJ;AACF;Acl5NE;EACE;Ado5NJ;Acj5NE;;EAEE;Adm5NJ;Ach5NE;EACE;Adk5NJ;Ach5NI;;EAEE;Adk5NN;Aen6NE;EACE,yBAZA;Afi7NJ;Ael6NE;EACE,yBAhBA;Afo7NJ;Aej6NE;EACE,cAnBoB;Afs7NxB;Aej6NI;EACE,cAhBqB;Afm7N3B;Aeh6NI;EACE,cAnBmB;Afq7NzB;Ae95NE;EACE,cA9BqB;Af87NzB;Ae75NE;EACE,qCA9BA;Af67NJ;Ae35NI;EACE,yBAhCsB;Af67N5B;Ae35NM;EACE,yBArCmB;Afk8N3B;Ae15NM;EACE,yBAxCiB;Afo8NzB;Aet5NI;EACE,cA9CsB;Afs8N5B;Aer5NI;EACE,cApDqB;Af28N3B;Aep5NI;EACE,cAvDmB;Af68NzB;Ae94NI;EACE,cAhEmB;Afg9NzB;Ae94NM;;EAEE,cApEiB;Afo9NzB;Ae54NI;;EAEE,yBA1EmB;Afw9NzB;Ae14NE;EACE,cA/EqB;Af29NzB;AgBt+NI;EACE,0BANU;AhB8+NhB;AgBr+NI;EACE,0BAVU;AhBi/NhB;AgBp+NI;EACE,qCAZF;AhBk/NJ;AgBn+NI;EmCzBF;EACA;EACA;AnD+/NF;AoDz/NI;EACE,qCAJF;ApD+/NJ;AoDx/NI;EDZF;EACA;EACA;AnDugOF;AiBz/NI;EACE,qCATF;AjBogOJ;AiBx/NI;EACE,qCAXF;AjBqgOJ;AiBv/NI;EACE,qCAbF;AjBsgOJ;AiBr/NM;EACE,0BAjBiB;AjBwgOzB;AiBp/NM;EACE;AjBs/NR;AkBlgOI;EACE,0BAXF;AlB+gOJ;AkBjgOI;EACE,0BAbF;AlBghOJ;AkB//NM;EACE,cAjBkB;AlBkhO1B;AkB9/NM;EACE,cApBiB;AlBohOzB;AkB7/NM;EACE,cAvBe;AlBshOvB;AkBz/NM;EACE,cA9Be;AlByhOvB;AkBt/NM;EACE,0BA3CiB;AlBmiOzB;AkBr/NM;EACE,0BAtCJ;AlB6hOJ;AqD3iOI;EACE;ArD6iON;AqD1iOI;EACE;ArD4iON;AqDziOI;EACE;ArD2iON;AqB/iOE;EACE;ArBijOJ;AqB9iOE;;EAEE;ArBgjOJ;AqB7iOE;EACE;ArB+iOJ;AsDlkOE;EjCsBI;ArB+iON;AsDrkOE;EjCsBI;ArB+iON;AsDjkOE;EjCkBI;ArBkjON;AsDhkOE;EjCcI;ArBqjON;AsD7jOE;EjCQI;ArBwjON;AqBniOE;EACE;ArBqiOJ;AqBliOE;;EAEE;ArBoiOJ;AqBjiOE;EACE;ArBmiOJ;AgCnlOI;EACE;AhCqlON;AgCllOI;EACE;AhColON;AgCjlOI;EACE;AhCmlON;AgChlOI;EACE;EACA;AhCklON;AgC3kOI;;;;;EACE;AhCilON;AgC5kOI;EACE;AhC8kON;AsB3mOE;EAEE;AtB4mOJ;A+Cl9NE;EAXA;A/Cg+NF;AsB5mOE;EACE;EACA;AtB8mOJ;AsB3mOM;;;EAGE;AtB6mOR;AsBxmOE;;EAEE;AtB0mOJ;AsBnmOI;;;;EACE;AtBwmON;AuBpoOE;EACE;AvBsoOJ;AuBnoOE;;EAEE;AvBqoOJ;AuBloOE;;EAEE;EACA;AvBooOJ;AuBjoOE;;EAEE;AvBmoOJ;AuB/nOI;;;;EAIE;AvBioON;AuD/oOE;EACE;AvDipOJ;AuD9oOE;EACE;AvDgpOJ;AuD7oOE;EACE;AvD+oOJ;AuD3oOI;EACE;AvD6oON;AuD1oOI;EACE;AvD4oON;AuDzoOI;EACE;AvD2oON;AuDtoOI;EACE;AvDwoON;AuDroOI;EACE;AvDuoON;AuDpoOI;EACE;AvDsoON;AwDvrOI;EACE;AxDyrON;AwDtrOI;EACE;AxDwrON;AwDrrOI;EACE;AxDurON;AwBhrOE;EACE;AxBkrOJ;AwBvsOE;EACE;AxBysOJ;AwBtsOE;;EAIE;AxBssOJ;AwB9sOE;EACE;AxBgtOJ;AwB7sOE;;EAIE;AxB6sOJ;AwBrtOE;EACE;AxButOJ;AwBptOE;;EAIE;AxBotOJ;AwBnrOM;;EAEE;AxBqrOR;AwBlrOM;;EAEE;AxBorOR;AwBjrOM;EACE;AxBmrOR;AwB7qOI;EACE;AxB+qON;AyBhuOE;EACE;AzBkuOJ;AyB/tOE;EACE;AzBiuOJ;AyB9tOE;EACE;AzBguOJ;AyB7tOE;EACE;AzB+tOJ;AyB5tOE;EACE;AzB8tOJ;A+CvlOE;EAXA;A/CqmOF;AyB9tOI;EACE;AzBguON;AyB1tOM;EACE;AzB4tOR;AyBztOM;EACE;AzB2tOR;AyBxtOM;EACE;AzB0tOR;AyBttOI;EACE;AzBwtON;AyBrtOI;EACE;AzButON;AyDjwOE;EACE,yBALmC;EAMnC;AzDmwOJ;AyDhwOE;EACE,uBAXwB;EAYxB;AzDkwOJ;AyDhwOI;EACE,uBAb2B;AzD+wOjC;AyD/vOI;EV6HF;A/CqoOF;AyD3vOE;EACE,2CAvBmB;AzDoxOvB;AyD3vOI;EACE,0CA1BiB;EA2BjB;AzD6vON;AyDzvOE;EACE,0CAhCmB;EAiCnB;AzD2vOJ;AyDzvOI;EACE;EACA,2CArCiB;AzDgyOvB;AyDvvOE;EAQI;AzDkvON;A0B3yOI;EACE;A1B6yON;A0B1yOI;EAGE;A1B0yON;A0BvyOI;EAGE;A1BuyON;A0BpzOI;EACE;A1BszON;A0BnzOI;EAGE;A1BmzON;A0BhzOI;EAGE;A1BgzON;A0B7zOI;EACE;A1B+zON;A0B5zOI;EAGE;A1B4zON;A0BzzOI;EAGE;A1ByzON;A0BpxOI;EAGE,uBAhBqB;A1BoyO3B;A0BhxOE;EqB2FA;ErBzFE;A1BkxOJ;A0B/wOE;EACE,qCA3BoB;A1B4yOxB;A2BvyOE;EACE,qCAbqB;A3BszOzB;A2Br1OE;;;EAGE;A3Bu1OJ;A2Bp1OE;EACE;A3Bs1OJ;A2Bn1OE;EAGE,wCADQ;A3Bo1OZ;A2Bh2OE;;;EAGE;A3Bk2OJ;A2B/1OE;EACE;A3Bi2OJ;A2B91OE;EAGE,yCADQ;A3B+1OZ;A2B32OE;;;EAGE;A3B62OJ;A2B12OE;EACE;A3B42OJ;A2Bz2OE;EAGE,wCADQ;A3B02OZ;A2BvzOI;;EACE,qCAhC2B;A3B01OjC;A2BrzOI;;;EAGE,qCAvCwB;A3B81O9B;A2BnzOM;EACE,qCA5CsB;A3Bi2O9B;A2B/yOI;EAGE,qCADQ;A3BgzOd;A2BryOM;;EAEE,qCA/DJ;A3Bs2OJ;A2BnyOQ;;EAEE,qCAnEN;A3Bw2OJ;A2B/xOM;EACE,iCAhFiB;EAiFjB;A3BiyOR;A2B5xOQ;EACE,iCAtFuB;A3Bo3OjC;A2B3xOQ;EACE,iCAzFoB;A3Bs3O9B;A2BvxOE;EACE,gCAzFA;A3Bk3OJ;A2BhxOE;EACE;EAIA;A3B+wOJ;A2BrwOE;EACE;A3BuwOJ;A4Bv5OI;EAIE;A5Bs5ON;A4Bn5OI;EACE;A5Bq5ON;A4B/4OI;EACE;IACE;E5Bi5ON;AACF;A4B94OI;;EAIE;A5B84ON;A4B34OI;EAGE;EACA;A5B24ON;A4Bx4OI;;;EAGE;EACA;A5B04ON;A4Bt4OM;EACE;A5Bw4OR;A4Br4OM;;;EAGE;EACA;A5Bu4OR;A4Bl4OM;EACE;A5Bo4OR;A4Bj4OM;;;EAGE;EACA;A5Bm4OR;A4B/3OI;EACE;EACA;A5Bi4ON;A4B93OI;EACE;A5Bg4ON;A4B73OI;EACE;A5B+3ON;A4B33OE;EACE;A5B63OJ;A4B13OE;EACE;A5B43OJ;A4Bz3OE;;;EAGE;A5B23OJ;A0D99OE;EAYI;A1Dq9ON;A6B79OE;;EAEE,4CAJc;A7Bm+OlB;A6B39OI;;EAEE,yCAVY;EAWZ;A7B69ON;A6Bz9OE;EACE;A7B29OJ;A6Bz9OI;EACE;A7B29ON;A6Bv9OE;EACE;A7By9OJ;A6Bt9OE;EACE;A7Bw9OJ;A6Bp9OE;;EAEE;EACA;A7Bs9OJ;A6Bx6OM;;;;;EACE;A7B86OR;A6Bz7OE;EACE;A7B27OJ;A6B57OE;EACE;A7B87OJ;A6Br7OM;;;;;EACE;A7B27OR;A6Bt8OE;EACE;A7Bw8OJ;A6Bz8OE;EACE;A7B28OJ;A6Bl8OM;;;;;EACE;A7Bw8OR;A6Bn9OE;EACE;A7Bq9OJ;A6Bt9OE;EACE;A7Bw9OJ;A6B/8OM;;;;;EACE;A7Bq9OR;A6B18OE;EACE;A7B48OJ;A6Bx8OE;EACE;A7B08OJ;A6Bx8OI;EACE;A7B08ON;A6Br8OE;;;;;;;EAIE;A7B08OJ;A6Bv8OE;;;EAGE;EACA;A7By8OJ;A6Bp8OE;;;;;EAIE;EACA;A7Bu8OJ;A6Bt/OM;;;;;EACE;A7B4/OR;A6Bj/OE;EACE;A7Bm/OJ;A6B/+OE;EACE;A7Bi/OJ;A6B/+OI;EACE;A7Bi/ON;A6B5+OE;;;;;;;EAIE;A7Bi/OJ;A6B9+OE;;;EAGE;EACA;A7Bg/OJ;A6B3+OE;;;;;EAIE;EACA;A7B8+OJ;A6B7hPM;;;;;EACE;A7BmiPR;A6BxhPE;EACE;A7B0hPJ;A6BthPE;EACE;A7BwhPJ;A6BthPI;EACE;A7BwhPN;A6BnhPE;;;;;;;EAIE;A7BwhPJ;A6BrhPE;;;EAGE;EACA;A7BuhPJ;A6BlhPE;;;;;EAIE;EACA;A7BqhPJ;A8B/mPE;EACE;EACA;A9BinPJ;A8B/mPI;EApCF;EACA;A9BspPF;A8B/mPI;EAxCF;EACA;A9B0pPF;A8B/mPI;EA5CF;EACA;A9B8pPF;A8B1pPE;;;EAGE;A9B4pPJ;A8BzpPE;;;;;EAKE;A9B2pPJ;A8BxpPE;EACE;A9B0pPJ;A+B9qPE;EACE;A/BgrPJ;AoCvrPE;EACE;ApCyrPJ;AoCtrPE;;EAEE;ApCwrPJ;AmC9rPE;EAGE;EACA;EY6IF;A/CkjPF;AmC1rPE;EACE;AnC4rPJ;AAvlPA;EACE;EACA;EACA;AA0lPF;AAjlPA;EACE;EACA;EACA;AAolPF;AAjlPA;EACE;AAolPF;AAjlPA;EACE;EACA;EACA;AAolPF;AAjlPA;;;EAGE;AAolPF;AAjlPA;;;EAGE;AAolPF;AAjlPA;EACE;EACA;AAolPF;AAjlPA;;EAEE;AAolPF;AAjlPA;EACE;EACA;EACA;EAEA;EACA;AAolPF;AAjlPA;AAEA;;EAEE;EACA;AAmlPF;AAhlPA;;EAEE;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EAEA;EACA;AAmlPF;AAhlPA;EACE;AAmlPF;AAhlPA;EACE;EACA;EACA;AAmlPF;AAhlPA;EACE;EACA;AAmlPF;AAhlPA;EACE;AAmlPF;AAhlPA;EACE;AAmlPF;AAhlPA;EACE;AAmlPF;AAhlPA;;EAEE;EACA;EACA;AAmlPF;AAhlPA;EACE;AAmlPF;AAhlPA;EACE;AAmlPF;AA/kPA;EACE;UAAA;AAklPF;AA/kPA;EACE;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;AACF;AAnnPA;EACE;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;EAhlPA;IACE;EAklPF;AACF;AA/kPA;EACE;AAilPF;AA7kPA;EACE;EACA;EACA;EACA;EACA;EACA;AAglPF;AA7kPA;EACE;EACA;EACA;EACA;AAglPF;AA7kPA;EACE;EACA;AAglPF;AA7kPA;EACE;EACA;EACA;EACA;AAglPF;AA7kPA;EACE;AAglPF;AA7kPA;EACE;EACA;AAglPF;AA/kPE;EACE;EACA;AAilPJ;AA7kPA;EACE;EACA;EACA;AAglPF;AA7kPA;EACE;AAglPF;AA7kPA;;EAEE;EACA;AAglPF;AA5kPA;EACE;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;AA6kPF;AAxkPA;EACE;EACA;EACA;EACA;EACA;AA2kPF;AAxkPA,gB","sources":["./projects/rss-reader/src/styles.scss","./projects/rss-reader/src/_hljs.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/core/typography/_typography.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/bottom-sheet/_bottom-sheet-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button-toggle/_button-toggle-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/expansion/_expansion-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-legacy-theme.scss","./node_modules/@angular/material/form-field/_form-field-fill-theme.scss","./node_modules/@angular/material/form-field/_form-field-outline-theme.scss","./node_modules/@angular/material/grid-list/_grid-list-theme.scss","./node_modules/@angular/material/core/style/_list-common.scss","./node_modules/@angular/material/input/_input-theme.scss","./node_modules/@angular/material/menu/_menu-theme.scss","./node_modules/@angular/material/paginator/_paginator-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/option/_optgroup-theme.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/focus-indicators/_focus-indicators.scss","./node_modules/@angular/material/core/_core.scss","./projects/rss-reader/src/_theming.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/core/style/_elevation.scss","./node_modules/@angular/material/autocomplete/_autocomplete-theme.scss","./node_modules/@angular/material/divider/_divider-theme.scss","./node_modules/@angular/material/expansion/_expansion-mixins.scss","./node_modules/@angular/material/core/style/_form-common.scss","./node_modules/@angular/material/form-field/_form-field-standard-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/core/style/_vendor-prefixes.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/sidenav/_sidenav-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/@angular/material/core/theming/_palette.scss"],"sourcesContent":["/* You can add global styles to this file, and also import other style files */\n@use '@angular/material' as mat;\n\n@import 'theming';\n/* Select Angular Material theming. */\n\n$rss-reader-typography: mat.define-typography-config(\n  $font-family: 'Merriweather, sans-serif',\n  $title: mat.define-typography-level(20px, 32px, 700),\n  $body-2: mat.define-typography-level(14px, 24px, 700),\n  $button: mat.define-typography-level(14px, 14px, 700)\n);\n@include mat.core($rss-reader-typography);\n// TODO: Remove the following lines\n$deeppurple-amber-primary: mat.define-palette(mat.$deep-purple-palette);\n$deeppurple-amber-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);\n$deeppurple-amber-theme: mat.define-light-theme($deeppurple-amber-primary, $deeppurple-amber-accent);\n$pink-bluegrey-primary: mat.define-palette(mat.$pink-palette);\n$pink-bluegrey-accent: mat.define-palette(mat.$blue-grey-palette, A200, A100, A400);\n$pink-bluegrey-theme: mat.define-dark-theme($pink-bluegrey-primary, $pink-bluegrey-accent);\n$purple-green-primary: mat.define-palette(mat.$purple-palette);\n$purple-green-accent: mat.define-palette(mat.$green-palette, A200, A100, A400);\n$purple-green-theme: mat.define-dark-theme($purple-green-primary, $purple-green-accent);\n$indigo-pink-primary: mat.define-palette(mat.$indigo-palette);\n$indigo-pink-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);\n$indigo-pink-theme: mat.define-light-theme($indigo-pink-primary, $indigo-pink-accent);\n.deeppurple-amber {\n  @include rss-reader-theme($deeppurple-amber-theme);\n  @include mat.all-component-themes($deeppurple-amber-theme);\n  /** Adapted from https://github.com/atom-material/atom-material-syntax-light */\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #FAFAFA;\n    color: #37474f;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs>*::selection,\n  .hljs-section {\n    background-color: #D6EDEA;\n  }\n  .hljs-comment {\n    color: #B0BEC5;\n    font-style: italic;\n  }\n  .hljs-tag,\n  .hljs-selector-tag,\n  .hljs-regexp,\n  .hljs-meta {\n    color: #9c27b0;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #0d904f;\n  }\n  .hljs-number,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #80CBC4;\n  }\n  .hljs-name,\n  .hljs-keyword,\n  .hljs-type,\n  .hljs-attribute {\n    color: #3b78e7;\n  }\n  .hljs-title,\n  .hljs-function>.hljs-title,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #6182B8;\n  }\n  .hljs-params {\n    color: #d81b60;\n  }\n  .hljs-addition {\n    color: #3b78e7;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    color: #E53935;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #8796B0;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n\n.pink-bluegrey {\n  @include rss-reader-theme($pink-bluegrey-theme);\n  @include mat.all-component-themes($pink-bluegrey-theme);\n}\n\n.purple-green {\n  @include rss-reader-theme($purple-green-theme);\n  @include mat.all-component-themes($purple-green-theme);\n}\n\n// Default theme for the app\nbody {\n  @include rss-reader-theme($indigo-pink-theme);\n  @include mat.all-component-themes($indigo-pink-theme);\n}\n\n.rss-reader-card {\n  width: 350px;\n  box-sizing: border-box;\n  margin: 16px;\n  // .feed-card {\n  //   @include mat-elevation-transition;\n  //   &:hover, &:active {\n  //     @include mat-elevation(8);\n  //   }\n  // }\n}\n\n.rss-reader-cards-container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n}\n\n.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.dark-backdrop {\n  background: #000;\n}\n\n.open-in-new-icon {\n  width: 20px;\n  height: 20px;\n  font-size: 20px;\n}\n\n.mat-button:not([no-caps]),\n.mat-raised-button:not([no-caps]),\n.mat-simple-snackbar-action:not([no-caps]) {\n  text-transform: uppercase;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  height: 100%;\n}\n\npre.hljs,\ncode.hljs {\n  white-space: pre-wrap;\n}\n\n.refreshing>div {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  justify-content: center;\n}\n\n/* Extracted from market2 */\n\nmat-spinner.start-indicator svg,\nmat-spinner.start-indicator {\n  width: 22px !important;\n  height: 22px !important;\n}\n\n.start,\n.center {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-direction: column;\n  flex-direction: column;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  text-align: center;\n}\n\n.checkbox {\n  margin: 6px;\n}\n\n.custom-snackbar {\n  display: flex;\n  justify-content: space-between;\n  line-height: 20px;\n}\n\n.custom-snackbar-action {\n  flex-shrink: 0;\n  margin-left: 48px;\n}\n\n.app-sidenav {\n  width: 240px; // @include mat-elevation(3);\n}\n\n.selection-dialog>mat-dialog-container>selection-dialog>mat-dialog-content {\n  padding: 0;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.warning-icon,\n.build-icon {\n  font-size: 72px;\n  width: 72px !important;\n  height: 72px !important;\n}\n\n.page-not-found-container {\n  padding: 4px;\n}\n\n.app-content {\n  margin: 2.5%;\n}\n\n// Excerpt from snackbar demo on material2's demoapp\n.party {\n  animation: party 5000ms infinite;\n}\n\n@keyframes party {\n  0% {\n    background-color: #00f;\n  }\n  10% {\n    background-color: #8e44ad;\n  }\n  20% {\n    background-color: #1abc9c;\n  }\n  30% {\n    background-color: #d35400;\n  }\n  40% {\n    background-color: #00f;\n  }\n  50% {\n    background-color: #34495e;\n  }\n  60% {\n    background-color: #00f;\n  }\n  70% {\n    background-color: #2980b9;\n  }\n  80% {\n    background-color: #f1c40f;\n  }\n  90% {\n    background-color: #2980b9;\n  }\n  100% {\n    background-color: #0ff;\n  }\n}\n\n.red {\n  background-color: red !important;\n}\n\n// Styles for table\ntable {\n  border-collapse: collapse;\n  border-radius: 2px;\n  border-spacing: 0;\n  margin: 0 0 32px 0;\n  width: 100%;\n  box-shadow: 0 2px 2px rgba(0, 0, 0, .24), 0 0 2px rgba(0, 0, 0, .12);\n}\n\nth {\n  font-weight: 400;\n  max-width: 100px;\n  padding: 13px 32px;\n  text-align: left\n}\n\ntd {\n  font-weight: 400;\n  padding: 8px 16px\n}\n\n.post-dialog .mat-dialog-container {\n  position: absolute;\n  top: 18px;\n  bottom: 0px;\n  width: 100%;\n}\n\n.post-dialog {\n  position: relative;\n}\n\n.autocomplete-option .autocomplete-option-img {\n  vertical-align: middle;\n  margin-right: 8px;\n  &[dir=rtl] {\n    margin-right: 0;\n    margin-left: 8px;\n  }\n}\n\n.form-group {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.form-full-width {\n  width: 100%;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n// Style based from StackOverflow's CSS.\nkbd {\n  display: inline-block;\n  margin: 0 .1em;\n  padding: .1em .6em;\n  font-size: 11px;\n  line-height: 1.4;\n  // color: #242729;\n  border: 1px solid #adb3b9;\n  border-radius: 3px;\n  // box-shadow: 0 1px 0 rgba(12,13,14,.2), 0 0 0 2px #fff inset;\n  white-space: nowrap;\n}\n\n// Adapted from\n// https://github.com/EdricChan03/StudyBuddy-web/blob/3b1e7709c8954fc73fc934cbf6f882de3ed25e2e/src/styles.scss#L244-L250\n.badge {\n  letter-spacing: 0.04em;\n  font-weight: 500;\n  font-size: 0.8em;\n  padding: 2px 8px;\n  border-radius: 16px;\n}\n\n/* End styles */\n","// Highlight.js styles\n// NOTE: If the theming file is imported, you do not have to reimport the theming file in your main styles file\n\n/** Adapted from https://github.com/atom-material/atom-material-syntax-light */\n@mixin hljs-light() {\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #fafafa;\n    color: #37474f;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs > *::selection,\n  .hljs-section {\n    background-color: #d6edea;\n  }\n  .hljs-comment {\n    color: #b0bec5;\n    font-style: italic;\n  }\n  .hljs-tag,\n  .hljs-selector-tag,\n  .hljs-regexp,\n  .hljs-meta {\n    color: #9c27b0;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #0d904f;\n  }\n  .hljs-number,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #80cbc4;\n  }\n  .hljs-name,\n  .hljs-keyword,\n  .hljs-type,\n  .hljs-attribute {\n    color: #3b78e7;\n  }\n  .hljs-title,\n  .hljs-function > .hljs-title,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #6182b8;\n  }\n  .hljs-params {\n    color: #d81b60;\n  }\n  .hljs-addition {\n    color: #3b78e7;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    color: #e53935;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #8796b0;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n\n/*\nOrginal Style from https://github.com/Kelbster/highlightjs-material-dark-theme  (c) Kelby Gassmanl <kelby.gassman@gmail.com>\n*/\n\n@mixin hljs-dark() {\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #2b2b2d;\n    color: #cdd3d8;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs > *::selection {\n    background-color: #3e4451;\n  }\n  .hljs-comment {\n    color: #656565;\n    font-style: italic;\n  }\n  .hljs-selector-tag {\n    color: #c792ea;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #9ccc65;\n  }\n  .hljs-number,\n  .hljs-regexp,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #f77669;\n  }\n  .hljs-keyword {\n    color: #c792ea;\n  }\n  .hljs-function > .hljs-title {\n    color: #75a5ff;\n  }\n  .hljs-tag {\n    color: #ce93d8;\n  }\n  .hljs-name {\n    color: #4dd0e1;\n  }\n  .hljs-type {\n    color: #da4939;\n  }\n  .hljs-attribute {\n    color: #80cbbf;\n  }\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #c792ea;\n  }\n  .hljs-params {\n    color: #eefff7;\n  }\n  .hljs-meta {\n    color: #75a5ff;\n  }\n  .hljs-title {\n    color: #75a5ff;\n  }\n  .hljs-section {\n    color: #ffc66d;\n  }\n  .hljs-addition {\n    background-color: #144212;\n    color: #e6e1dc;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    background-color: #600;\n    color: #e6e1dc;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-class {\n    color: #ffcb68;\n  }\n  .hljs-selector-id {\n    color: #f77669;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n","// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../../cdk/a11y';\n\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n$_badge-structure-emitted: false !default;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: math.div(-$size, 2);\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: math.div(-$size, 2);\n      }\n    }\n  }\n  // stylelint-enable\n}\n\n// Structural styles for the badge. They have to be included as a part of the theme,\n// because the badge is a directive and we have no other way of attaching styles to it.\n@mixin _badge-structure {\n  .mat-badge {\n    position: relative;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size);\n  }\n\n  .mat-badge-medium {\n    @include _badge-size($default-size);\n  }\n\n  .mat-badge-large {\n    @include _badge-size($large-size);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $primary: map.get($config, primary);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-badge-content {\n    color: theming.get-color-from-palette($primary, default-contrast);\n    background: theming.get-color-from-palette($primary);\n\n    @include a11y.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: theming.get-color-from-palette($accent);\n      color: theming.get-color-from-palette($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: theming.get-color-from-palette($warn, default-contrast);\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: theming.get-color-from-palette($background, 'background');\n      $badge-color: theming.get-color-from-palette($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (meta.type-of($badge-color) == color and meta.type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: color.mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-badge-content {\n    font-weight: $font-weight;\n    font-size: $font-size;\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $font-size * 2;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    // Try to reduce the number of times that the structural styles are emitted.\n    @if not $_badge-structure-emitted {\n      @include _badge-structure;\n\n      // Only flip the flag if the mixin is included at the top level. Otherwise the first\n      // inclusion might be inside of a theme class which will exclude the structural styles\n      // from all other themes.\n      @if not & {\n        $_badge-structure-emitted: true !global;\n      }\n    }\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'typography-utils';\n@use '../theming/theming';\n\n/// Defines a typography level from the Material Design spec.\n/// @param {String} $font-size The font-size for this level.\n/// @param {String | Number} $line-height The line-height for this level.\n/// @param {String | Number} $font-weight The font-weight for this level.\n/// @param {String} $font-family The font-family for this level.\n/// @param {String} $letter-spacing The letter-spacing for this level.\n/// @returns {Map} A map representing the definition of this typpographic level.\n@function define-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n/// Defines a collection of typography levels to configure typography for an application.\n/// Any level not specified defaults to the values defined in the Material Design specification:\n/// https://material.io/guidelines/style/typography.html.\n///\n/// Note that the Material Design specification does not describe explicit letter-spacing values.\n/// The values here come from reverse engineering the Material Design examples.\n/// @param {String} $font-family Default font-family for levels that don't specify font-family.\n/// @param {Map} $display-4 Configuration for the \"display-4\" typographic level.\n/// @param {Map} $display-3 Configuration for the \"display-3\" typographic level.\n/// @param {Map} $display-2 Configuration for the \"display-2\" typographic level.\n/// @param {Map} $display-1 Configuration for the \"display-1\" typographic level.\n/// @param {Map} $headline Configuration for the \"headline\" typographic level.\n/// @param {Map} $title Configuration for the \"title\" typographic level.\n/// @param {Map} $subheading-2 Configuration for the \"subheading-2\" typographic level.\n/// @param {Map} $subheading-1 Configuration for the \"subheading-1\" typographic level.\n/// @param {Map} $body-2 Configuration for the \"body-2\" typographic level.\n/// @param {Map} $body-1 Configuration for the \"body-1\" typographic level.\n/// @param {Map} $caption Configuration for the \"caption\" typographic level.\n/// @param {Map} $button Configuration for the \"button\" typographic level.\n/// @param {Map} $input Configuration for the \"input\" typographic level.\n/// @returns {Map} A typography config for the application.\n@function define-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     define-typography-level(34px, 40px, 400),\n  $headline:      define-typography-level(24px, 32px, 400),\n  $title:         define-typography-level(20px, 32px, 500),\n  $subheading-2:  define-typography-level(16px, 28px, 400),\n  $subheading-1:  define-typography-level(15px, 24px, 400),\n  $body-2:        define-typography-level(14px, 24px, 500),\n  $body-1:        define-typography-level(14px, 20px, 400),\n  $caption:       define-typography-level(12px, 20px, 400),\n  $button:        define-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         define-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map.get($level, font-family) == null {\n      $new-level: map.merge($level, (font-family: $font-family));\n      $config: map.merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map.merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function private-typography-is-2018-config($config) {\n  @return map.get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function private-typography-is-2014-config($config) {\n  @return map.get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n//\n// Components using this function should be migrated to normalize to the 2018 style config instead.\n// New components should not use this function.\n@function private-typography-to-2014-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2014-config($config) {\n    $args: (\n        display-4: map.get($config, headline-1),\n        display-3: map.get($config, headline-2),\n        display-2: map.get($config, headline-3),\n        display-1: map.get($config, headline-4),\n        headline: map.get($config, headline-5),\n        title: map.get($config, headline-6),\n        subheading-2: map.get($config, subtitle-1),\n        subheading-1: map.get($config, subtitle-2),\n        body-2: map.get($config, body-1),\n        body-1: map.get($config, body-2),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n    );\n    $non-null-args: ();\n    @each $key, $value in $args {\n      @if $value != null {\n        $non-null-args: map.merge($non-null-args, ($key: $value));\n      }\n    }\n    @return define-typography-config($non-null-args...);\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function private-typography-to-2018-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2018-config($config) {\n    @return (\n        headline-1: map.get($config, display-4),\n        headline-2: map.get($config, display-3),\n        headline-3: map.get($config, display-2),\n        headline-4: map.get($config, display-1),\n        headline-5: map.get($config, headline),\n        headline-6: map.get($config, title),\n        subtitle-1: map.get($config, subheading-2),\n\n        // These mappings are odd, but body-2 in the 2014 system actually looks closer to subtitle-2\n        // in the 2018 system, and subeading-1 in the 2014 system looks more like body-1 in the 2018\n        // system.\n        subtitle-2: map.get($config, body-2),\n        body-1: map.get($config, subheading-1),\n\n        body-2: map.get($config, body-1),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n        overline: if(map.get($config, overline), map.get($config, overline),\n            define-typography-level(12px, 32px, 500)\n        )\n    );\n  }\n  @return $config;\n}\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin typography-hierarchy($config-or-theme, $selector: '.mat-typography') {\n  $config: private-typography-to-2014-config(theming.get-typography-config($config-or-theme));\n\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include typography-utils.typography-level($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include typography-utils.typography-level($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include typography-utils.typography-level($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.83),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.67),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include typography-utils.typography-level($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include typography-utils.typography-level($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include typography-utils.typography-level($config, caption);\n  }\n\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include typography-utils.typography-level($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include typography-utils.typography-level($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include typography-utils.typography-level($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include typography-utils.typography-level($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'sass:string';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes.\n    font: $font-weight list.slash($font-size, $line-height) $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  $font-size: font-size($config, $level);\n  $font-weight: font-weight($config, $level);\n  $line-height: line-height($config, $level);\n  $font-family: font-family($config, $level);\n\n  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: letter-spacing($config, $level);\n}\n\n/// Coerce a value to `em` if it is a unitless number, otherwise returns\n/// the value provided.\n@function private-coerce-unitless-to-em($value) {\n  @return if(math.is-unitless($value), 1em * $value, $value);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include private.private-theme-elevation(16, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-bottom-sheet-container {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$_ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _focus-overlay-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $hue, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _ripple-color($theme, $hue, $opacity: $_ripple-opacity) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _theme-property($theme, $property, $hue) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: theming.get-color-from-palette($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: theming.get-color-from-palette($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: theming.get-color-from-palette($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: theming.get-color-from-palette($palette, disabled-button);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _theme-property($config, 'color', text);\n    @include _focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map.get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: theming.get-color-from-palette($foreground, text);\n    background-color: theming.get-color-from-palette($background, raised-button);\n\n    @include _theme-property($config, 'color', default-contrast);\n    @include _theme-property($config, 'background-color', default);\n    @include _ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include private.private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include private.private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include private.private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './button-toggle-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $divider-color: theming.get-color-from-palette($foreground, divider);\n  $theme-divider-color: map.get($foreground, divider);\n\n  // By default the theme usually has an rgba color for the dividers, which can\n  // stack up with the background of a button toggle. This can cause the border\n  // of a selected toggle to look different from an deselected one. We use a solid\n  // color to ensure that the border always stays the same.\n  $divider-color: if(type-of($theme-divider-color) == color,\n    theming.private-rgba-to-hex($theme-divider-color, map.get($background, card)),\n    $theme-divider-color\n  );\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include private.private-theme-overridable-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    &:not([class*='mat-elevation-z']) {\n      box-shadow: none;\n    }\n  }\n\n  .mat-button-toggle {\n    color: theming.get-color-from-palette($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: theming.get-color-from-palette($foreground, text);\n    background: theming.get-color-from-palette($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: theming.get-color-from-palette($background, selected-button);\n    color: theming.get-color-from-palette($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n    background-color: theming.get-color-from-palette($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: theming.get-color-from-palette($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: theming.get-color-from-palette($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button-toggle {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $standard-height: compatibility.private-density-prop-value(\n      button-toggle-variables.$standard-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-card {\n    @include private.private-theme-overridable-elevation(1, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-card {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: typography-utils.font-size($config, headline);\n      weight: typography-utils.font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: typography-utils.font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: theming.get-color-from-palette($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-label {\n    // Explicitly set the text color since the checkbox may be\n    // inside an overlay that doesn't have the proper theme text color.\n    color: theming.get-color-from-palette($foreground, 'text');\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: theming.get-color-from-palette($foreground, disabled);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map.get(map.get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-checkbox {\n    font-family: typography-utils.font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: typography-utils.line-height($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$chip-remove-font-size: 18px;\n\n@mixin _element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  @include _element-color(theming.get-color-from-palette($palette, default-contrast),\n    theming.get-color-from-palette($palette));\n\n  .mat-ripple-element {\n    @include _ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $unselected-background: theming.get-color-from-palette($background, unselected-chip);\n  $unselected-foreground: theming.get-color-from-palette($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include private.private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map.get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-chip {\n    font-size: typography-utils.font-size($config, body-2);\n    font-weight: typography-utils.font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-table {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-table {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: typography-utils.font-size($config, caption);\n    font-weight: typography-utils.font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _color($palette) {\n  @include date-range-colors(\n    theming.get-color-from-palette($palette, default, $range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: theming.get-color-from-palette($palette);\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: theming.get-color-from-palette($palette);\n\n    @if (meta.type-of($background) == color) {\n      background-color: color.adjust($background, $alpha: -$selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $selected-today-box-shadow-width\n                theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    @include _highlighted-cell($palette);\n  }\n\n  @media (hover: hover) {\n    .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover {\n      @include _highlighted-cell($palette);\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n// Styles for a highlighted calendar cell (e.g. hovered or focused).\n@mixin _highlighted-cell($palette) {\n  & > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      background-color: theming.get-color-from-palette($palette, 0.3);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    fill: theming.get-color-from-palette($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-calendar-table-header,\n  .mat-calendar-body-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: theming.get-color-from-palette($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: theming.get-color-from-palette($foreground, divider);\n\n    @if meta.type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, math.min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _unselected-cell {\n      $color: theming.get-color-from-palette($foreground, hint-text);\n\n      @if (meta.type-of($color) == color) {\n        border-color: color.adjust($color, $alpha: -$today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _color(map.get($config, primary));\n\n  .mat-datepicker-content {\n    @include private.private-theme-elevation(4, $config);\n    background-color: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-accent {\n      @include _color(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _color(map.get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include private.private-theme-elevation(24, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: theming.get-color-from-palette(map.get($config, primary), text);\n\n    &.mat-accent {\n      color: theming.get-color-from-palette(map.get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette(map.get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-calendar {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $calendar-weekday-table-font-size;\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-dialog-container {\n    @include private.private-theme-elevation(24, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-dialog-title {\n    @include typography-utils.typography-level($config, title);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './expansion-variables';\n@use './expansion-mixins';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-expansion-panel {\n    @include private.private-theme-overridable-elevation(2, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  @include expansion-mixins.private-expansion-focus {\n    background: theming.get-color-from-palette($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: theming.get-color-from-palette($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-expansion-panel-header {\n    font: {\n      family: typography-utils.font-family($config, subheading-1);\n      size: typography-utils.font-size($config, subheading-1);\n      weight: typography-utils.font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $expanded-height: compatibility.private-density-prop-value(\n        expansion-variables.$header-density-config, $density-scale, expanded-height);\n  $collapsed-height: compatibility.private-density-prop-value(\n      expansion-variables.$header-density-config, $density-scale, collapsed-height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-expansion') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@use './form-field-fill-theme.scss';\n@use './form-field-legacy-theme.scss';\n@use './form-field-outline-theme.scss';\n@use './form-field-standard-theme.scss';\n\n// Color styles that apply to all appearances of the form-field.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color:\n    theming.get-color-from-palette($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: theming.get-color-from-palette($primary, text);\n  $required-label-color: theming.get-color-from-palette($accent, text);\n\n  // Underline colors.\n  $underline-color-base:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: theming.get-color-from-palette($accent, text);\n  $underline-color-warn: theming.get-color-from-palette($warn, text);\n  $underline-focused-color: theming.get-color-from-palette($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include form-field-legacy-theme.legacy-color($config);\n  @include form-field-standard-theme.standard-color($config);\n  @include form-field-fill-theme.fill-color($config);\n  @include form-field-outline-theme.outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $dedupe;\n\n  $dedupe: $dedupe + 0.00001 !global;\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top: $subscript-font-scale *\n      typography-utils.private-coerce-unitless-to-em($line-height);\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include typography-utils.typography-level($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: typography-utils.private-coerce-unitless-to-em($line-height);\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n  }\n\n  @include form-field-legacy-theme.legacy-typography($config);\n  @include form-field-standard-theme.standard-typography($config);\n  @include form-field-fill-theme.fill-typography($config);\n  @include form-field-outline-theme.outline-typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-legacy-theme.private-form-field-legacy-density($density-scale);\n  @include form-field-standard-theme.private-form-field-standard-density($density-scale);\n  @include form-field-fill-theme.private-form-field-fill-density($density-scale);\n  @include form-field-outline-theme.private-form-field-outline-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin legacy-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-color: theming.get-color-from-palette($foreground, secondary-text);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $legacy-dedupe);\n  width: math.div(100%, $font-scale) + $legacy-dedupe;\n\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n@mixin legacy-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale) - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin private-form-field-legacy-density($config-or-theme) {}\n\n@mixin legacy-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include legacy-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include legacy-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin fill-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $fill-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $fill-dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $fill-dedupe;\n\n  $fill-dedupe: $fill-dedupe + 0.00001 !global;\n}\n\n@mixin fill-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-fill-density($config-or-theme) {}\n\n@mixin fill-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include fill-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include fill-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin outline-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n  $outline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: theming.get-color-from-palette($primary);\n  $outline-color-accent: theming.get-color-from-palette($accent);\n  $outline-color-warn: theming.get-color-from-palette($warn);\n  $outline-color-disabled:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $outline-dedupe)\n  scale($font-scale);\n  width: math.div(100%, $font-scale) + $outline-dedupe;\n\n  $outline-dedupe: $outline-dedupe + 0.00001 !global;\n}\n\n@mixin outline-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-outline-density($config-or-theme) {}\n\n@mixin outline-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include outline-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include outline-typography($typography);\n    }\n  }\n}\n\n","@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin color($config-or-theme) {}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include list-common.base(typography-utils.font-size($config, caption));\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin base($secondary-font-size) {\n  .mat-line {\n    @include truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin wrapper-base() {\n  @include normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/vendor-prefixes';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: theming.get-color-from-palette($primary, text);\n\n    @include vendor-prefixes.input-placeholder {\n      color: form-common.private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map.get($config, is-dark)) {\n      &:not(.mat-native-select-inline) {\n        option {\n          color: palette.$dark-primary-text;\n        }\n\n        option:disabled {\n          color: palette.$dark-disabled-text;\n        }\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: theming.get-color-from-palette($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: typography-utils.private-coerce-unitless-to-em(-$line-spacing);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-menu-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: theming.get-color-from-palette($foreground, 'text');\n\n    &[disabled] {\n      &,\n      .mat-menu-submenu-icon,\n      .mat-icon-no-color {\n        color: theming.get-color-from-palette($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-submenu-icon {\n    color: theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-menu-item {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './paginator-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-paginator {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n    border-right: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: theming.get-color-from-palette($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: typography-utils.font-family($config, caption);\n      size: typography-utils.font-size($config, caption);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(paginator-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: theming.get-color-from-palette($palette);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _color($primary);\n    }\n\n    &.mat-accent {\n      @include _color($accent);\n    }\n\n    &.mat-warn {\n      @include _color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: theming.get-color-from-palette($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map.get($foreground, base);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-radio-button {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-select-value {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: form-common.private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: theming.get-color-from-palette($background, card);\n    @include private.private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: theming.get-color-from-palette($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: theming.get-color-from-palette($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: theming.get-color-from-palette($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  .mat-select {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: typography-utils.private-coerce-unitless-to-em($line-height);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: theming.get-color-from-palette($foreground, disabled);\n  $ripple-unchecked-color: theming.get-color-from-palette($foreground, base);\n\n  .mat-slide-toggle {\n    @include _checked-color($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _checked-color($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _checked-color($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include private.private-theme-elevation(1, $config);\n    background-color: theming.get-color-from-palette(palette.$grey-palette, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slide-toggle-content {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: theming.get-color-from-palette($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $mat-slider-off-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-off-focused-color: theming.get-color-from-palette($foreground, slider-off-active);\n  $mat-slider-disabled-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color:\n    theming.get-color-from-palette($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color:\n    theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color:\n    theming.get-color-from-palette($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-slider {\n    &.mat-primary {\n      @include _inner-content-theme($primary);\n    }\n\n    &.mat-accent {\n      @include _inner-content-theme($accent);\n    }\n\n    &.mat-warn {\n      @include _inner-content-theme($warn);\n    }\n  }\n\n  .mat-slider:hover,\n  .mat-slider.cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider.mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider.mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: theming.get-color-from-palette($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (meta.type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slider-thumb-label-text {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, caption);\n      weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover:not([aria-disabled]),\n    &:hover[aria-disabled='false'] {\n      background-color: theming.get-color-from-palette($background, hover);\n    }\n\n    &:hover[aria-disabled='true'] {\n      cursor: default;\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: theming.get-color-from-palette($foreground, secondary-text);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: theming.get-color-from-palette($primary);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($accent);\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($warn);\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: theming.get-color-from-palette($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: typography-utils.font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: typography-utils.font-size($config, body-2);\n      weight: typography-utils.font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: math.div($height - stepper-variables.$label-header-height, 2);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding stepper-variables.$side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: stepper-variables.$line-gap - $vertical-padding;\n      bottom: stepper-variables.$line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $header-border: 1px solid theming.get-color-from-palette($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] > .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _label-focus-color($color);\n        @include _ink-bar-color($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _ink-bar-color($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _label-focus-color($color);\n        @include _tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _ink-bar-color($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: theming.get-color-from-palette($color, $hue);\n  }\n}\n\n@mixin _label-focus-color($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: theming.get-color-from-palette($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: theming.get-color-from-palette($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: theming.get-color-from-palette($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-link-container .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: theming.get-color-from-palette($background-color, default-contrast);\n  }\n\n  > .mat-tab-header .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    border-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.4;\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element,\n  > .mat-tab-header-pagination .mat-ripple-element {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    background-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.12;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tab-group {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/style/variables';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './toolbar-variables';\n\n@mixin _height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  background: theming.get-color-from-palette($palette);\n  color: theming.get-color-from-palette($palette, default-contrast);\n}\n\n@mixin _form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-toolbar {\n    background: theming.get-color-from-palette($background, app-bar);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    @include _form-field-overrides;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0;\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height-desktop: compatibility.private-density-prop-value(\n      toolbar-variables.$desktop-density-config, $density-scale, height);\n  $height-mobile: compatibility.private-density-prop-value(\n      toolbar-variables.$mobile-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media (variables.$xsmall) {\n      @include _height($height-mobile);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$target-height: 22px;\n$font-size: 10px;\n$vertical-padding: math.div($target-height - $font-size, 2);\n\n$handset-target-height: 30px;\n$handset-font-size: 14px;\n$handset-vertical-padding: math.div($handset-target-height - $handset-font-size, 2);\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n\n  .mat-tooltip {\n    background: theming.get-color-from-palette($background, tooltip, 0.9);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tooltip {\n    font-family: typography-utils.font-family($config);\n    font-size: $font-size;\n    padding-top: $vertical-padding;\n    padding-bottom: $vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $handset-font-size;\n    padding-top: $handset-vertical-padding;\n    padding-bottom: $handset-vertical-padding;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-list-option {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-subheader {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-list-item-disabled {\n      background-color: theming.get-color-from-palette($background, disabled-list-option);\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  $font-family: typography-utils.font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: typography-utils.font-family($config, body-2);\n      font-size: typography-utils.font-size($config, body-2);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: typography-utils.font-size($config, caption);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-option {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    &.mat-active {\n      background: theming.get-color-from-palette($background, hover);\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-option {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-optgroup-label {\n    @include typography-utils.typography-level($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n@use '../core/theming/palette';\n@use '../core/style/private';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $accent: map.get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, palette.$dark-primary-text, palette.$light-secondary-text);\n    background: if($is-dark-theme, map.get(palette.$grey-palette, 50), #323232);\n\n    @include private.private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, theming.get-color-from-palette($accent, text));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-simple-snackbar {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '../../../cdk/a11y';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include a11y.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &, &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n    }\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use 'sass:map';\n@use '../style/layout-common';\n\n/// Mixin that turns on strong focus indicators.\n///\n/// @example\n///   .my-app {\n///     @include mat-strong-focus-indicators($config);\n///   }\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n    border-style: solid,\n    border-width: 3px,\n    border-radius: 4px,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n\n  // Base styles for focus indicators.\n  .mat-focus-indicator::before {\n    @include layout-common.fill();\n    box-sizing: border-box;\n    pointer-events: none;\n    border: $border-width $border-style transparent;\n    border-radius: $border-radius;\n\n    .cdk-high-contrast-active & {\n      display: none;\n    }\n  }\n\n  // By default, all focus indicators are flush with the bounding box of their\n  // host element. For particular elements (listed below), default inset/offset\n  // values are necessary to ensure that the focus indicator is sufficiently\n  // contrastive and renders appropriately.\n\n  .mat-focus-indicator.mat-flat-button::before,\n  .mat-focus-indicator.mat-raised-button::before,\n  .mat-focus-indicator.mat-fab::before,\n  .mat-focus-indicator.mat-mini-fab::before,\n  .mat-focus-indicator.mat-chip::before,\n  .mat-focus-indicator.mat-sort-header-container::before {\n    margin: -($border-width + 2px);\n  }\n\n  .mat-focus-indicator.mat-stroked-button::before,\n  .mat-focus-indicator.mat-calendar-body-cell-content::before {\n    margin: -($border-width + 3px);\n  }\n\n  .mat-focus-indicator.mat-tab-link::before,\n  .mat-focus-indicator.mat-tab-label::before {\n    margin: 5px;\n  }\n\n  // Render the focus indicator on focus. Defining a pseudo element's\n  // content will cause it to render.\n\n  // Checkboxes, radios, and slide toggles render focus indicators when the\n  // associated visually-hidden input is focused.\n  .mat-checkbox-input:focus ~ .mat-focus-indicator::before,\n  .mat-radio-input:focus ~ .mat-focus-indicator::before,\n  .mat-slide-toggle-input:focus ~ .mat-slide-toggle-thumb-container .mat-focus-indicator::before,\n\n  // For options, render the focus indicator when the class .mat-active\n  // is present.\n  .mat-focus-indicator.mat-option.mat-active::before,\n\n  // For calendar cells, render the focus indicator when the parent cell is\n  // focused.\n  .mat-calendar-body-cell:focus .mat-focus-indicator::before,\n\n  // Stepper headers have the focus indicator as a descendant,\n  // because `::before` is used for other styling.\n  .mat-step-header:focus .mat-focus-indicator::before,\n\n  // For all other components, render the focus indicator on focus.\n  .mat-focus-indicator:focus::before {\n    content: '';\n  }\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `mat-core`.\n@mixin private-strong-focus-indicators-positioning() {\n  .mat-focus-indicator {\n    position: relative;\n  }\n}\n","@use '../../cdk/overlay';\n@use '../../cdk/a11y';\n@use '../../cdk/text-field';\n\n// Core styles that can be used to apply material design treatments to any element.\n@use './ripple/ripple';\n@use './focus-indicators/focus-indicators';\n@use './typography/all-typography';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core($typography-config: null) {\n  @include all-typography.all-component-typographies($typography-config);\n  @include ripple.ripple();\n  @include a11y.a11y-visually-hidden();\n  @include overlay.overlay();\n  @include text-field.text-field-autosize();\n  @include text-field.text-field-autofill();\n\n  @include focus-indicators.private-strong-focus-indicators-positioning();\n  @include _mdc-core();\n}\n\n// Mixin that renders all of the core MDC styles. Private mixin included with `mat-core`.\n@mixin _mdc-core() {\n  @include _mdc-strong-focus-indicators-positioning();\n}\n\n// Mixin that ensures focus indicator host elements are positioned so that the focus indicator\n// pseudo element within is positioned relative to the host. Private mixin included within\n// `_mat-mdc-core`.\n@mixin _mdc-strong-focus-indicators-positioning() {\n  .mat-mdc-focus-indicator {\n    position: relative;\n  }\n}\n","@use '@angular/material' as mat;\n@import 'hljs';\n// Dedicated file for theming the app\n@mixin rss-reader-theme($theme) {\n  @include tables-theme($theme);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $is-dark-theme: map-get($theme, is-dark); // Check if the theme is dark\n  @if ($is-dark-theme) {\n    // Apply highlight.js dark styles available in _hljs.scss\n    @include hljs-dark();\n  } @else {\n    // Apply highlight.js light styles available in _hljs.scss\n    @include hljs-light();\n  }\n\n  // Shows the current link. Used in the sidenav\n  .active-link {\n    // Since it's a bit hard to actually see the text in the dark theme, it'll use the accent color if it's dark and primary if it's not. Same applies for mat-icon\n    color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary)) !important;\n    mat-icon {\n      color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary)) !important;\n    } // Note: These colors are based on the Android sidenav selection state\n    background-color: if($is-dark-theme, #595959, #DCDCDC) !important;\n  }\n\n  // Warning icon color\n  .warning-icon {\n    color: mat.get-color-from-palette($warn) !important;\n  }\n\n  a.anchor-link {\n    color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, default));\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .mat-list-item-content mat-icon,\n  .icon {\n    color: map-get($foreground, icon);\n  }\n\n  .onboarding-content {\n    color: if($is-dark-theme, #FFF, #000);\n  }\n  .onboarding-card {\n    background-color: if($is-dark-theme, #303030, #FAFAFA);\n  }\n\n  .indicator-active {\n    background-color: mat.get-color-from-palette($accent) !important;\n  }\n  .indicator {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n\n  // Adapted from\n  // https://github.com/EdricChan03/StudyBuddy-web/blob/3b1e7709c8954fc73fc934cbf6f882de3ed25e2e/src/styles.scss#L64-L86\n  .badge {\n    color: mat.get-color-from-palette($foreground, text);\n    background-color: mat.get-color-from-palette($background, unselected-chip);\n\n    &.badge--colored {\n      background-color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary));\n      color: if($is-dark-theme, map-get($accent, 'default-contrast'), map-get($primary, 'default-contrast'));\n    }\n\n    $palettes-list: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $key, $val in $palettes-list {\n      &.badge--#{$key} {\n        background-color: mat.get-color-from-palette($val);\n        color: map-get($val, 'default-contrast');\n      }\n    }\n  }\n}\n\n// Mixin from material docs site\n@mixin tables-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n  $tableBorderOpacity: if($is-dark-theme, 0.08, 0.03);\n\n  table.app-table {\n    color: mat.get-color-from-palette($foreground, text);\n\n    th {\n      background: mat.get-color-from-palette($background, app-bar);\n    }\n\n    td {\n      border: 1px solid rgba(mat.get-color-from-palette($foreground, secondary-text), $tableBorderOpacity);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n    &::after {\n      color: theming.get-color-from-palette($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{elevation.$prefix}#{$zValue} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include ripple-theme.theme($theme);\n    @include option-theme.theme($theme);\n    @include optgroup-theme.theme($theme);\n    @include pseudo-checkbox-theme.theme($theme);\n\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: variables.$fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin elevation($zValue, $color: $color, $opacity: $opacity) {\n  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map.get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin overridable-elevation(\n    $zValue,\n    $color: $color,\n    $opacity: $opacity) {\n  &:not([class*='#{$prefix}']) {\n    @include elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function private-transition-property-value(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin elevation-transition(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  transition: private-transition-property-value($duration, $easing);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-autocomplete-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: theming.get-color-from-palette($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: theming.get-color-from-palette($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-divider {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@mixin private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function private-control-placeholder-color($config) {\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  @return theming.get-color-from-palette($foreground, secondary-text,\n    if($is-dark-theme, 0.5, 0.42));\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin standard-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin standard-typography($config-or-theme) {}\n\n@mixin private-form-field-standard-density($config-or-theme) {}\n\n@mixin standard-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include standard-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include standard-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: theming.get-color-from-palette($primary, text);\n    }\n\n    &.mat-accent {\n      color: theming.get-color-from-palette($accent, text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","// stylelint-disable material/no-prefixes\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  -moz-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  // Note: this isn't necessary anymore since we don't support\n  // IE, but it caused some presubmit failures in #23416.\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin position-sticky($important: false) {\n  position: -webkit-sticky #{if($important, '!important', '')};\n  position: sticky #{if($important, '!important', '')};\n}\n\n@mixin private-color-adjust($value) {\n  -webkit-print-color-adjust: $value;\n  color-adjust: $value;\n}\n\n@mixin private-background-clip($value) {\n  -webkit-background-clip: $value;\n  background-clip: $value;\n}\n// stylelint-enable\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use '../core/theming/theming';\n\n// Approximates the correct buffer color by using a mix between the theme color\n// and the theme's background color.\n@function _get-buffer-color($theme, $background) {\n  $theme-color: theming.get-color-from-palette($theme);\n  // Return fallback color if the theme uses variables to define colors.\n  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {\n    @return theming.get-color-from-palette($theme, lighter);\n  }\n  @return color.mix($theme-color, $background, $weight: 25%);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get(map.get($config, background), background);\n\n  .mat-progress-bar-background {\n    fill: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $drawer-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-container-background-color:  theming.get-color-from-palette($background, background);\n  $drawer-push-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-side-border: solid 1px theming.get-color-from-palette($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include private.private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: theming.get-color-from-palette($background, card, $opacity);\n\n    @if (meta.type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: color.invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$red-palette: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$pink-palette: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$purple-palette: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$deep-purple-palette: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$indigo-palette: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$blue-palette: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$light-blue-palette: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$cyan-palette: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$teal-palette: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$green-palette: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$light-green-palette: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$lime-palette: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$yellow-palette: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$amber-palette: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$orange-palette: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$deep-orange-palette: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$brown-palette: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$grey-palette: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$gray-palette: $grey-palette;\n\n$blue-grey-palette: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$blue-gray-palette: $blue-grey-palette;\n\n\n// Background palette for light themes.\n$light-theme-background-palette: (\n  status-bar: map.get($grey-palette, 300),\n  app-bar:    map.get($grey-palette, 100),\n  background: map.get($grey-palette, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map.get($grey-palette, 300),\n  selected-disabled-button: map.get($grey-palette, 400),\n  disabled-button-toggle: map.get($grey-palette, 200),\n  unselected-chip: map.get($grey-palette, 300),\n  disabled-list-option: map.get($grey-palette, 200),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Background palette for dark themes.\n$dark-theme-background-palette: (\n  status-bar: black,\n  app-bar:    map.get($grey-palette, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map.get($grey-palette, 800),\n  dialog:     map.get($grey-palette, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map.get($grey-palette, 800),\n  focused-button: $light-focused,\n  selected-button: map.get($grey-palette, 900),\n  selected-disabled-button: map.get($grey-palette, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map.get($grey-palette, 700),\n  disabled-list-option: rgba(white, 0.12),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Foreground palette for light themes.\n$light-theme-foreground-palette: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$dark-theme-foreground-palette: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n"],"names":[],"sourceRoot":"webpack:///"}