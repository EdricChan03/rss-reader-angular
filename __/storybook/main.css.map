{"version":3,"file":"main.css","mappings":"AAAA;ACGA;AA+EA;;CAAA;AD9EA;AEmNE;EACE,gBA1MU;EA2MV,eA5MQ;EA6MR;AFhNJ;AEmNE;EAEE;AFjNJ;AEoNE;EACE;AFjNJ;AG0KE;;;;;EC5GE;EAcF;EDoGE;AHtKJ;AGyKE;;;;;ECrHE;EAcF;ED6GE;AHrKJ;AGwKE;;;;;EC9HE;EAcF;EDsHE;AHpKJ;AGuKE;;;;;ECvIE;EAcF;ED+HE;AHnKJ;AGyKE;;;ECnJE;ED8JA;AH7KJ;AGgLE;;;ECjKE;ED4KA;AHpLJ;AGuLE;;;;EC/KE;EAcF;AJdF;AGsLE;;;;;ECtLE;EAcF;AJLF;AGoLI;;;;;EACE;AH9KN;AGkLE;;;;EClME;EAcF;AJUF;AGiLE;;ECzME;EAcF;ED8LE;AH7KJ;AGgLE;;EC/ME;EAcF;EDoME;AH5KJ;AG+KE;;ECrNE;EAcF;ED0ME;AH3KJ;AG8KE;;EC3NE;EAcF;EDgNE;AH1KJ;AK/GE;ED2DE;EAcF;AJ2CF;AM+BE;;EAGI;EACA;EACA;AN7BN;AO3CE;EACE;AP8CJ;AQrHE;EACE;ARwHJ;AQrHE;EAEI;EACA;ARuHN;AQnHE;EACE;ARsHJ;AQnHE;;EAEE;ARsHJ;AShEE;EACE;ATmEJ;AS/DE;EACE;ATkEJ;AUhFE;EACE;EACA;AVmFJ;AUjFI;;EAEE,eA7FkB;AVgLxB;AWjJE;EACE;AXoJJ;AWjJE;EACE;EACA;AXoJJ;AWjJE;EACE;AXoJJ;AYFE;EACE;AZKJ;AYFE;EACE,eAzLsB;AZ8L1B;AYFE;;EAGI;EACA;AZIN;AYAE;EAEI,eArM6B;EAsM7B;AZEN;AajME;ET0DE;EAcF;AJ8HF;AcjKE;EAEI;EACA;EACA;AdmKN;Ac/JE;EVaE;EAcF;AJyIF;AelEE;EX5FE,kBAeU;EAdV,gBAeY;EAdZ,kBAeY;EAdZ,qCAeY;EAGd;AJiJF;AetEE;EACE,yBAPuB;AfgF3B;AenEI;;EACE,eAvB2B;EAwB3B,kBAxCU;Af+GhB;AenEI;;EACE;EACA;AfsEN;AepEM;;EACE;EACA,kBAlDQ;AfyHhB;AelEE;EACE;EAEA;AfoEJ;AehEI;;EAzEF;EAEA;Af6IF;Ae9DI;EAjFF;EAEA;AfiJF;Ae3DE;EACE;EACA,sBApEiB;AfkIrB;Ae3DE;EACE;Af8DJ;Ae3DE;EAGE,iBAhEuB;Af4H3B;AezDE;EACE,cA/EoB;EAgFpB,0BAzEqB;EA6ErB;AfyDJ;AgBpMI;EACE,sBAJqB;AhB2M3B;AgBpMI;EACE;AhBsMN;AgBlMM;;EAxDJ;EAEA;AhB6PF;AgBhMM;EA/DJ;EAEA;AhBiQF;AgB5LM;EAvEJ;EAEA;AhBqQF;AgBzLI;EACE;AhB2LN;AgBxLI;EAGE,cAzCqB;AhBiO3B;AgBrLI;EACE,0BAjDmB;EAqDnB;AhBoLN;AgB9KE;EAGM;;IA3FN;EhB4QA;EgB1KM;IAlGN;EhB+QA;EgBrKM;IA1GN;EhBkRA;AACF;AiBhQI;EACE;AjBkQN;AiB/PI;EACE;EACA,kBAT2B;AjB0QjC;AiB7PM;;EAnCJ;EAEA;AjBmSF;AiBzPM;EA5CJ;EAEA;AjBuSF;AkBlPI;EACE;AlBqPN;AkBlPI;EACE;EACA,mBAT8B;AlB6PpC;AkBhPM;;EA1CJ;EAEA;AlB6RF;AkB5OM;EAnDJ;EAEA;AlBiSF;AmBrWE;;EAGE;AnBuWJ;AoB3WE;;EARA;EACA;EACA;EAQE;EACA;ApBgXJ;AoB7WI;;EACE,eDJwB;AnBoX9B;AqBrTE;EACE;ArBwTJ;AsBtVE;EAEI;EACA;EACA;AtBwVN;AuB/VE;;EAGI;EACA;AvBiWN;AwBzUE;EACE;AxB4UJ;AyB9UE;EACE;AzBiVJ;AyB9UE;EACE;AzBiVJ;A0B/UE;EACE;A1BkVJ;A2BnPE;EAEI;EACA;EACA;A3BqPN;A4BpTE;EACE;A5BuTJ;A4BpTE;EAEI;EACA;A5BsTN;A4BlTE;EACE;A5BqTJ;A4BlTE;EACE;A5BqTJ;A4BlTE;EAEI;EACA;A5BoTN;A6B3SE;EACE;A7B8SJ;A6B3SE;EAEI;EACA;EACA;A7B6SN;A8B/XE;;;;;;;E1BOE;EAcF;E0BbE;A9BmYJ;A+B1bE;EACE;EACA,eArBQ;EAsBR,gBArBe;EAsBf,mBAtBe;A/BmdnB;A+B1bE;EACE,eAvBgB;EAwBhB,gBAvBuB;EAwBvB,mBAxBuB;A/Bqd3B;AgC9aE;EACE,qCAHY;AhCobhB;AgC9aE;EACE,qCAPY;AhCwbhB;AgC5aI;EACE;AhC+aN;AoBleE;EARA;EACA;EACA;EAQE;EACA;ApBseJ;AoBneI;EACE,eY6C0B;AhCwbhC;AgCrbI;EACE;AhCubN;AoB/eE;EARA;EACA;EACA;EAQE;EACA;ApBmfJ;AoBhfI;EACE,eYkD0B;AhCgchC;AgC7bI;EACE;EACA;EACA;AhC+bN;AgCzbI;EACE;AhC4bN;AoBlgBE;EARA;EACA;EACA;EAQE;EACA;ApBsgBJ;AoBngBI;EACE,eYgE0B;AhCqchC;AgClcI;EACE;AhCocN;AoB/gBE;EARA;EACA;EACA;EAQE;EACA;ApBmhBJ;AoBhhBI;EACE,eYqE0B;AhC6chC;AgC1cI;EACE,qCA1CU;EA2CV;EACA;AhC4cN;AiCrfE;EAEI;EACA;AjCufN;AkCzhBE;E9B2DE;EAcF;AJqdF;AmCthBE;EAEI;EACA;AnCwhBN;AmCphBE;EACE;EAEE;EACA;EACA;AnCshBN;AoCtiBE;EACE;ApCyiBJ;AoCtiBE;;EAEE;EACA;ApCyiBJ;AqCpkBE;EACE;EAIA;ArCokBJ;AqC7jBI;EACE;ArC+jBN;AqC3jBE;EACE;ArC8jBJ;AqC3jBE;EACE;EACA;EACA;EAEA;EAIA;ArC0jBJ;AsC3iBI;EDXE;ArCyjBN;AsC7lBE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAIA;EAGA;EAGA;EACA;EAMA;AtColBJ;AsCllBI;EACE;EACA;AtColBN;AuCpmBE;EAEE;EAGA;EACA;EACA;EACA;AvComBJ;AuChmBE;EACE;EACA,aA3BwB;AvC8nB5B;AuCjmBI;EAGE;AvCimBN;AuCzlBE;EACE;EACA;EACA,aA1Cc;AvCsoBlB;AuCxlBE;EAGE;EACA;EACA;EACA,aApDc;EAwDd;EACA;EACA;AvCslBJ;AuCnlBE;EAEE;EACA;EACA;EACA;EACA;EAEA,aApEuB;EAqEvB;EACA;EACA;EACA;AvColBJ;AuCllBI;EACE;AvColBN;AuC/kBM;EAGE;AvC+kBR;AuC1kBE;EACE,+BAtFqB;AvCmqBzB;AuC1kBE;EAEE;EACA;EACA;AvC4kBJ;AuCtkBI;EACE;EACA;AvCwkBN;AuCpkBE;EACE;AvCukBJ;AuClkBE;EACE;EACA,aArHc;EA0Hd;EAIA;EAGA;EACA;AvC4jBJ;AuCxjBE;EACE;EAKA;EAKA;AvCmjBJ;AwCpsBE;EACE;AxCusBJ;AwCjsBE;EAyCA;EACA;EAxCE;EACA;AxCqsBJ;AwC5rBE;EA6BA;EACA;EA5BE;AxCgsBJ;AwCtrBE;AACA;AAEA;EAEE;AxCurBJ;AwCprBE;EAEE;AxCsrBJ;AyCvtBE;EACE;AzC0tBJ;AyCxtBI;ECbF;EACA;EACA;EACA;EACA;EDWI;EACA;EACA;EAAA;EACA;EAAA;EAYA;EAAA;AzCmtBN;AyC3sBI;EACE;AzC6sBN;AsChqBM;EG/BA;AzCmsBN;AyC9uBE;EACE;AzCivBJ;AyC/uBI;ECbF;EACA;EACA;EACA;EACA;EDWI;EACA;EACA;EAAA;EACA;EAAA;EAYA;EAAA;AzC0uBN;AyCluBI;EACE;AzCouBN;AsCvrBM;EG/BA;AzC0tBN;AAvvBA;EAGE;AAwvBF;A2CprBE;EACE;A3CsrBJ;A2CprBI;EACE;A3CsrBN;A2CnrBI;EACE;A3CqrBN;ACzxBE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;AD2xBJ;ACzxBE;EAEE;AD2xBJ;AC7xBE;;EAEE;AD2xBJ;ACzxBE;EACE;EACA;AD2xBJ;ACzxBE;;;;EAIE;AD2xBJ;ACzxBE;;EAEE;AD2xBJ;ACzxBE;;;EAGE;AD2xBJ;ACzxBE;;;;EAIE;AD2xBJ;ACzxBE;;;;;;;EAOE;AD2xBJ;ACzxBE;EACE;AD2xBJ;ACzxBE;EACE;EACA;EACA;AD2xBJ;ACzxBE;EACE;EACA;EACA;AD2xBJ;ACzxBE;;EAEE;AD2xBJ;ACzxBE;EACE;AD2xBJ;ACzxBE;EACE;AD2xBJ;ACzxBE;EACE;AD2xBJ;A2Cr1BE;EAEE;EAIA;A3Cm1BJ;A2Ct1BI;EACE;A3Cw1BN;A2Cl1BE;EACE;A3Co1BJ;A2Cj1BE;EACE;EACA;A3Cm1BJ;A2Cl1BI;EACE;A3Co1BN;A2Ch1BE;;EAEE;A3Ck1BJ;A2C/0BE;EACE;A3Ci1BJ;A2C/0BE;EACE;A3Ci1BJ;A2C90BE;EACE;A3Cg1BJ;A2C90BE;EACE;A3Cg1BJ;A2C30BE;EACE;EACA;A3C60BJ;A2C30BI;EACE;EACA;A3C60BN;A2Cn0BM;EACE;EACA;A3Cq0BR;A2Cv0BM;EACE;EACA;A3Cy0BR;A2C30BM;EACE;EACA;A3C60BR;A4Cn5BE;EAII;A5Ck5BN;AiCp5BE;EACE;AjCs5BJ;AiCp5BI;EAEE;AjCq5BN;AiCj5BI;EACE;AjCm5BN;AiCh5BI;EACE;EACA;AjCk5BN;AiC/4BI;EACE;AjCi5BN;AiC74BE;EACE;AjC+4BJ;AiC54BE;EACE;AjC84BJ;AiC34BE;EACE;AjC64BJ;AkCj7BE;EACE;AlCm7BJ;AkCh7BE;EACE;AlCk7BJ;A6C76BE;EACE;A7C+6BJ;A6C76BI;EACE;A7C+6BN;A6C36BE;EACE,cAZe;A7Cy7BnB;A6C16BE;;EAEE;A7C46BJ;A6Cp6BE;;;;EAIE;A7Cs6BJ;A6Cn6BE;;EAEE;A7Cq6BJ;A6Ch6BI;;EACE,mBAxCa;A7C28BnB;A8C58BE;EAIE;EACA;A9C28BJ;A8Cp8BI;ECkIF;A/Cq0BF;A8Cv8BI;ECkIF;A/Cw0BF;A8C18BI;ECkIF;A/C20BF;A8C78BI;ECkIF;A/C80BF;A8Ch9BI;ECkIF;A/Ci1BF;A8Cn9BI;ECkIF;A/Co1BF;A8Ct9BI;ECkIF;A/Cu1BF;A8Cz9BI;ECkIF;A/C01BF;A8C59BI;ECkIF;A/C61BF;A8C/9BI;ECkIF;A/Cg2BF;A8Cl+BI;ECkIF;A/Cm2BF;A8Cr+BI;ECkIF;A/Cs2BF;A8Cx+BI;ECkIF;A/Cy2BF;A8C3+BI;ECkIF;A/C42BF;A8C9+BI;ECkIF;A/C+2BF;A8Cj/BI;ECkIF;A/Ck3BF;A8Cp/BI;ECkIF;A/Cq3BF;A8Cv/BI;ECkIF;A/Cw3BF;A8C1/BI;ECkIF;A/C23BF;A8C7/BI;ECkIF;A/C83BF;A8ChgCI;ECkIF;A/Ci4BF;A8CngCI;ECkIF;A/Co4BF;A8CtgCI;ECkIF;A/Cu4BF;A8CzgCI;ECkIF;A/C04BF;A8C5gCI;ECkIF;A/C64BF;A8CxgCI;EACE;A9C0gCN;AgDpiCE;EAEE;EACA;AhDsiCJ;A+C14BE;EAXA;A/Cw5BF;AgDliCI;EACE;AhDoiCN;AgDliCM;EACE;AhDoiCR;AEt9BE;EACE;AFw9BJ;AEj9BE;EACE;AFm9BJ;AE/8BI;EACE;AFi9BN;AE78BE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF+8BJ;AE58BE;;EAEE;AF88BJ;AEz8BE;EAEE;AF08BJ;AE/jCE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AF4kCb;AE7jCI;EACE;AF+jCN;AE1jCI;EACE;AF4jCN;AEvjCI;EACE;AFyjCN;AEpjCI;EACE;EACA;AFsjCN;AEjjCI;EACE;AFmjCN;AE9iCI;EACE;EACA;AFgjCN;AE1iCM;EACE;AF4iCR;AEviCM;EACE;EACA;AFyiCR;AEpiCM;EACE;AFsiCR;AEjiCM;EACE;EACA;AFmiCR;AEtmCE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AFonCf;AEpmCI;EACE;AFsmCN;AEjmCI;EACE;AFmmCN;AE9lCI;EACE;AFgmCN;AE3lCI;EACE;EACA;AF6lCN;AExlCI;EACE;AF0lCN;AErlCI;EACE;EACA;AFulCN;AEjlCM;EACE;AFmlCR;AE9kCM;EACE;EACA;AFglCR;AE3kCM;EACE;AF6kCR;AExkCM;EACE;EACA;AF0kCR;AE7oCE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFypCb;AE3oCI;EACE;AF6oCN;AExoCI;EACE;AF0oCN;AEroCI;EACE;AFuoCN;AEloCI;EACE;EACA;AFooCN;AE/nCI;EACE;AFioCN;AE5nCI;EACE;EACA;AF8nCN;AExnCM;EACE;AF0nCR;AErnCM;EACE;EACA;AFunCR;AElnCM;EACE;AFonCR;AE/mCM;EACE;EACA;AFinCR;AEviCE;EACE;EACA;AFyiCJ;AsC9pCI;EpCwHE;EACA;AFyiCN;AEpiCI;EACE;EACA;AFuiCN;AEliCI;EACE;EACA;AFoiCN;AE/hCI;EAWI;EAMF;AFkhCN;AKttCE;E0CkJA;E1ChJE;EACA;ALwtCJ;AMtoCE;EAKE;EACA;ANooCJ;AMpqCE;EACE;ANsqCJ;AMpqCE;EACE;ANsqCJ;AMpqCE;EACE;ANsqCJ;AMlqCI;EAEE;ANmqCN;AMtuCE;EACE;ANwuCJ;AMruCE;EACE;ANuuCJ;AMpuCE;EACE;ANsuCJ;AMnuCE;EACE;ANquCJ;AMppCI;EACE,YAxGY;EAyGZ;ANspCN;AMlpCE;EACE;ANopCJ;AM/oCE;EACE;ANipCJ;AM9oCE;EAEE;EACA;AN+oCJ;AM1sCE;EACE;AN4sCJ;AM1sCE;EACE;AN4sCJ;AM1sCE;EACE;AN4sCJ;AMxsCI;EAEE;ANysCN;AMttCE;EACE;ANwtCJ;AMttCE;EACE;ANwtCJ;AMttCE;EACE;ANwtCJ;AMptCI;EAEE;ANqtCN;AMvvCE;EAXA,0CADmB;ANswCrB;AMtvCE;EAfA,oCADmB;ANywCrB;AMrvCE;EAnBA,0CADmB;AN4wCrB;A+CzoCE;EAXA;A/CupCF;A+C5oCE;EAXA;A/C0pCF;A+C/oCE;EAXA;A/C6pCF;A+ClpCE;EAXA;A/CgqCF;A+CrpCE;EAXA;A/CmqCF;A+CxpCE;EAXA;A/CsqCF;A+C3pCE;EAXA;A/CyqCF;A+C9pCE;;EAXA;A/C6qCF;AO3yCI;;EACE;AP8yCN;AO1yCE;EACE;AP4yCJ;AO1yCI;EACE;AP4yCN;AOxyCE;EACE;EACA;AP0yCJ;AOxyCI;EACE;AP0yCN;AOtyCE;EACE;APwyCJ;AOryCE;EACE;EACA;APuyCJ;AOnyCI;EACE;EACA;EACA;APqyCN;AOjyCE;EACE;EACA;APmyCJ;AOjyCI;EACE;APmyCN;AO/xCE;EACE;EACA;APiyCJ;AO/xCI;EACE;APiyCN;AO9xCI;EACE;APgyCN;AO5xCE;;EAEE;AP8xCJ;AO5wCI;EACE,iBALc;APmxCpB;AQn3CE;EAEE;EACA;ARq3CJ;A+C5tCE;EAXA;A/C0uCF;A+C/tCE;EAXA;A/C6uCF;AQn3CE;EACE;ARq3CJ;ASn3CE;EACE;ATq3CJ;ASl3CE;EACE,aAdoB;ATk4CxB;ASj3CE;EAGE;ATi3CJ;AS92CE;EACE,yBAxBoB;ATw4CxB;AS52CI;EACE;AT82CN;AS32CI;EACE;AT62CN;AS12CI;EACE;AT42CN;ASr2CM;EACE,yBAtCW;AT64CnB;ASl2CM;EACE,qBA5CW;ATg5CnB;ASh2CI;EACE;ATk2CN;AS51CE;EACE;AT81CJ;ASz1CI;;EACE;AT41CN;ASz1CI;;EACE;AT41CN;ASz1CI;;EACE;AT41CN;AUp4CE;EA5CA,yBAyCwB;EAxCxB,0BAyCwB;AV04C1B;AUj7CE;EACE,0BAsCsB;EArCtB;AVm7CJ;AUx4CM;EqCmGJ;A/CwyCF;AUv4CM;EACE;AVy4CR;AUr4CI;EACE;AVu4CN;AUp4CI;EACE;AVs4CN;AUj4CI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVg7C1B;AUr8CE;EACE,YAoBsB;EAnBtB;AVu8CJ;AUj7CE;EAVA,0CADmB;AV+7CrB;AUx4CI;EAvEF,yBAyBE;EAxBF,YAuBwB;AV27C1B;AUh9CE;EACE,YAoBsB;EAnBtB;AVk9CJ;AU57CE;EAVA,0CADmB;AV08CrB;AU/4CI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AVs8C1B;AU39CE;EACE,0BAoBsB;EAnBtB;AV69CJ;AUv8CE;EAVA,oCADmB;AVq9CrB;AWr+CE;EACE;AXu+CJ;AWp+CE;;;;EAIE;AXs+CJ;AWn+CE;;EAEE;AXq+CJ;AWl+CE;EACE;AXo+CJ;AWj+CE;EACE;AXm+CJ;AYp7CE;EACE;AZs7CJ;AYj7CE;;;EAGE;AZm7CJ;AYh7CE;EACE;AZk7CJ;AY/6CE;;EAEE;AZi7CJ;AY96CE;;EAEE;EACA;AZg7CJ;AY59CE;EAiDI,0BA/Ba;AZ68CnB;AY16CE;EACE,0BApCe;AZg9CnB;AYz6CE;EAOI;AZq6CN;AYr+CE;EA2EI;AZ65CN;AYx+CE;EAoFM;AZu5CR;AYr0CE;EACE,mCA9MA;AZqhDJ;AYp0CE;;EAEE,kCAViB;AZg1CrB;AYn0CE;;EAEE;AZq0CJ;AYl0CE;;EAEE;AZo0CJ;AYj0CE;;EAEE,mBAxBc;AZ21ClB;AYh0CE;;EAEE,mBA5BuB;AZ81C3B;AYviDE;EACE;EACA;AZyiDJ;AYtiDE;EAII;AZqiDN;AY5hDE;EACE;AZ8hDJ;AY5gDE;;EASI;AZugDN;AYzhDE;EASA;IASI;EZ2gDJ;AACF;AYn7CE;EmCCA;EnCCE;EACA;AZq7CJ;AYp3CE;EACE,mCA9MA;AZokDJ;AYn3CE;;EAEE,kCAViB;AZ+3CrB;AYl3CE;;EAEE;AZo3CJ;AYj3CE;;EAEE;AZm3CJ;AYh3CE;;EAEE,mBAxBc;AZ04ClB;AY/2CE;;EAEE,mBA5BuB;AZ64C3B;AYtlDE;EACE;EACA;AZwlDJ;AYrlDE;EAII;AZolDN;AY3kDE;EACE;AZ6kDJ;AY3jDE;;EASI;AZsjDN;AYxkDE;EASA;IASI;EZ0jDJ;AACF;AY95CE;EACE,kCA9MA;AZ8mDJ;AY75CE;;EAEE,kCAViB;AZy6CrB;AY55CE;;EAEE;AZ85CJ;AY35CE;;EAEE;AZ65CJ;AY15CE;;EAEE,mBAxBc;AZo7ClB;AYz5CE;;EAEE,mBA5BuB;AZu7C3B;AYhoDE;EACE;EACA;AZkoDJ;AY/nDE;EAII;AZ8nDN;AYrnDE;EACE;AZunDJ;AYrmDE;;EASI;AZgmDN;AYlnDE;EASA;IASI;EZomDJ;AACF;AY9/CE;EmCbA;A/C8gDF;AY7/CE;EACE;AZ+/CJ;AY7/CI;EACE;AZ+/CN;AY5/CI;EACE;AZ8/CN;AY1/CE;EACE;AZ4/CJ;Aa3qDE;EkCiJA;ElC/IE;EACA;Ab6qDJ;AiDrrDE;EACE;AjDurDJ;AiDprDE;EACE;AjDsrDJ;AcprDE;EAEE;EACA;AdqrDJ;A+C9hDE;EAXA;A/C4iDF;AcrrDE;EACE;AdurDJ;AkDvsDM;EpCoBF;AdsrDJ;AcjrDE;EACE;IAEE;EdkrDJ;AACF;Ac/qDE;EACE;AdirDJ;Ac9qDE;;EAEE;AdgrDJ;Ac7qDE;EACE;Ad+qDJ;Ac7qDI;;EAEE;Ad+qDN;AclpDI;EACE,YALe;AdypDrB;AclpDM;EACE,YAVY;Ad8pDpB;AetsDE;EACE,yBAZA;AfqtDJ;AetsDE;EACE,yBAhBA;AfwtDJ;AersDE;EACE,cAnBoB;Af0tDxB;AersDI;EACE,cAhBqB;AfutD3B;AepsDI;EACE,cAnBmB;AfytDzB;AelsDE;EACE,cA9BqB;AfkuDzB;AejsDE;EACE,qCA9BA;AfiuDJ;Ae/rDI;EACE,yBAhCsB;AfiuD5B;Ae/rDM;EACE,yBArCmB;AfsuD3B;Ae9rDM;EACE,yBAxCiB;AfwuDzB;Ae1rDI;EACE,cA9CsB;Af0uD5B;AezrDI;EACE,cApDqB;Af+uD3B;AexrDI;EACE,cAvDmB;AfivDzB;AelrDI;EACE,cAhEmB;AfovDzB;AelrDM;;EAEE,cApEiB;AfwvDzB;AehrDI;;EAEE,yBA1EmB;Af4vDzB;Ae9qDE;EACE,cA/EqB;Af+vDzB;AgB1wDI;EACE,0BANU;AhBkxDhB;AgBzwDI;EACE,0BAVU;AhBqxDhB;AgBxwDI;EACE,qCAZF;AhBsxDJ;AgBvwDI;EmCzBF;EACA;EACA;AnDmyDF;AoD7xDI;EACE,qCAJF;ApDmyDJ;AoD5xDI;EDZF;EACA;EACA;AnD2yDF;AiB7xDI;EACE,qCATF;AjBwyDJ;AiB5xDI;EACE,qCAXF;AjByyDJ;AiB3xDI;EACE,qCAbF;AjB0yDJ;AiBzxDM;EACE,0BAjBiB;AjB4yDzB;AiBxxDM;EACE;AjB0xDR;AkBtyDI;EACE,0BAXF;AlBmzDJ;AkBryDI;EACE,0BAbF;AlBozDJ;AkBnyDM;EACE,cAjBkB;AlBszD1B;AkBlyDM;EACE,cApBiB;AlBwzDzB;AkBjyDM;EACE,cAvBe;AlB0zDvB;AkB7xDM;EACE,cA9Be;AlB6zDvB;AkB1xDM;EACE,0BA3CiB;AlBu0DzB;AkBzxDM;EACE,0BAtCJ;AlBi0DJ;AqD/0DI;EACE;ArDi1DN;AqD90DI;EACE;ArDg1DN;AqD70DI;EACE;ArD+0DN;AqBn1DE;EACE;ArBq1DJ;AqBl1DE;;EAEE;ArBo1DJ;AqBj1DE;EACE;ArBm1DJ;AsDv2DE;EjCuBI;ArBm1DN;AsD12DE;EjCuBI;ArBm1DN;AsDt2DE;EjCmBI;ArBs1DN;AsDr2DE;EjCeI;ArBy1DN;AsDl2DE;EjCSI;ArB41DN;AqBv0DE;EACE;ArBy0DJ;AqBt0DE;;EAEE;ArBw0DJ;AqBr0DE;EACE;ArBu0DJ;AgCv3DI;EACE;AhCy3DN;AgCt3DI;EACE;AhCw3DN;AgCr3DI;EACE;AhCu3DN;AgCp3DI;EACE;EACA;AhCs3DN;AgC/2DI;;;;;EACE;AhCq3DN;AgCh3DI;EACE;AhCk3DN;AsB/4DE;EAEE;AtBg5DJ;A+CtvDE;EAXA;A/CowDF;AsBh5DE;EACE;EACA;AtBk5DJ;AsB/4DM;;;EAGE;AtBi5DR;AsB54DE;;EAEE;AtB84DJ;AsBv4DI;;;;EACE;AtB44DN;AuBx6DE;EACE;AvB06DJ;AuBv6DE;;EAEE;AvBy6DJ;AuBt6DE;;EAEE;EACA;AvBw6DJ;AuBr6DE;;EAEE;AvBu6DJ;AuBn6DI;;;;EAIE;AvBq6DN;AuB94DI;EACE,gBALK;AvBq5DX;AuDt7DE;EACE;AvDy7DJ;AuDt7DE;EACE;AvDw7DJ;AuDr7DE;EACE;AvDu7DJ;AuDn7DI;EACE;AvDq7DN;AuDl7DI;EACE;AvDo7DN;AuDj7DI;EACE;AvDm7DN;AuD96DI;EACE;AvDg7DN;AuD76DI;EACE;AvD+6DN;AuD56DI;EACE;AvD86DN;AwD/9DI;EACE;AxDi+DN;AwD99DI;EACE;AxDg+DN;AwD79DI;EACE;AxD+9DN;AwBx9DE;EACE;AxB09DJ;AwB/+DE;EACE;AxBi/DJ;AwB9+DE;;EAIE;AxB8+DJ;AwBt/DE;EACE;AxBw/DJ;AwBr/DE;;EAIE;AxBq/DJ;AwB7/DE;EACE;AxB+/DJ;AwB5/DE;;EAIE;AxB4/DJ;AwB39DM;;EAEE;AxB69DR;AwB19DM;;EAEE;AxB49DR;AwBz9DM;EACE;AxB29DR;AwBr9DI;EACE;AxBu9DN;AyBxgEE;EACE;AzB0gEJ;AyBvgEE;EACE;AzBygEJ;AyBtgEE;EACE;AzBwgEJ;AyBrgEE;EACE;AzBugEJ;AyBpgEE;EACE;AzBsgEJ;A+C/3DE;EAXA;A/C64DF;AyBtgEI;EACE;AzBwgEN;AyBlgEM;EACE;AzBogER;AyBjgEM;EACE;AzBmgER;AyBhgEM;EACE;AzBkgER;AyB9/DI;EACE;AzBggEN;AyB7/DI;EACE;AzB+/DN;AyDziEE;EACE,yBALmC;EAMnC;AzD2iEJ;AyDxiEE;EACE,uBAXwB;EAYxB;AzD0iEJ;AyDxiEI;EACE,uBAb2B;AzDujEjC;AyDviEI;EV6HF;A/C66DF;AyDniEE;EACE,2CAvBmB;AzD4jEvB;AyDniEI;EACE,0CA1BiB;EA2BjB;AzDqiEN;AyDjiEE;EACE,0CAhCmB;EAiCnB;AzDmiEJ;AyDjiEI;EACE;EACA,2CArCiB;AzDwkEvB;AyD/hEE;EAQI;AzD0hEN;A0BnlEI;EACE;A1BqlEN;A0BllEI;EAGE;A1BklEN;A0B/kEI;EAGE;A1B+kEN;A0B5lEI;EACE;A1B8lEN;A0B3lEI;EAGE;A1B2lEN;A0BxlEI;EAGE;A1BwlEN;A0BrmEI;EACE;A1BumEN;A0BpmEI;EAGE;A1BomEN;A0BjmEI;EAGE;A1BimEN;A0B5jEI;EAGE,uBAhBqB;A1B4kE3B;A0BxjEE;EqB2FA;ErBzFE;A1B0jEJ;A0BvjEE;EACE,qCA3BoB;A1BolExB;A2B/kEE;EACE,qCAbqB;A3B8lEzB;A2B7nEE;;;EAGE;A3B+nEJ;A2B5nEE;EACE;A3B8nEJ;A2B3nEE;EAGE,yCADQ;A3B4nEZ;A2BxoEE;;;EAGE;A3B0oEJ;A2BvoEE;EACE;A3ByoEJ;A2BtoEE;EAGE,yCADQ;A3BuoEZ;A2BnpEE;;;EAGE;A3BqpEJ;A2BlpEE;EACE;A3BopEJ;A2BjpEE;EAGE,wCADQ;A3BkpEZ;A2B/lEI;;EACE,qCAhC2B;A3BkoEjC;A2B7lEI;;;EAGE,qCAvCwB;A3BsoE9B;A2B3lEM;EACE,qCA5CsB;A3ByoE9B;A2BvlEI;EAGE,qCADQ;A3BwlEd;A2B7kEM;;EAEE,qCA/DJ;A3B8oEJ;A2B3kEQ;;EAEE,qCAnEN;A3BgpEJ;A2BvkEM;EACE,iCAhFiB;EAiFjB;A3BykER;A2BpkEQ;EACE,iCAtFuB;A3B4pEjC;A2BnkEQ;EACE,iCAzFoB;A3B8pE9B;A2B/jEE;EACE,gCAzFA;A3B0pEJ;A2BxjEE;EACE;EAIA;A3BujEJ;A2B7iEE;EACE;A3B+iEJ;A4B/rEI;EAIE;A5B8rEN;A4B3rEI;EACE;A5B6rEN;A4BvrEI;EACE;IACE;E5ByrEN;AACF;A4BtrEI;;EAIE;A5BsrEN;A4BnrEI;EAGE;EACA;A5BmrEN;A4BhrEI;;;EAGE;EACA;A5BkrEN;A4B9qEM;EACE;A5BgrER;A4B7qEM;;;EAGE;EACA;A5B+qER;A4B1qEM;EACE;A5B4qER;A4BzqEM;;;EAGE;EACA;A5B2qER;A4BvqEI;EACE;EACA;A5ByqEN;A4BtqEI;EACE;A5BwqEN;A4BrqEI;EACE;A5BuqEN;A4BnqEE;EACE;A5BqqEJ;A4BlqEE;EACE;A5BoqEJ;A4BjqEE;;;EAGE;A5BmqEJ;A4B1nEI;EACE,YANK;A5BkoEX;A4BznEI;;EAEE;A5B4nEN;A4BvnEI;EACE;EACA;A5B0nEN;A4BrnEM;EACE;A5BwnER;A4BnnEI;EACE;A5BsnEN;A0D3xEE;EAYI;A1DmxEN;A6B3xEE;;EAEE,4CAJc;A7BiyElB;A6BzxEI;;EAEE,yCAVY;EAWZ;A7B2xEN;A6BvxEE;EACE;A7ByxEJ;A6BvxEI;EACE;A7ByxEN;A6BrxEE;EACE;A7BuxEJ;A6BpxEE;EACE;A7BsxEJ;A6BlxEE;;EAEE;EACA;A7BoxEJ;A6BtuEM;;;;;EACE;A7B4uER;A6BvvEE;EACE;A7ByvEJ;A6B1vEE;EACE;A7B4vEJ;A6BnvEM;;;;;EACE;A7ByvER;A6BpwEE;EACE;A7BswEJ;A6BvwEE;EACE;A7BywEJ;A6BhwEM;;;;;EACE;A7BswER;A6BjxEE;EACE;A7BmxEJ;A6BpxEE;EACE;A7BsxEJ;A6B7wEM;;;;;EACE;A7BmxER;A6BxwEE;EACE;A7B0wEJ;A6BtwEE;EACE;A7BwwEJ;A6BtwEI;EACE;A7BwwEN;A6BnwEE;;;;;;;EAIE;A7BwwEJ;A6BrwEE;;;EAGE;EACA;A7BuwEJ;A6BlwEE;;;;;EAIE;EACA;A7BqwEJ;A6BpzEM;;;;;EACE;A7B0zER;A6B/yEE;EACE;A7BizEJ;A6B7yEE;EACE;A7B+yEJ;A6B7yEI;EACE;A7B+yEN;A6B1yEE;;;;;;;EAIE;A7B+yEJ;A6B5yEE;;;EAGE;EACA;A7B8yEJ;A6BzyEE;;;;;EAIE;EACA;A7B4yEJ;A6B31EM;;;;;EACE;A7Bi2ER;A6Bt1EE;EACE;A7Bw1EJ;A6Bp1EE;EACE;A7Bs1EJ;A6Bp1EI;EACE;A7Bs1EN;A6Bj1EE;;;;;;;EAIE;A7Bs1EJ;A6Bn1EE;;;EAGE;EACA;A7Bq1EJ;A6Bh1EE;;;;;EAIE;EACA;A7Bm1EJ;A8B76EE;EACE;EACA;A9B+6EJ;A8B76EI;EApCF;EACA;A9Bo9EF;A8B76EI;EAxCF;EACA;A9Bw9EF;A8B76EI;EA5CF;EACA;A9B49EF;A8Bx9EE;;;EAGE;A9B09EJ;A8Bv9EE;;;;;EAKE;A9By9EJ;A8Bt9EE;EACE;A9Bw9EJ;A8Br/EE;EACE,gBA6Ee;A9B06EnB;A8Br/EE;EACE,YA0Ee;A9B86EnB;A8Bl6EI;EA1FF;IACE,gBA+Ec;E9Bi7EhB;E8B9/EA;IACE,YA4Ec;E9Bo7EhB;AACF;A+B5/EE;EACE;A/B8/EJ;AoCrgFE;EACE;ApCugFJ;AoCpgFE;;EAEE;ApCsgFJ;AoC9+EI;EACE,gBALK;ApCq/EX;AmC/gFE;EAGE;EACA;EY6IF;A/Co4EF;AmC5gFE;EACE;AnC8gFJ;AAtgFE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;AAwgFJ;AAtgFE;EAEE;AAwgFJ;AA1gFE;;EAEE;AAwgFJ;AAtgFE;EACE;EACA;AAwgFJ;AAtgFE;;;;EAIE;AAwgFJ;AAtgFE;;EAEE;AAwgFJ;AAtgFE;;;EAGE;AAwgFJ;AAtgFE;;;;EAIE;AAwgFJ;AAtgFE;;;;;;;EAOE;AAwgFJ;AAtgFE;EACE;AAwgFJ;AAtgFE;EACE;EACA;EACA;AAwgFJ;AAtgFE;EACE;EACA;EACA;AAwgFJ;AAtgFE;;EAEE;AAwgFJ;AAtgFE;EACE;AAwgFJ;AAtgFE;EACE;AAwgFJ;AAtgFE;EACE;AAwgFJ;A2C9gFE;EACE;A3CihFJ;A2C/gFI;EACE;A3CihFN;A2C9gFI;EACE;A3CghFN;ACliFE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;ADoiFJ;ACliFE;EACE;ADoiFJ;ACriFE;EACE;ADoiFJ;ACliFE;EACE;EACA;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;;EAEE;ADoiFJ;ACliFE;;;;EAIE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;;;;;EAKE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;EACA;EACA;EACA;ADoiFJ;ACliFE;EACE;EACA;EACA;EACA;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;ACliFE;EACE;ADoiFJ;A2CpsFE;EAEE;EAIA;A3CksFJ;A2CrsFI;EACE;A3CusFN;A2CjsFE;EACE;A3CmsFJ;A2ChsFE;EACE;EACA;A3CksFJ;A2CjsFI;EACE;A3CmsFN;A2C/rFE;;EAEE;A3CisFJ;A2C9rFE;EACE;A3CgsFJ;A2C9rFE;EACE;A3CgsFJ;A2C7rFE;EACE;A3C+rFJ;A2C7rFE;EACE;A3C+rFJ;A2C1rFE;EACE;EACA;A3C4rFJ;A2C1rFI;EACE;EACA;A3C4rFN;A2ClrFM;EACE;EACA;A3CorFR;A2CtrFM;EACE;EACA;A3CwrFR;A2C1rFM;EACE;EACA;A3C4rFR;A4ClwFE;EAII;A5CiwFN;AiCnwFE;EACE;AjCqwFJ;AiCnwFI;EAEE;AjCowFN;AiChwFI;EACE;AjCkwFN;AiC/vFI;EACE;EACA;AjCiwFN;AiC9vFI;EACE;AjCgwFN;AiC5vFE;EACE;AjC8vFJ;AiC3vFE;EACE;AjC6vFJ;AiC1vFE;EACE;AjC4vFJ;AkChyFE;EACE;AlCkyFJ;AkC/xFE;EACE;AlCiyFJ;A6C5xFE;EACE;A7C8xFJ;A6C5xFI;EACE;A7C8xFN;A6C1xFE;EACE,cAZe;A7CwyFnB;A6CzxFE;;EAEE;A7C2xFJ;A6CnxFE;;;;EAIE;A7CqxFJ;A6ClxFE;;EAEE;A7CoxFJ;A6C/wFI;;EACE,mBAxCa;A7C0zFnB;A8C3zFE;EAIE;EACA;A9C0zFJ;A8CnzFI;ECkIF;A/CorFF;A8CtzFI;ECkIF;A/CurFF;A8CzzFI;ECkIF;A/C0rFF;A8C5zFI;ECkIF;A/C6rFF;A8C/zFI;ECkIF;A/CgsFF;A8Cl0FI;ECkIF;A/CmsFF;A8Cr0FI;ECkIF;A/CssFF;A8Cx0FI;ECkIF;A/CysFF;A8C30FI;ECkIF;A/C4sFF;A8C90FI;ECkIF;A/C+sFF;A8Cj1FI;ECkIF;A/CktFF;A8Cp1FI;ECkIF;A/CqtFF;A8Cv1FI;ECkIF;A/CwtFF;A8C11FI;ECkIF;A/C2tFF;A8C71FI;ECkIF;A/C8tFF;A8Ch2FI;ECkIF;A/CiuFF;A8Cn2FI;ECkIF;A/CouFF;A8Ct2FI;ECkIF;A/CuuFF;A8Cz2FI;ECkIF;A/C0uFF;A8C52FI;ECkIF;A/C6uFF;A8C/2FI;ECkIF;A/CgvFF;A8Cl3FI;ECkIF;A/CmvFF;A8Cr3FI;ECkIF;A/CsvFF;A8Cx3FI;ECkIF;A/CyvFF;A8C33FI;ECkIF;A/C4vFF;A8Cv3FI;EACE;A9Cy3FN;AgDn5FE;EAEE;EACA;AhDq5FJ;A+CzvFE;EAXA;A/CuwFF;AgDj5FI;EACE;AhDm5FN;AgDj5FM;EACE;AhDm5FR;AEr0FE;EACE;AFu0FJ;AEh0FE;EACE;AFk0FJ;AE9zFI;EACE;AFg0FN;AE5zFE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF8zFJ;AE3zFE;;EAEE;AF6zFJ;AExzFE;EAEE;AFyzFJ;AE96FE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AF27Fb;AE56FI;EACE;AF86FN;AEz6FI;EACE;AF26FN;AEt6FI;EACE;AFw6FN;AEn6FI;EACE;EACA;AFq6FN;AEh6FI;EACE;AFk6FN;AE75FI;EACE;EACA;AF+5FN;AEz5FM;EACE;AF25FR;AEt5FM;EACE;EACA;AFw5FR;AEn5FM;EACE;AFq5FR;AEh5FM;EACE;EACA;AFk5FR;AEr9FE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AFm+Ff;AEn9FI;EACE;AFq9FN;AEh9FI;EACE;AFk9FN;AE78FI;EACE;AF+8FN;AE18FI;EACE;EACA;AF48FN;AEv8FI;EACE;AFy8FN;AEp8FI;EACE;EACA;AFs8FN;AEh8FM;EACE;AFk8FR;AE77FM;EACE;EACA;AF+7FR;AE17FM;EACE;AF47FR;AEv7FM;EACE;EACA;AFy7FR;AE5/FE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFwgGb;AE1/FI;EACE;AF4/FN;AEv/FI;EACE;AFy/FN;AEp/FI;EACE;AFs/FN;AEj/FI;EACE;EACA;AFm/FN;AE9+FI;EACE;AFg/FN;AE3+FI;EACE;EACA;AF6+FN;AEv+FM;EACE;AFy+FR;AEp+FM;EACE;EACA;AFs+FR;AEj+FM;EACE;AFm+FR;AE99FM;EACE;EACA;AFg+FR;AEt5FE;EACE;EACA;AFw5FJ;AsC7gGI;EpCwHE;EACA;AFw5FN;AEn5FI;EACE;EACA;AFs5FN;AEj5FI;EACE;EACA;AFm5FN;AE94FI;EAWI;EAMF;AFi4FN;AKrkGE;E0CkJA;E1ChJE;EACA;ALukGJ;AMr/FE;EAKE;EACA;ANm/FJ;AMnhGE;EACE;ANqhGJ;AMnhGE;EACE;ANqhGJ;AMnhGE;EACE;ANqhGJ;AMjhGI;EAEE;ANkhGN;AMrlGE;EACE;ANulGJ;AMplGE;EACE;ANslGJ;AMnlGE;EACE;ANqlGJ;AMllGE;EACE;ANolGJ;AMngGI;EACE,YAxGY;EAyGZ;ANqgGN;AMjgGE;EACE;ANmgGJ;AM9/FE;EACE;ANggGJ;AM7/FE;EAEE;EACA;AN8/FJ;AMzjGE;EACE;AN2jGJ;AMzjGE;EACE;AN2jGJ;AMzjGE;EACE;AN2jGJ;AMvjGI;EAEE;ANwjGN;AMrkGE;EACE;ANukGJ;AMrkGE;EACE;ANukGJ;AMrkGE;EACE;ANukGJ;AMnkGI;EAEE;ANokGN;AMtmGE;EAXA,0CADmB;ANqnGrB;AMrmGE;EAfA,oCADmB;ANwnGrB;AMpmGE;EAnBA,0CADmB;AN2nGrB;A+Cx/FE;EAXA;A/CsgGF;A+C3/FE;EAXA;A/CygGF;A+C9/FE;EAXA;A/C4gGF;A+CjgGE;EAXA;A/C+gGF;A+CpgGE;EAXA;A/CkhGF;A+CvgGE;EAXA;A/CqhGF;A+C1gGE;EAXA;A/CwhGF;A+C7gGE;;EAXA;A/C4hGF;AO1pGI;;EACE;AP6pGN;AOzpGE;EACE;AP2pGJ;AOzpGI;EACE;AP2pGN;AOvpGE;EACE;EACA;APypGJ;AOvpGI;EACE;APypGN;AOrpGE;EACE;APupGJ;AOppGE;EACE;EACA;APspGJ;AOlpGI;EACE;EACA;EACA;APopGN;AOhpGE;EACE;EACA;APkpGJ;AOhpGI;EACE;APkpGN;AO9oGE;EACE;EACA;APgpGJ;AO9oGI;EACE;APgpGN;AO7oGI;EACE;AP+oGN;AO3oGE;;EAEE;AP6oGJ;AQ/tGE;EAEE;EACA;ARguGJ;A+CvkGE;EAXA;A/CqlGF;A+C1kGE;EAXA;A/CwlGF;AQ9tGE;EACE;ARguGJ;AS9tGE;EACE;ATguGJ;AS7tGE;EACE,aAdoB;AT6uGxB;AS5tGE;EAGE;AT4tGJ;ASztGE;EACE,yBAxBoB;ATmvGxB;ASvtGI;EACE;ATytGN;ASttGI;EACE;ATwtGN;ASrtGI;EACE;ATutGN;AShtGM;EACE,yBAtCW;ATwvGnB;AS7sGM;EACE,qBA5CW;AT2vGnB;AS3sGI;EACE;AT6sGN;ASvsGE;EACE;ATysGJ;ASpsGI;;EACE;ATusGN;ASpsGI;;EACE;ATusGN;ASpsGI;;EACE;ATusGN;AU/uGE;EA5CA,yBAyCwB;EAxCxB,YAyCwB;AVqvG1B;AU5xGE;EACE,YAsCsB;EArCtB;AV8xGJ;AUnvGM;EqCmGJ;A/CmpGF;AUlvGM;EACE;AVovGR;AUhvGI;EACE;AVkvGN;AU/uGI;EACE;AVivGN;AU5uGI;EAnEF,yBAyBE;EAxBF,YAuBwB;AV2xG1B;AUhzGE;EACE,YAoBsB;EAnBtB;AVkzGJ;AU5xGE;EAVA,0CADmB;AV0yGrB;AUnvGI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVsyG1B;AU3zGE;EACE,YAoBsB;EAnBtB;AV6zGJ;AUvyGE;EAVA,0CADmB;AVqzGrB;AU1vGI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AVizG1B;AUt0GE;EACE,0BAoBsB;EAnBtB;AVw0GJ;AUlzGE;EAVA,oCADmB;AVg0GrB;AWh1GE;EACE;AXk1GJ;AW/0GE;;;;EAIE;AXi1GJ;AW90GE;;EAEE;AXg1GJ;AW70GE;EACE;AX+0GJ;AW50GE;EACE;AX80GJ;AY/xGE;EACE;AZiyGJ;AY5xGE;;;EAGE;AZ8xGJ;AY3xGE;EACE;AZ6xGJ;AY1xGE;;EAEE;AZ4xGJ;AYzxGE;;EAEE;EACA;AZ2xGJ;AYv0GE;EAiDI,+BA/Ba;AZwzGnB;AYrxGE;EACE,+BApCe;AZ2zGnB;AYpxGE;EAOI;AZgxGN;AYh1GE;EA2EI;AZwwGN;AYn1GE;EAoFM;AZkwGR;AYhrGE;EACE,kCA9MA;AZg4GJ;AY/qGE;;EAEE,kCAViB;AZ2rGrB;AY9qGE;;EAEE;AZgrGJ;AY7qGE;;EAEE;AZ+qGJ;AY5qGE;;EAEE,mBAxBc;AZssGlB;AY3qGE;;EAEE,mBA5BuB;AZysG3B;AYl5GE;EACE;EACA;AZo5GJ;AYj5GE;EAII;AZg5GN;AYv4GE;EACE;AZy4GJ;AYv3GE;;EASI;AZk3GN;AYp4GE;EASA;IASI;EZs3GJ;AACF;AY9xGE;EmCCA;EnCCE;EACA;AZgyGJ;AY/tGE;EACE,oCA9MA;AZ+6GJ;AY9tGE;;EAEE,kCAViB;AZ0uGrB;AY7tGE;;EAEE;AZ+tGJ;AY5tGE;;EAEE;AZ8tGJ;AY3tGE;;EAEE,mBAxBc;AZqvGlB;AY1tGE;;EAEE,mBA5BuB;AZwvG3B;AYj8GE;EACE;EACA;AZm8GJ;AYh8GE;EAII;AZ+7GN;AYt7GE;EACE;AZw7GJ;AYt6GE;;EASI;AZi6GN;AYn7GE;EASA;IASI;EZq6GJ;AACF;AYzwGE;EACE,kCA9MA;AZy9GJ;AYxwGE;;EAEE,kCAViB;AZoxGrB;AYvwGE;;EAEE;AZywGJ;AYtwGE;;EAEE;AZwwGJ;AYrwGE;;EAEE,mBAxBc;AZ+xGlB;AYpwGE;;EAEE,mBA5BuB;AZkyG3B;AY3+GE;EACE;EACA;AZ6+GJ;AY1+GE;EAII;AZy+GN;AYh+GE;EACE;AZk+GJ;AYh9GE;;EASI;AZ28GN;AY79GE;EASA;IASI;EZ+8GJ;AACF;AYz2GE;EmCbA;A/Cy3GF;AYx2GE;EACE;AZ02GJ;AYx2GI;EACE;AZ02GN;AYv2GI;EACE;AZy2GN;AYr2GE;EACE;AZu2GJ;AathHE;EkCiJA;ElC/IE;EACA;AbwhHJ;AiDhiHE;EACE;AjDkiHJ;AiD/hHE;EACE;AjDiiHJ;Ac/hHE;EAEE;EACA;AdgiHJ;A+Cz4GE;EAXA;A/Cu5GF;AchiHE;EACE;AdkiHJ;AkDljHM;EpCoBF;AdiiHJ;Ac5hHE;EACE;IAEE;Ed6hHJ;AACF;Ac1hHE;EACE;Ad4hHJ;AczhHE;;EAEE;Ad2hHJ;AcxhHE;EACE;Ad0hHJ;AcxhHI;;EAEE;Ad0hHN;Ae3iHE;EACE,+BAZA;AfyjHJ;Ae1iHE;EACE,+BAhBA;Af4jHJ;AeziHE;EACE,cAnBoB;Af8jHxB;AeziHI;EACE,cAhBqB;Af2jH3B;AexiHI;EACE,cAnBmB;Af6jHzB;AetiHE;EACE,cA9BqB;AfskHzB;AeriHE;EACE,uBA9BA;AfqkHJ;AeniHI;EACE,yBAhCsB;AfqkH5B;AeniHM;EACE,yBArCmB;Af0kH3B;AeliHM;EACE,yBAxCiB;Af4kHzB;Ae9hHI;EACE,cA9CsB;Af8kH5B;Ae7hHI;EACE,cApDqB;AfmlH3B;Ae5hHI;EACE,cAvDmB;AfqlHzB;AethHI;EACE,cAhEmB;AfwlHzB;AethHM;;EAEE,cApEiB;Af4lHzB;AephHI;;EAEE,yBA1EmB;AfgmHzB;AelhHE;EACE,cA/EqB;AfmmHzB;AgB9mHI;EACE,+BANU;AhBsnHhB;AgB7mHI;EACE,+BAVU;AhBynHhB;AgB5mHI;EACE,0CAZF;AhB0nHJ;AgB3mHI;EmCzBF;EACA;EACA;AnDuoHF;AoDjoHI;EACE,0CAJF;ApDuoHJ;AoDhoHI;EDZF;EACA;EACA;AnD+oHF;AiBjoHI;EACE,0CATF;AjB4oHJ;AiBhoHI;EACE,2CAXF;AjB6oHJ;AiB/nHI;EACE,0CAbF;AjB8oHJ;AiB7nHM;EACE,+BAjBiB;AjBgpHzB;AiB5nHM;EACE;AjB8nHR;AkB1oHI;EACE,+BAXF;AlBupHJ;AkBzoHI;EACE,YAbF;AlBwpHJ;AkBvoHM;EACE,cAjBkB;AlB0pH1B;AkBtoHM;EACE,cApBiB;AlB4pHzB;AkBroHM;EACE,cAvBe;AlB8pHvB;AkBjoHM;EACE,cA9Be;AlBiqHvB;AkB9nHM;EACE,+BA3CiB;AlB2qHzB;AkB7nHM;EACE,gCAtCJ;AlBqqHJ;AqDnrHI;EACE;ArDqrHN;AqDlrHI;EACE;ArDorHN;AqDjrHI;EACE;ArDmrHN;AqBvrHE;EACE;ArByrHJ;AqBtrHE;;EAEE;ArBwrHJ;AqBrrHE;EACE;ArBurHJ;AsD3sHE;EjCuBI;ArBurHN;AsD9sHE;EjCuBI;ArBurHN;AsD1sHE;EjCmBI;ArB0rHN;AsDzsHE;EjCeI;ArB6rHN;AsDtsHE;EjCSI;ArBgsHN;AqBtrHQ;EACE,0BsCbU;A3DqsHpB;AqBrrHQ;EACE,0BsCfW;A3DssHrB;AqBjrHE;EACE;ArBmrHJ;AqBhrHE;;EAEE;ArBkrHJ;AqB/qHE;EACE;ArBirHJ;AgCjuHI;EACE;AhCmuHN;AgChuHI;EACE;AhCkuHN;AgC/tHI;EACE;AhCiuHN;AgC9tHI;EACE;EACA;AhCguHN;AgCztHI;;;;;EACE;AhC+tHN;AgC1tHI;EACE;AhC4tHN;AsBzvHE;EAEE;AtB0vHJ;A+ChmHE;EAXA;A/C8mHF;AsB1vHE;EACE;EACA;AtB4vHJ;AsBzvHM;;;EAGE;AtB2vHR;AsBtvHE;;EAEE;AtBwvHJ;AsBjvHI;;;;EACE;AtBsvHN;AuBlxHE;EACE;AvBoxHJ;AuBjxHE;;EAEE;AvBmxHJ;AuBhxHE;;EAEE;EACA;AvBkxHJ;AuB/wHE;;EAEE;AvBixHJ;AuB7wHI;;;;EAIE;AvB+wHN;AuD7xHE;EACE;AvD+xHJ;AuD5xHE;EACE;AvD8xHJ;AuD3xHE;EACE;AvD6xHJ;AuDzxHI;EACE;AvD2xHN;AuDxxHI;EACE;AvD0xHN;AuDvxHI;EACE;AvDyxHN;AuDpxHI;EACE;AvDsxHN;AuDnxHI;EACE;AvDqxHN;AuDlxHI;EACE;AvDoxHN;AwDr0HI;EACE;AxDu0HN;AwDp0HI;EACE;AxDs0HN;AwDn0HI;EACE;AxDq0HN;AwB9zHE;EACE;AxBg0HJ;AwBr1HE;EACE;AxBu1HJ;AwBp1HE;;EAIE;AxBo1HJ;AwB51HE;EACE;AxB81HJ;AwB31HE;;EAIE;AxB21HJ;AwBn2HE;EACE;AxBq2HJ;AwBl2HE;;EAIE;AxBk2HJ;AwBj0HM;;EAEE;AxBm0HR;AwBh0HM;;EAEE;AxBk0HR;AwB/zHM;EACE;AxBi0HR;AwB3zHI;EACE;AxB6zHN;AyB92HE;EACE;AzBg3HJ;AyB72HE;EACE;AzB+2HJ;AyB52HE;EACE;AzB82HJ;AyB32HE;EACE;AzB62HJ;AyB12HE;EACE;AzB42HJ;A+CruHE;EAXA;A/CmvHF;AyB52HI;EACE;AzB82HN;AyBx2HM;EACE;AzB02HR;AyBv2HM;EACE;AzBy2HR;AyBt2HM;EACE;AzBw2HR;AyBp2HI;EACE;AzBs2HN;AyBn2HI;EACE;AzBq2HN;AyD/4HE;EACE,yBALmC;EAMnC;AzDi5HJ;AyD94HE;EACE,yBAXwB;EAYxB;AzDg5HJ;AyD94HI;EACE,yBAb2B;AzD65HjC;AyD74HI;EV6HF;A/CmxHF;AyDz4HE;EACE,iDAvBmB;AzDk6HvB;AyDz4HI;EACE,gDA1BiB;EA2BjB;AzD24HN;AyDv4HE;EACE,gDAhCmB;EAiCnB;AzDy4HJ;AyDv4HI;EACE;EACA,iDArCiB;AzD86HvB;AyDr4HE;EAQI;AzDg4HN;A0Bz7HI;EACE;A1B27HN;A0Bx7HI;EAGE;A1Bw7HN;A0Br7HI;EAGE;A1Bq7HN;A0Bl8HI;EACE;A1Bo8HN;A0Bj8HI;EAGE;A1Bi8HN;A0B97HI;EAGE;A1B87HN;A0B38HI;EACE;A1B68HN;A0B18HI;EAGE;A1B08HN;A0Bv8HI;EAGE;A1Bu8HN;A0Bl6HI;EAGE,uBAhBqB;A1Bk7H3B;A0B95HE;EqB2FA;ErBzFE;A1Bg6HJ;A0B75HE;EACE,0CA3BoB;A1B07HxB;A2Br7HE;EACE,0CAbqB;A3Bo8HzB;A2Bn+HE;;;EAGE;A3Bq+HJ;A2Bl+HE;EACE;A3Bo+HJ;A2Bj+HE;EAGE,wCADQ;A3Bk+HZ;A2B9+HE;;;EAGE;A3Bg/HJ;A2B7+HE;EACE;A3B++HJ;A2B5+HE;EAGE,0CADQ;A3B6+HZ;A2Bz/HE;;;EAGE;A3B2/HJ;A2Bx/HE;EACE;A3B0/HJ;A2Bv/HE;EAGE,wCADQ;A3Bw/HZ;A2Br8HI;;EACE,0CAhC2B;A3Bw+HjC;A2Bn8HI;;;EAGE,0CAvCwB;A3B4+H9B;A2Bj8HM;EACE,0CA5CsB;A3B++H9B;A2B77HI;EAGE,2CADQ;A3B87Hd;A2Bn7HM;;EAEE,uBA/DJ;A3Bo/HJ;A2Bj7HQ;;EAEE,0CAnEN;A3Bs/HJ;A2B76HM;EACE,sCAhFiB;EAiFjB;A3B+6HR;A2B16HQ;EACE,sCAtFuB;A3BkgIjC;A2Bz6HQ;EACE,sCAzFoB;A3BogI9B;A2Br6HE;EACE,sCAzFA;A3BggIJ;A2B95HE;EACE;EAIA;A3B65HJ;A2Bn5HE;EACE;A3Bq5HJ;A4BriII;EAIE;A5BoiIN;A4BjiII;EACE;A5BmiIN;A4B7hII;EACE;IACE;E5B+hIN;AACF;A4B5hII;;EAIE;A5B4hIN;A4BzhII;EAGE;EACA;A5ByhIN;A4BthII;;;EAGE;EACA;A5BwhIN;A4BphIM;EACE;A5BshIR;A4BnhIM;;;EAGE;EACA;A5BqhIR;A4BhhIM;EACE;A5BkhIR;A4B/gIM;;;EAGE;EACA;A5BihIR;A4B7gII;EACE;EACA;A5B+gIN;A4B5gII;EACE;A5B8gIN;A4B3gII;EACE;A5B6gIN;A4BzgIE;EACE;A5B2gIJ;A4BxgIE;EACE;A5B0gIJ;A4BvgIE;;;EAGE;A5BygIJ;A0D5mIE;EAYI;A1DmmIN;A6B3mIE;;EAEE,kDAJc;A7BinIlB;A6BzmII;;EAEE,+CAVY;EAWZ;A7B2mIN;A6BvmIE;EACE;A7BymIJ;A6BvmII;EACE;A7BymIN;A6BrmIE;EACE;A7BumIJ;A6BpmIE;EACE;A7BsmIJ;A6BlmIE;;EAEE;EACA;A7BomIJ;A6BtjIM;;;;;EACE;A7B4jIR;A6BvkIE;EACE;A7BykIJ;A6B1kIE;EACE;A7B4kIJ;A6BnkIM;;;;;EACE;A7BykIR;A6BplIE;EACE;A7BslIJ;A6BvlIE;EACE;A7BylIJ;A6BhlIM;;;;;EACE;A7BslIR;A6BjmIE;EACE;A7BmmIJ;A6BpmIE;EACE;A7BsmIJ;A6B7lIM;;;;;EACE;A7BmmIR;A6BxlIE;EACE;A7B0lIJ;A6BtlIE;EACE;A7BwlIJ;A6BtlII;EACE;A7BwlIN;A6BnlIE;;;;;;;EAIE;A7BwlIJ;A6BrlIE;;;EAGE;EACA;A7BulIJ;A6BllIE;;;;;EAIE;EACA;A7BqlIJ;A6BpoIM;;;;;EACE;A7B0oIR;A6B/nIE;EACE;A7BioIJ;A6B7nIE;EACE;A7B+nIJ;A6B7nII;EACE;A7B+nIN;A6B1nIE;;;;;;;EAIE;A7B+nIJ;A6B5nIE;;;EAGE;EACA;A7B8nIJ;A6BznIE;;;;;EAIE;EACA;A7B4nIJ;A6B3qIM;;;;;EACE;A7BirIR;A6BtqIE;EACE;A7BwqIJ;A6BpqIE;EACE;A7BsqIJ;A6BpqII;EACE;A7BsqIN;A6BjqIE;;;;;;;EAIE;A7BsqIJ;A6BnqIE;;;EAGE;EACA;A7BqqIJ;A6BhqIE;;;;;EAIE;EACA;A7BmqIJ;A8B7vIE;EACE;EACA;A9B+vIJ;A8B7vII;EApCF;EACA;A9BoyIF;A8B7vII;EAxCF;EACA;A9BwyIF;A8B7vII;EA5CF;EACA;A9B4yIF;A8BxyIE;;;EAGE;A9B0yIJ;A8BvyIE;;;;;EAKE;A9ByyIJ;A8BtyIE;EACE;A9BwyIJ;A+B5zIE;EACE;A/B8zIJ;AoCr0IE;EACE;ApCu0IJ;AoCp0IE;;EAEE;ApCs0IJ;AmC50IE;EAGE;EACA;EY6IF;A/CgsIF;AmCx0IE;EACE;AnC00IJ;A2C/vIE;EACE;A3CkwIJ;A2ChwII;EACE;A3CkwIN;A2C/vII;EACE;A3CiwIN;ACnxIE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACtxIE;EACE;ADqxIJ;ACnxIE;EACE;EACA;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;;EAEE;ADqxIJ;ACnxIE;;;;EAIE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;;;;;EAKE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;EACA;EACA;EACA;ADqxIJ;ACnxIE;EACE;EACA;EACA;EACA;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;ACnxIE;EACE;ADqxIJ;A2Cr7IE;EAEE;EAIA;A3Cm7IJ;A2Ct7II;EACE;A3Cw7IN;A2Cl7IE;EACE;A3Co7IJ;A2Cj7IE;EACE;EACA;A3Cm7IJ;A2Cl7II;EACE;A3Co7IN;A2Ch7IE;;EAEE;A3Ck7IJ;A2C/6IE;EACE;A3Ci7IJ;A2C/6IE;EACE;A3Ci7IJ;A2C96IE;EACE;A3Cg7IJ;A2C96IE;EACE;A3Cg7IJ;A2C36IE;EACE;EACA;A3C66IJ;A2C36II;EACE;EACA;A3C66IN;A2Cn6IM;EACE;EACA;A3Cq6IR;A2Cv6IM;EACE;EACA;A3Cy6IR;A2C36IM;EACE;EACA;A3C66IR;A4Cn/IE;EAII;A5Ck/IN;AiCp/IE;EACE;AjCs/IJ;AiCp/II;EAEE;AjCq/IN;AiCj/II;EACE;AjCm/IN;AiCh/II;EACE;EACA;AjCk/IN;AiC/+II;EACE;AjCi/IN;AiC7+IE;EACE;AjC++IJ;AiC5+IE;EACE;AjC8+IJ;AiC3+IE;EACE;AjC6+IJ;AkCjhJE;EACE;AlCmhJJ;AkChhJE;EACE;AlCkhJJ;A6C7gJE;EACE;A7C+gJJ;A6C7gJI;EACE;A7C+gJN;A6C3gJE;EACE,cAZe;A7CyhJnB;A6C1gJE;;EAEE;A7C4gJJ;A6CpgJE;;;;EAIE;A7CsgJJ;A6CngJE;;EAEE;A7CqgJJ;A6ChgJI;;EACE,mBAxCa;A7C2iJnB;A8C5iJE;EAIE;EACA;A9C2iJJ;A8CpiJI;ECkIF;A/Cq6IF;A8CviJI;ECkIF;A/Cw6IF;A8C1iJI;ECkIF;A/C26IF;A8C7iJI;ECkIF;A/C86IF;A8ChjJI;ECkIF;A/Ci7IF;A8CnjJI;ECkIF;A/Co7IF;A8CtjJI;ECkIF;A/Cu7IF;A8CzjJI;ECkIF;A/C07IF;A8C5jJI;ECkIF;A/C67IF;A8C/jJI;ECkIF;A/Cg8IF;A8ClkJI;ECkIF;A/Cm8IF;A8CrkJI;ECkIF;A/Cs8IF;A8CxkJI;ECkIF;A/Cy8IF;A8C3kJI;ECkIF;A/C48IF;A8C9kJI;ECkIF;A/C+8IF;A8CjlJI;ECkIF;A/Ck9IF;A8CplJI;ECkIF;A/Cq9IF;A8CvlJI;ECkIF;A/Cw9IF;A8C1lJI;ECkIF;A/C29IF;A8C7lJI;ECkIF;A/C89IF;A8ChmJI;ECkIF;A/Ci+IF;A8CnmJI;ECkIF;A/Co+IF;A8CtmJI;ECkIF;A/Cu+IF;A8CzmJI;ECkIF;A/C0+IF;A8C5mJI;ECkIF;A/C6+IF;A8CxmJI;EACE;A9C0mJN;AgDpoJE;EAEE;EACA;AhDsoJJ;A+C1+IE;EAXA;A/Cw/IF;AgDloJI;EACE;AhDooJN;AgDloJM;EACE;AhDooJR;AEtjJE;EACE;AFwjJJ;AEjjJE;EACE;AFmjJJ;AE/iJI;EACE;AFijJN;AE7iJE;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF+iJJ;AE5iJE;;EAEE;AF8iJJ;AEziJE;EAEE;AF0iJJ;AE/pJE;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AF4qJb;AE7pJI;EACE;AF+pJN;AE1pJI;EACE;AF4pJN;AEvpJI;EACE;AFypJN;AEppJI;EACE;EACA;AFspJN;AEjpJI;EACE;AFmpJN;AE9oJI;EACE;EACA;AFgpJN;AE1oJM;EACE;AF4oJR;AEvoJM;EACE;EACA;AFyoJR;AEpoJM;EACE;AFsoJR;AEjoJM;EACE;EACA;AFmoJR;AEtsJE;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AFotJf;AEpsJI;EACE;AFssJN;AEjsJI;EACE;AFmsJN;AE9rJI;EACE;AFgsJN;AE3rJI;EACE;EACA;AF6rJN;AExrJI;EACE;AF0rJN;AErrJI;EACE;EACA;AFurJN;AEjrJM;EACE;AFmrJR;AE9qJM;EACE;EACA;AFgrJR;AE3qJM;EACE;AF6qJR;AExqJM;EACE;EACA;AF0qJR;AE7uJE;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFyvJb;AE3uJI;EACE;AF6uJN;AExuJI;EACE;AF0uJN;AEruJI;EACE;AFuuJN;AEluJI;EACE;EACA;AFouJN;AE/tJI;EACE;AFiuJN;AE5tJI;EACE;EACA;AF8tJN;AExtJM;EACE;AF0tJR;AErtJM;EACE;EACA;AFutJR;AEltJM;EACE;AFotJR;AE/sJM;EACE;EACA;AFitJR;AEvoJE;EACE;EACA;AFyoJJ;AsC9vJI;EpCwHE;EACA;AFyoJN;AEpoJI;EACE;EACA;AFuoJN;AEloJI;EACE;EACA;AFooJN;AE/nJI;EAWI;EAMF;AFknJN;AKtzJE;E0CkJA;E1ChJE;EACA;ALwzJJ;AMtuJE;EAKE;EACA;ANouJJ;AMpwJE;EACE;ANswJJ;AMpwJE;EACE;ANswJJ;AMpwJE;EACE;ANswJJ;AMlwJI;EAEE;ANmwJN;AMt0JE;EACE;ANw0JJ;AMr0JE;EACE;ANu0JJ;AMp0JE;EACE;ANs0JJ;AMn0JE;EACE;ANq0JJ;AMpvJI;EACE,YAxGY;EAyGZ;ANsvJN;AMlvJE;EACE;ANovJJ;AM/uJE;EACE;ANivJJ;AM9uJE;EAEE;EACA;AN+uJJ;AM1yJE;EACE;AN4yJJ;AM1yJE;EACE;AN4yJJ;AM1yJE;EACE;AN4yJJ;AMxyJI;EAEE;ANyyJN;AMtzJE;EACE;ANwzJJ;AMtzJE;EACE;ANwzJJ;AMtzJE;EACE;ANwzJJ;AMpzJI;EAEE;ANqzJN;AMv1JE;EAXA,0CADmB;ANs2JrB;AMt1JE;EAfA,oCADmB;ANy2JrB;AMr1JE;EAnBA,0CADmB;AN42JrB;A+CzuJE;EAXA;A/CuvJF;A+C5uJE;EAXA;A/C0vJF;A+C/uJE;EAXA;A/C6vJF;A+ClvJE;EAXA;A/CgwJF;A+CrvJE;EAXA;A/CmwJF;A+CxvJE;EAXA;A/CswJF;A+C3vJE;EAXA;A/CywJF;A+C9vJE;;EAXA;A/C6wJF;AO34JI;;EACE;AP84JN;AO14JE;EACE;AP44JJ;AO14JI;EACE;AP44JN;AOx4JE;EACE;EACA;AP04JJ;AOx4JI;EACE;AP04JN;AOt4JE;EACE;APw4JJ;AOr4JE;EACE;EACA;APu4JJ;AOn4JI;EACE;EACA;EACA;APq4JN;AOj4JE;EACE;EACA;APm4JJ;AOj4JI;EACE;APm4JN;AO/3JE;EACE;EACA;APi4JJ;AO/3JI;EACE;APi4JN;AO93JI;EACE;APg4JN;AO53JE;;EAEE;AP83JJ;AQh9JE;EAEE;EACA;ARi9JJ;A+CxzJE;EAXA;A/Cs0JF;A+C3zJE;EAXA;A/Cy0JF;AQ/8JE;EACE;ARi9JJ;AS/8JE;EACE;ATi9JJ;AS98JE;EACE,aAdoB;AT89JxB;AS78JE;EAGE;AT68JJ;AS18JE;EACE,yBAxBoB;ATo+JxB;ASx8JI;EACE;AT08JN;ASv8JI;EACE;ATy8JN;ASt8JI;EACE;ATw8JN;ASj8JM;EACE,yBAtCW;ATy+JnB;AS97JM;EACE,qBA5CW;AT4+JnB;AS57JI;EACE;AT87JN;ASx7JE;EACE;AT07JJ;ASr7JI;;EACE;ATw7JN;ASr7JI;;EACE;ATw7JN;ASr7JI;;EACE;ATw7JN;AUh+JE;EA5CA,yBAyCwB;EAxCxB,YAyCwB;AVs+J1B;AU7gKE;EACE,YAsCsB;EArCtB;AV+gKJ;AUp+JM;EqCmGJ;A/Co4JF;AUn+JM;EACE;AVq+JR;AUj+JI;EACE;AVm+JN;AUh+JI;EACE;AVk+JN;AU79JI;EAnEF,yBAyBE;EAxBF,YAuBwB;AV4gK1B;AUjiKE;EACE,YAoBsB;EAnBtB;AVmiKJ;AU7gKE;EAVA,0CADmB;AV2hKrB;AUp+JI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVuhK1B;AU5iKE;EACE,YAoBsB;EAnBtB;AV8iKJ;AUxhKE;EAVA,0CADmB;AVsiKrB;AU3+JI;EA3EF,yBAyBE;EAxBF,0BAuBwB;AVkiK1B;AUvjKE;EACE,0BAoBsB;EAnBtB;AVyjKJ;AUniKE;EAVA,oCADmB;AVijKrB;AWjkKE;EACE;AXmkKJ;AWhkKE;;;;EAIE;AXkkKJ;AW/jKE;;EAEE;AXikKJ;AW9jKE;EACE;AXgkKJ;AW7jKE;EACE;AX+jKJ;AYhhKE;EACE;AZkhKJ;AY7gKE;;;EAGE;AZ+gKJ;AY5gKE;EACE;AZ8gKJ;AY3gKE;;EAEE;AZ6gKJ;AY1gKE;;EAEE;EACA;AZ4gKJ;AYxjKE;EAiDI,+BA/Ba;AZyiKnB;AYtgKE;EACE,+BApCe;AZ4iKnB;AYrgKE;EAOI;AZigKN;AYjkKE;EA2EI;AZy/JN;AYpkKE;EAoFM;AZm/JR;AYj6JE;EACE,mCA9MA;AZinKJ;AYh6JE;;EAEE,kCAViB;AZ46JrB;AY/5JE;;EAEE;AZi6JJ;AY95JE;;EAEE;AZg6JJ;AY75JE;;EAEE,mBAxBc;AZu7JlB;AY55JE;;EAEE,mBA5BuB;AZ07J3B;AYnoKE;EACE;EACA;AZqoKJ;AYloKE;EAII;AZioKN;AYxnKE;EACE;AZ0nKJ;AYxmKE;;EASI;AZmmKN;AYrnKE;EASA;IASI;EZumKJ;AACF;AY/gKE;EmCCA;EnCCE;EACA;AZihKJ;AYh9JE;EACE,oCA9MA;AZgqKJ;AY/8JE;;EAEE,kCAViB;AZ29JrB;AY98JE;;EAEE;AZg9JJ;AY78JE;;EAEE;AZ+8JJ;AY58JE;;EAEE,mBAxBc;AZs+JlB;AY38JE;;EAEE,mBA5BuB;AZy+J3B;AYlrKE;EACE;EACA;AZorKJ;AYjrKE;EAII;AZgrKN;AYvqKE;EACE;AZyqKJ;AYvpKE;;EASI;AZkpKN;AYpqKE;EASA;IASI;EZspKJ;AACF;AY1/JE;EACE,kCA9MA;AZ0sKJ;AYz/JE;;EAEE,kCAViB;AZqgKrB;AYx/JE;;EAEE;AZ0/JJ;AYv/JE;;EAEE;AZy/JJ;AYt/JE;;EAEE,mBAxBc;AZghKlB;AYr/JE;;EAEE,mBA5BuB;AZmhK3B;AY5tKE;EACE;EACA;AZ8tKJ;AY3tKE;EAII;AZ0tKN;AYjtKE;EACE;AZmtKJ;AYjsKE;;EASI;AZ4rKN;AY9sKE;EASA;IASI;EZgsKJ;AACF;AY1lKE;EmCbA;A/C0mKF;AYzlKE;EACE;AZ2lKJ;AYzlKI;EACE;AZ2lKN;AYxlKI;EACE;AZ0lKN;AYtlKE;EACE;AZwlKJ;AavwKE;EkCiJA;ElC/IE;EACA;AbywKJ;AiDjxKE;EACE;AjDmxKJ;AiDhxKE;EACE;AjDkxKJ;AchxKE;EAEE;EACA;AdixKJ;A+C1nKE;EAXA;A/CwoKF;AcjxKE;EACE;AdmxKJ;AkDnyKM;EpCoBF;AdkxKJ;Ac7wKE;EACE;IAEE;Ed8wKJ;AACF;Ac3wKE;EACE;Ad6wKJ;Ac1wKE;;EAEE;Ad4wKJ;AczwKE;EACE;Ad2wKJ;AczwKI;;EAEE;Ad2wKN;Ae5xKE;EACE,+BAZA;Af0yKJ;Ae3xKE;EACE,+BAhBA;Af6yKJ;Ae1xKE;EACE,cAnBoB;Af+yKxB;Ae1xKI;EACE,cAhBqB;Af4yK3B;AezxKI;EACE,cAnBmB;Af8yKzB;AevxKE;EACE,cA9BqB;AfuzKzB;AetxKE;EACE,uBA9BA;AfszKJ;AepxKI;EACE,yBAhCsB;AfszK5B;AepxKM;EACE,yBArCmB;Af2zK3B;AenxKM;EACE,yBAxCiB;Af6zKzB;Ae/wKI;EACE,cA9CsB;Af+zK5B;Ae9wKI;EACE,cApDqB;Afo0K3B;Ae7wKI;EACE,cAvDmB;Afs0KzB;AevwKI;EACE,cAhEmB;Afy0KzB;AevwKM;;EAEE,cApEiB;Af60KzB;AerwKI;;EAEE,yBA1EmB;Afi1KzB;AenwKE;EACE,cA/EqB;Afo1KzB;AgB/1KI;EACE,+BANU;AhBu2KhB;AgB91KI;EACE,+BAVU;AhB02KhB;AgB71KI;EACE,0CAZF;AhB22KJ;AgB51KI;EmCzBF;EACA;EACA;AnDw3KF;AoDl3KI;EACE,0CAJF;ApDw3KJ;AoDj3KI;EDZF;EACA;EACA;AnDg4KF;AiBl3KI;EACE,0CATF;AjB63KJ;AiBj3KI;EACE,2CAXF;AjB83KJ;AiBh3KI;EACE,0CAbF;AjB+3KJ;AiB92KM;EACE,+BAjBiB;AjBi4KzB;AiB72KM;EACE;AjB+2KR;AkB33KI;EACE,+BAXF;AlBw4KJ;AkB13KI;EACE,YAbF;AlBy4KJ;AkBx3KM;EACE,cAjBkB;AlB24K1B;AkBv3KM;EACE,cApBiB;AlB64KzB;AkBt3KM;EACE,cAvBe;AlB+4KvB;AkBl3KM;EACE,cA9Be;AlBk5KvB;AkB/2KM;EACE,+BA3CiB;AlB45KzB;AkB92KM;EACE,gCAtCJ;AlBs5KJ;AqDp6KI;EACE;ArDs6KN;AqDn6KI;EACE;ArDq6KN;AqDl6KI;EACE;ArDo6KN;AqBx6KE;EACE;ArB06KJ;AqBv6KE;;EAEE;ArBy6KJ;AqBt6KE;EACE;ArBw6KJ;AsD57KE;EjCuBI;ArBw6KN;AsD/7KE;EjCuBI;ArBw6KN;AsD37KE;EjCmBI;ArB26KN;AsD17KE;EjCeI;ArB86KN;AsDv7KE;EjCSI;ArBi7KN;AqBv6KQ;EACE,0BsCbU;A3Ds7KpB;AqBt6KQ;EACE,0BsCfW;A3Du7KrB;AqBl6KE;EACE;ArBo6KJ;AqBj6KE;;EAEE;ArBm6KJ;AqBh6KE;EACE;ArBk6KJ;AgCl9KI;EACE;AhCo9KN;AgCj9KI;EACE;AhCm9KN;AgCh9KI;EACE;AhCk9KN;AgC/8KI;EACE;EACA;AhCi9KN;AgC18KI;;;;;EACE;AhCg9KN;AgC38KI;EACE;AhC68KN;AsB1+KE;EAEE;AtB2+KJ;A+Cj1KE;EAXA;A/C+1KF;AsB3+KE;EACE;EACA;AtB6+KJ;AsB1+KM;;;EAGE;AtB4+KR;AsBv+KE;;EAEE;AtBy+KJ;AsBl+KI;;;;EACE;AtBu+KN;AuBngLE;EACE;AvBqgLJ;AuBlgLE;;EAEE;AvBogLJ;AuBjgLE;;EAEE;EACA;AvBmgLJ;AuBhgLE;;EAEE;AvBkgLJ;AuB9/KI;;;;EAIE;AvBggLN;AuD9gLE;EACE;AvDghLJ;AuD7gLE;EACE;AvD+gLJ;AuD5gLE;EACE;AvD8gLJ;AuD1gLI;EACE;AvD4gLN;AuDzgLI;EACE;AvD2gLN;AuDxgLI;EACE;AvD0gLN;AuDrgLI;EACE;AvDugLN;AuDpgLI;EACE;AvDsgLN;AuDngLI;EACE;AvDqgLN;AwDtjLI;EACE;AxDwjLN;AwDrjLI;EACE;AxDujLN;AwDpjLI;EACE;AxDsjLN;AwB/iLE;EACE;AxBijLJ;AwBtkLE;EACE;AxBwkLJ;AwBrkLE;;EAIE;AxBqkLJ;AwB7kLE;EACE;AxB+kLJ;AwB5kLE;;EAIE;AxB4kLJ;AwBplLE;EACE;AxBslLJ;AwBnlLE;;EAIE;AxBmlLJ;AwBljLM;;EAEE;AxBojLR;AwBjjLM;;EAEE;AxBmjLR;AwBhjLM;EACE;AxBkjLR;AwB5iLI;EACE;AxB8iLN;AyB/lLE;EACE;AzBimLJ;AyB9lLE;EACE;AzBgmLJ;AyB7lLE;EACE;AzB+lLJ;AyB5lLE;EACE;AzB8lLJ;AyB3lLE;EACE;AzB6lLJ;A+Ct9KE;EAXA;A/Co+KF;AyB7lLI;EACE;AzB+lLN;AyBzlLM;EACE;AzB2lLR;AyBxlLM;EACE;AzB0lLR;AyBvlLM;EACE;AzBylLR;AyBrlLI;EACE;AzBulLN;AyBplLI;EACE;AzBslLN;AyDhoLE;EACE,yBALmC;EAMnC;AzDkoLJ;AyD/nLE;EACE,yBAXwB;EAYxB;AzDioLJ;AyD/nLI;EACE,yBAb2B;AzD8oLjC;AyD9nLI;EV6HF;A/CogLF;AyD1nLE;EACE,iDAvBmB;AzDmpLvB;AyD1nLI;EACE,gDA1BiB;EA2BjB;AzD4nLN;AyDxnLE;EACE,gDAhCmB;EAiCnB;AzD0nLJ;AyDxnLI;EACE;EACA,iDArCiB;AzD+pLvB;AyDtnLE;EAQI;AzDinLN;A0B1qLI;EACE;A1B4qLN;A0BzqLI;EAGE;A1ByqLN;A0BtqLI;EAGE;A1BsqLN;A0BnrLI;EACE;A1BqrLN;A0BlrLI;EAGE;A1BkrLN;A0B/qLI;EAGE;A1B+qLN;A0B5rLI;EACE;A1B8rLN;A0B3rLI;EAGE;A1B2rLN;A0BxrLI;EAGE;A1BwrLN;A0BnpLI;EAGE,uBAhBqB;A1BmqL3B;A0B/oLE;EqB2FA;ErBzFE;A1BipLJ;A0B9oLE;EACE,0CA3BoB;A1B2qLxB;A2BtqLE;EACE,0CAbqB;A3BqrLzB;A2BptLE;;;EAGE;A3BstLJ;A2BntLE;EACE;A3BqtLJ;A2BltLE;EAGE,yCADQ;A3BmtLZ;A2B/tLE;;;EAGE;A3BiuLJ;A2B9tLE;EACE;A3BguLJ;A2B7tLE;EAGE,0CADQ;A3B8tLZ;A2B1uLE;;;EAGE;A3B4uLJ;A2BzuLE;EACE;A3B2uLJ;A2BxuLE;EAGE,wCADQ;A3ByuLZ;A2BtrLI;;EACE,0CAhC2B;A3BytLjC;A2BprLI;;;EAGE,0CAvCwB;A3B6tL9B;A2BlrLM;EACE,0CA5CsB;A3BguL9B;A2B9qLI;EAGE,2CADQ;A3B+qLd;A2BpqLM;;EAEE,uBA/DJ;A3BquLJ;A2BlqLQ;;EAEE,0CAnEN;A3BuuLJ;A2B9pLM;EACE,sCAhFiB;EAiFjB;A3BgqLR;A2B3pLQ;EACE,sCAtFuB;A3BmvLjC;A2B1pLQ;EACE,sCAzFoB;A3BqvL9B;A2BtpLE;EACE,sCAzFA;A3BivLJ;A2B/oLE;EACE;EAIA;A3B8oLJ;A2BpoLE;EACE;A3BsoLJ;A4BtxLI;EAIE;A5BqxLN;A4BlxLI;EACE;A5BoxLN;A4B9wLI;EACE;IACE;E5BgxLN;AACF;A4B7wLI;;EAIE;A5B6wLN;A4B1wLI;EAGE;EACA;A5B0wLN;A4BvwLI;;;EAGE;EACA;A5BywLN;A4BrwLM;EACE;A5BuwLR;A4BpwLM;;;EAGE;EACA;A5BswLR;A4BjwLM;EACE;A5BmwLR;A4BhwLM;;;EAGE;EACA;A5BkwLR;A4B9vLI;EACE;EACA;A5BgwLN;A4B7vLI;EACE;A5B+vLN;A4B5vLI;EACE;A5B8vLN;A4B1vLE;EACE;A5B4vLJ;A4BzvLE;EACE;A5B2vLJ;A4BxvLE;;;EAGE;A5B0vLJ;A0D71LE;EAYI;A1Do1LN;A6B51LE;;EAEE,kDAJc;A7Bk2LlB;A6B11LI;;EAEE,+CAVY;EAWZ;A7B41LN;A6Bx1LE;EACE;A7B01LJ;A6Bx1LI;EACE;A7B01LN;A6Bt1LE;EACE;A7Bw1LJ;A6Br1LE;EACE;A7Bu1LJ;A6Bn1LE;;EAEE;EACA;A7Bq1LJ;A6BvyLM;;;;;EACE;A7B6yLR;A6BxzLE;EACE;A7B0zLJ;A6B3zLE;EACE;A7B6zLJ;A6BpzLM;;;;;EACE;A7B0zLR;A6Br0LE;EACE;A7Bu0LJ;A6Bx0LE;EACE;A7B00LJ;A6Bj0LM;;;;;EACE;A7Bu0LR;A6Bl1LE;EACE;A7Bo1LJ;A6Br1LE;EACE;A7Bu1LJ;A6B90LM;;;;;EACE;A7Bo1LR;A6Bz0LE;EACE;A7B20LJ;A6Bv0LE;EACE;A7By0LJ;A6Bv0LI;EACE;A7By0LN;A6Bp0LE;;;;;;;EAIE;A7By0LJ;A6Bt0LE;;;EAGE;EACA;A7Bw0LJ;A6Bn0LE;;;;;EAIE;EACA;A7Bs0LJ;A6Br3LM;;;;;EACE;A7B23LR;A6Bh3LE;EACE;A7Bk3LJ;A6B92LE;EACE;A7Bg3LJ;A6B92LI;EACE;A7Bg3LN;A6B32LE;;;;;;;EAIE;A7Bg3LJ;A6B72LE;;;EAGE;EACA;A7B+2LJ;A6B12LE;;;;;EAIE;EACA;A7B62LJ;A6B55LM;;;;;EACE;A7Bk6LR;A6Bv5LE;EACE;A7By5LJ;A6Br5LE;EACE;A7Bu5LJ;A6Br5LI;EACE;A7Bu5LN;A6Bl5LE;;;;;;;EAIE;A7Bu5LJ;A6Bp5LE;;;EAGE;EACA;A7Bs5LJ;A6Bj5LE;;;;;EAIE;EACA;A7Bo5LJ;A8B9+LE;EACE;EACA;A9Bg/LJ;A8B9+LI;EApCF;EACA;A9BqhMF;A8B9+LI;EAxCF;EACA;A9ByhMF;A8B9+LI;EA5CF;EACA;A9B6hMF;A8BzhME;;;EAGE;A9B2hMJ;A8BxhME;;;;;EAKE;A9B0hMJ;A8BvhME;EACE;A9ByhMJ;A+B7iME;EACE;A/B+iMJ;AoCtjME;EACE;ApCwjMJ;AoCrjME;;EAEE;ApCujMJ;AmC7jME;EAGE;EACA;EY6IF;A/Ci7LF;AmCzjME;EACE;AnC2jMJ;A2Ch/LE;EACE;A3Cm/LJ;A2Cj/LI;EACE;A3Cm/LN;A2Ch/LI;EACE;A3Ck/LN;ACtlME;EACE;EACA;EACA;EACA;EACA;EACA;EACA;KAAA;UAAA;EACA;EACA;ADwlMJ;ACtlME;EAEE;ADwlMJ;AC1lME;;EAEE;ADwlMJ;ACtlME;EACE;EACA;ADwlMJ;ACtlME;;;;EAIE;ADwlMJ;ACtlME;;EAEE;ADwlMJ;ACtlME;;;EAGE;ADwlMJ;ACtlME;;;;EAIE;ADwlMJ;ACtlME;;;;;;;EAOE;ADwlMJ;ACtlME;EACE;ADwlMJ;ACtlME;EACE;EACA;EACA;ADwlMJ;ACtlME;EACE;EACA;EACA;ADwlMJ;ACtlME;;EAEE;ADwlMJ;ACtlME;EACE;ADwlMJ;ACtlME;EACE;ADwlMJ;ACtlME;EACE;ADwlMJ;A2ClpME;EAEE;EAIA;A3CgpMJ;A2CnpMI;EACE;A3CqpMN;A2C/oME;EACE;A3CipMJ;A2C9oME;EACE;EACA;A3CgpMJ;A2C/oMI;EACE;A3CipMN;A2C7oME;;EAEE;A3C+oMJ;A2C5oME;EACE;A3C8oMJ;A2C5oME;EACE;A3C8oMJ;A2C3oME;EACE;A3C6oMJ;A2C3oME;EACE;A3C6oMJ;A2CxoME;EACE;EACA;A3C0oMJ;A2CxoMI;EACE;EACA;A3C0oMN;A2ChoMM;EACE;EACA;A3CkoMR;A2CpoMM;EACE;EACA;A3CsoMR;A2CxoMM;EACE;EACA;A3C0oMR;A4ChtME;EAII;A5C+sMN;AiCjtME;EACE;AjCmtMJ;AiCjtMI;EAEE;AjCktMN;AiC9sMI;EACE;AjCgtMN;AiC7sMI;EACE;EACA;AjC+sMN;AiC5sMI;EACE;AjC8sMN;AiC1sME;EACE;AjC4sMJ;AiCzsME;EACE;AjC2sMJ;AiCxsME;EACE;AjC0sMJ;AkC9uME;EACE;AlCgvMJ;AkC7uME;EACE;AlC+uMJ;A6C1uME;EACE;A7C4uMJ;A6C1uMI;EACE;A7C4uMN;A6CxuME;EACE,cAZe;A7CsvMnB;A6CvuME;;EAEE;A7CyuMJ;A6CjuME;;;;EAIE;A7CmuMJ;A6ChuME;;EAEE;A7CkuMJ;A6C7tMI;;EACE,mBAxCa;A7CwwMnB;A8CzwME;EAIE;EACA;A9CwwMJ;A8CjwMI;ECkIF;A/CkoMF;A8CpwMI;ECkIF;A/CqoMF;A8CvwMI;ECkIF;A/CwoMF;A8C1wMI;ECkIF;A/C2oMF;A8C7wMI;ECkIF;A/C8oMF;A8ChxMI;ECkIF;A/CipMF;A8CnxMI;ECkIF;A/CopMF;A8CtxMI;ECkIF;A/CupMF;A8CzxMI;ECkIF;A/C0pMF;A8C5xMI;ECkIF;A/C6pMF;A8C/xMI;ECkIF;A/CgqMF;A8ClyMI;ECkIF;A/CmqMF;A8CryMI;ECkIF;A/CsqMF;A8CxyMI;ECkIF;A/CyqMF;A8C3yMI;ECkIF;A/C4qMF;A8C9yMI;ECkIF;A/C+qMF;A8CjzMI;ECkIF;A/CkrMF;A8CpzMI;ECkIF;A/CqrMF;A8CvzMI;ECkIF;A/CwrMF;A8C1zMI;ECkIF;A/C2rMF;A8C7zMI;ECkIF;A/C8rMF;A8Ch0MI;ECkIF;A/CisMF;A8Cn0MI;ECkIF;A/CosMF;A8Ct0MI;ECkIF;A/CusMF;A8Cz0MI;ECkIF;A/C0sMF;A8Cr0MI;EACE;A9Cu0MN;AgDj2ME;EAEE;EACA;AhDm2MJ;A+CvsME;EAXA;A/CqtMF;AgD/1MI;EACE;AhDi2MN;AgD/1MM;EACE;AhDi2MR;AEnxME;EACE;AFqxMJ;AE9wME;EACE;AFgxMJ;AE5wMI;EACE;AF8wMN;AE1wME;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AF4wMJ;AEzwME;;EAEE;AF2wMJ;AEtwME;EAEE;AFuwMJ;AE53ME;EACE,WATS;EAUT,YAVS;EAWT,iBAXS;AFy4Mb;AE13MI;EACE;AF43MN;AEv3MI;EACE;AFy3MN;AEp3MI;EACE;AFs3MN;AEj3MI;EACE;EACA;AFm3MN;AE92MI;EACE;AFg3MN;AE32MI;EACE;EACA;AF62MN;AEv2MM;EACE;AFy2MR;AEp2MM;EACE;EACA;AFs2MR;AEj2MM;EACE;AFm2MR;AE91MM;EACE;EACA;AFg2MR;AEn6ME;EACE,WAVW;EAWX,YAXW;EAYX,iBAZW;AFi7Mf;AEj6MI;EACE;AFm6MN;AE95MI;EACE;AFg6MN;AE35MI;EACE;AF65MN;AEx5MI;EACE;EACA;AF05MN;AEr5MI;EACE;AFu5MN;AEl5MI;EACE;EACA;AFo5MN;AE94MM;EACE;AFg5MR;AE34MM;EACE;EACA;AF64MR;AEx4MM;EACE;AF04MR;AEr4MM;EACE;EACA;AFu4MR;AE18ME;EACE,WARS;EAST,YATS;EAUT,iBAVS;AFs9Mb;AEx8MI;EACE;AF08MN;AEr8MI;EACE;AFu8MN;AEl8MI;EACE;AFo8MN;AE/7MI;EACE;EACA;AFi8MN;AE57MI;EACE;AF87MN;AEz7MI;EACE;EACA;AF27MN;AEr7MM;EACE;AFu7MR;AEl7MM;EACE;EACA;AFo7MR;AE/6MM;EACE;AFi7MR;AE56MM;EACE;EACA;AF86MR;AEp2ME;EACE;EACA;AFs2MJ;AsC39MI;EpCwHE;EACA;AFs2MN;AEj2MI;EACE;EACA;AFo2MN;AE/1MI;EACE;EACA;AFi2MN;AE51MI;EAWI;EAMF;AF+0MN;AKnhNE;E0CkJA;E1ChJE;EACA;ALqhNJ;AMn8ME;EAKE;EACA;ANi8MJ;AMj+ME;EACE;ANm+MJ;AMj+ME;EACE;ANm+MJ;AMj+ME;EACE;ANm+MJ;AM/9MI;EAEE;ANg+MN;AMniNE;EACE;ANqiNJ;AMliNE;EACE;ANoiNJ;AMjiNE;EACE;ANmiNJ;AMhiNE;EACE;ANkiNJ;AMj9MI;EACE,YAxGY;EAyGZ;ANm9MN;AM/8ME;EACE;ANi9MJ;AM58ME;EACE;AN88MJ;AM38ME;EAEE;EACA;AN48MJ;AMvgNE;EACE;ANygNJ;AMvgNE;EACE;ANygNJ;AMvgNE;EACE;ANygNJ;AMrgNI;EAEE;ANsgNN;AMnhNE;EACE;ANqhNJ;AMnhNE;EACE;ANqhNJ;AMnhNE;EACE;ANqhNJ;AMjhNI;EAEE;ANkhNN;AMpjNE;EAXA,0CADmB;ANmkNrB;AMnjNE;EAfA,0CADmB;ANskNrB;AMljNE;EAnBA,0CADmB;ANykNrB;A+Ct8ME;EAXA;A/Co9MF;A+Cz8ME;EAXA;A/Cu9MF;A+C58ME;EAXA;A/C09MF;A+C/8ME;EAXA;A/C69MF;A+Cl9ME;EAXA;A/Cg+MF;A+Cr9ME;EAXA;A/Cm+MF;A+Cx9ME;EAXA;A/Cs+MF;A+C39ME;;EAXA;A/C0+MF;AOxmNI;;EACE;AP2mNN;AOvmNE;EACE;APymNJ;AOvmNI;EACE;APymNN;AOrmNE;EACE;EACA;APumNJ;AOrmNI;EACE;APumNN;AOnmNE;EACE;APqmNJ;AOlmNE;EACE;EACA;APomNJ;AOhmNI;EACE;EACA;EACA;APkmNN;AO9lNE;EACE;EACA;APgmNJ;AO9lNI;EACE;APgmNN;AO5lNE;EACE;EACA;AP8lNJ;AO5lNI;EACE;AP8lNN;AO3lNI;EACE;AP6lNN;AOzlNE;;EAEE;AP2lNJ;AQ7qNE;EAEE;EACA;AR8qNJ;A+CrhNE;EAXA;A/CmiNF;A+CxhNE;EAXA;A/CsiNF;AQ5qNE;EACE;AR8qNJ;AS5qNE;EACE;AT8qNJ;AS3qNE;EACE,aAdoB;AT2rNxB;AS1qNE;EAGE;AT0qNJ;ASvqNE;EACE,yBAxBoB;ATisNxB;ASrqNI;EACE;ATuqNN;ASpqNI;EACE;ATsqNN;ASnqNI;EACE;ATqqNN;AS9pNM;EACE,yBAtCW;ATssNnB;AS3pNM;EACE,qBA5CW;ATysNnB;ASzpNI;EACE;AT2pNN;ASrpNE;EACE;ATupNJ;ASlpNI;;EACE;ATqpNN;ASlpNI;;EACE;ATqpNN;ASlpNI;;EACE;ATqpNN;AU7rNE;EA5CA,yBAyCwB;EAxCxB,0BAyCwB;AVmsN1B;AU1uNE;EACE,0BAsCsB;EArCtB;AV4uNJ;AUjsNM;EqCmGJ;A/CimNF;AUhsNM;EACE;AVksNR;AU9rNI;EACE;AVgsNN;AU7rNI;EACE;AV+rNN;AU1rNI;EAnEF,yBAyBE;EAxBF,YAuBwB;AVyuN1B;AU9vNE;EACE,YAoBsB;EAnBtB;AVgwNJ;AU1uNE;EAVA,0CADmB;AVwvNrB;AUjsNI;EAvEF,yBAyBE;EAxBF,YAuBwB;AVovN1B;AUzwNE;EACE,YAoBsB;EAnBtB;AV2wNJ;AUrvNE;EAVA,0CADmB;AVmwNrB;AUxsNI;EA3EF,yBAyBE;EAxBF,YAuBwB;AV+vN1B;AUpxNE;EACE,YAoBsB;EAnBtB;AVsxNJ;AUhwNE;EAVA,0CADmB;AV8wNrB;AW9xNE;EACE;AXgyNJ;AW7xNE;;;;EAIE;AX+xNJ;AW5xNE;;EAEE;AX8xNJ;AW3xNE;EACE;AX6xNJ;AW1xNE;EACE;AX4xNJ;AY7uNE;EACE;AZ+uNJ;AY1uNE;;;EAGE;AZ4uNJ;AYzuNE;EACE;AZ2uNJ;AYxuNE;;EAEE;AZ0uNJ;AYvuNE;;EAEE;EACA;AZyuNJ;AYrxNE;EAiDI,0BA/Ba;AZswNnB;AYnuNE;EACE,0BApCe;AZywNnB;AYluNE;EAOI;AZ8tNN;AY9xNE;EA2EI;AZstNN;AYjyNE;EAoFM;AZgtNR;AY9nNE;EACE,kCA9MA;AZ80NJ;AY7nNE;;EAEE,kCAViB;AZyoNrB;AY5nNE;;EAEE;AZ8nNJ;AY3nNE;;EAEE;AZ6nNJ;AY1nNE;;EAEE,mBAxBc;AZopNlB;AYznNE;;EAEE,mBA5BuB;AZupN3B;AYh2NE;EACE;EACA;AZk2NJ;AY/1NE;EAII;AZ81NN;AYr1NE;EACE;AZu1NJ;AYr0NE;;EASI;AZg0NN;AYl1NE;EASA;IASI;EZo0NJ;AACF;AY5uNE;EmCCA;EnCCE;EACA;AZ8uNJ;AY7qNE;EACE,mCA9MA;AZ63NJ;AY5qNE;;EAEE,kCAViB;AZwrNrB;AY3qNE;;EAEE;AZ6qNJ;AY1qNE;;EAEE;AZ4qNJ;AYzqNE;;EAEE,mBAxBc;AZmsNlB;AYxqNE;;EAEE,mBA5BuB;AZssN3B;AY/4NE;EACE;EACA;AZi5NJ;AY94NE;EAII;AZ64NN;AYp4NE;EACE;AZs4NJ;AYp3NE;;EASI;AZ+2NN;AYj4NE;EASA;IASI;EZm3NJ;AACF;AYvtNE;EACE,kCA9MA;AZu6NJ;AYttNE;;EAEE,kCAViB;AZkuNrB;AYrtNE;;EAEE;AZutNJ;AYptNE;;EAEE;AZstNJ;AYntNE;;EAEE,mBAxBc;AZ6uNlB;AYltNE;;EAEE,mBA5BuB;AZgvN3B;AYz7NE;EACE;EACA;AZ27NJ;AYx7NE;EAII;AZu7NN;AY96NE;EACE;AZg7NJ;AY95NE;;EASI;AZy5NN;AY36NE;EASA;IASI;EZ65NJ;AACF;AYvzNE;EmCbA;A/Cu0NF;AYtzNE;EACE;AZwzNJ;AYtzNI;EACE;AZwzNN;AYrzNI;EACE;AZuzNN;AYnzNE;EACE;AZqzNJ;Aap+NE;EkCiJA;ElC/IE;EACA;Abs+NJ;AiD9+NE;EACE;AjDg/NJ;AiD7+NE;EACE;AjD++NJ;Ac7+NE;EAEE;EACA;Ad8+NJ;A+Cv1NE;EAXA;A/Cq2NF;Ac9+NE;EACE;Adg/NJ;AkDhgOM;EpCoBF;Ad++NJ;Ac1+NE;EACE;IAEE;Ed2+NJ;AACF;Acx+NE;EACE;Ad0+NJ;Acv+NE;;EAEE;Ady+NJ;Act+NE;EACE;Adw+NJ;Act+NI;;EAEE;Adw+NN;Aez/NE;EACE,yBAZA;AfugOJ;Aex/NE;EACE,yBAhBA;Af0gOJ;Aev/NE;EACE,cAnBoB;Af4gOxB;Aev/NI;EACE,cAhBqB;AfygO3B;Aet/NI;EACE,cAnBmB;Af2gOzB;Aep/NE;EACE,cA9BqB;AfohOzB;Aen/NE;EACE,qCA9BA;AfmhOJ;Aej/NI;EACE,yBAhCsB;AfmhO5B;Aej/NM;EACE,yBArCmB;AfwhO3B;Aeh/NM;EACE,yBAxCiB;Af0hOzB;Ae5+NI;EACE,cA9CsB;Af4hO5B;Ae3+NI;EACE,cApDqB;AfiiO3B;Ae1+NI;EACE,cAvDmB;AfmiOzB;Aep+NI;EACE,cAhEmB;AfsiOzB;Aep+NM;;EAEE,cApEiB;Af0iOzB;Ael+NI;;EAEE,yBA1EmB;Af8iOzB;Aeh+NE;EACE,cA/EqB;AfijOzB;AgB5jOI;EACE,0BANU;AhBokOhB;AgB3jOI;EACE,0BAVU;AhBukOhB;AgB1jOI;EACE,qCAZF;AhBwkOJ;AgBzjOI;EmCzBF;EACA;EACA;AnDqlOF;AoD/kOI;EACE,qCAJF;ApDqlOJ;AoD9kOI;EDZF;EACA;EACA;AnD6lOF;AiB/kOI;EACE,qCATF;AjB0lOJ;AiB9kOI;EACE,qCAXF;AjB2lOJ;AiB7kOI;EACE,qCAbF;AjB4lOJ;AiB3kOM;EACE,0BAjBiB;AjB8lOzB;AiB1kOM;EACE;AjB4kOR;AkBxlOI;EACE,0BAXF;AlBqmOJ;AkBvlOI;EACE,0BAbF;AlBsmOJ;AkBrlOM;EACE,cAjBkB;AlBwmO1B;AkBplOM;EACE,cApBiB;AlB0mOzB;AkBnlOM;EACE,cAvBe;AlB4mOvB;AkB/kOM;EACE,cA9Be;AlB+mOvB;AkB5kOM;EACE,0BA3CiB;AlBynOzB;AkB3kOM;EACE,0BAtCJ;AlBmnOJ;AqDjoOI;EACE;ArDmoON;AqDhoOI;EACE;ArDkoON;AqD/nOI;EACE;ArDioON;AqBroOE;EACE;ArBuoOJ;AqBpoOE;;EAEE;ArBsoOJ;AqBnoOE;EACE;ArBqoOJ;AsDzpOE;EjCuBI;ArBqoON;AsD5pOE;EjCuBI;ArBqoON;AsDxpOE;EjCmBI;ArBwoON;AsDvpOE;EjCeI;ArB2oON;AsDppOE;EjCSI;ArB8oON;AqBznOE;EACE;ArB2nOJ;AqBxnOE;;EAEE;ArB0nOJ;AqBvnOE;EACE;ArBynOJ;AgCzqOI;EACE;AhC2qON;AgCxqOI;EACE;AhC0qON;AgCvqOI;EACE;AhCyqON;AgCtqOI;EACE;EACA;AhCwqON;AgCjqOI;;;;;EACE;AhCuqON;AgClqOI;EACE;AhCoqON;AsBjsOE;EAEE;AtBksOJ;A+CxiOE;EAXA;A/CsjOF;AsBlsOE;EACE;EACA;AtBosOJ;AsBjsOM;;;EAGE;AtBmsOR;AsB9rOE;;EAEE;AtBgsOJ;AsBzrOI;;;;EACE;AtB8rON;AuB1tOE;EACE;AvB4tOJ;AuBztOE;;EAEE;AvB2tOJ;AuBxtOE;;EAEE;EACA;AvB0tOJ;AuBvtOE;;EAEE;AvBytOJ;AuBrtOI;;;;EAIE;AvButON;AuDruOE;EACE;AvDuuOJ;AuDpuOE;EACE;AvDsuOJ;AuDnuOE;EACE;AvDquOJ;AuDjuOI;EACE;AvDmuON;AuDhuOI;EACE;AvDkuON;AuD/tOI;EACE;AvDiuON;AuD5tOI;EACE;AvD8tON;AuD3tOI;EACE;AvD6tON;AuD1tOI;EACE;AvD4tON;AwD7wOI;EACE;AxD+wON;AwD5wOI;EACE;AxD8wON;AwD3wOI;EACE;AxD6wON;AwBtwOE;EACE;AxBwwOJ;AwB7xOE;EACE;AxB+xOJ;AwB5xOE;;EAIE;AxB4xOJ;AwBpyOE;EACE;AxBsyOJ;AwBnyOE;;EAIE;AxBmyOJ;AwB3yOE;EACE;AxB6yOJ;AwB1yOE;;EAIE;AxB0yOJ;AwBzwOM;;EAEE;AxB2wOR;AwBxwOM;;EAEE;AxB0wOR;AwBvwOM;EACE;AxBywOR;AwBnwOI;EACE;AxBqwON;AyBtzOE;EACE;AzBwzOJ;AyBrzOE;EACE;AzBuzOJ;AyBpzOE;EACE;AzBszOJ;AyBnzOE;EACE;AzBqzOJ;AyBlzOE;EACE;AzBozOJ;A+C7qOE;EAXA;A/C2rOF;AyBpzOI;EACE;AzBszON;AyBhzOM;EACE;AzBkzOR;AyB/yOM;EACE;AzBizOR;AyB9yOM;EACE;AzBgzOR;AyB5yOI;EACE;AzB8yON;AyB3yOI;EACE;AzB6yON;AyDv1OE;EACE,yBALmC;EAMnC;AzDy1OJ;AyDt1OE;EACE,uBAXwB;EAYxB;AzDw1OJ;AyDt1OI;EACE,uBAb2B;AzDq2OjC;AyDr1OI;EV6HF;A/C2tOF;AyDj1OE;EACE,2CAvBmB;AzD02OvB;AyDj1OI;EACE,0CA1BiB;EA2BjB;AzDm1ON;AyD/0OE;EACE,0CAhCmB;EAiCnB;AzDi1OJ;AyD/0OI;EACE;EACA,2CArCiB;AzDs3OvB;AyD70OE;EAQI;AzDw0ON;A0Bj4OI;EACE;A1Bm4ON;A0Bh4OI;EAGE;A1Bg4ON;A0B73OI;EAGE;A1B63ON;A0B14OI;EACE;A1B44ON;A0Bz4OI;EAGE;A1By4ON;A0Bt4OI;EAGE;A1Bs4ON;A0Bn5OI;EACE;A1Bq5ON;A0Bl5OI;EAGE;A1Bk5ON;A0B/4OI;EAGE;A1B+4ON;A0B12OI;EAGE,uBAhBqB;A1B03O3B;A0Bt2OE;EqB2FA;ErBzFE;A1Bw2OJ;A0Br2OE;EACE,qCA3BoB;A1Bk4OxB;A2B73OE;EACE,qCAbqB;A3B44OzB;A2B36OE;;;EAGE;A3B66OJ;A2B16OE;EACE;A3B46OJ;A2Bz6OE;EAGE,wCADQ;A3B06OZ;A2Bt7OE;;;EAGE;A3Bw7OJ;A2Br7OE;EACE;A3Bu7OJ;A2Bp7OE;EAGE,yCADQ;A3Bq7OZ;A2Bj8OE;;;EAGE;A3Bm8OJ;A2Bh8OE;EACE;A3Bk8OJ;A2B/7OE;EAGE,wCADQ;A3Bg8OZ;A2B74OI;;EACE,qCAhC2B;A3Bg7OjC;A2B34OI;;;EAGE,qCAvCwB;A3Bo7O9B;A2Bz4OM;EACE,qCA5CsB;A3Bu7O9B;A2Br4OI;EAGE,qCADQ;A3Bs4Od;A2B33OM;;EAEE,qCA/DJ;A3B47OJ;A2Bz3OQ;;EAEE,qCAnEN;A3B87OJ;A2Br3OM;EACE,iCAhFiB;EAiFjB;A3Bu3OR;A2Bl3OQ;EACE,iCAtFuB;A3B08OjC;A2Bj3OQ;EACE,iCAzFoB;A3B48O9B;A2B72OE;EACE,gCAzFA;A3Bw8OJ;A2Bt2OE;EACE;EAIA;A3Bq2OJ;A2B31OE;EACE;A3B61OJ;A4B7+OI;EAIE;A5B4+ON;A4Bz+OI;EACE;A5B2+ON;A4Br+OI;EACE;IACE;E5Bu+ON;AACF;A4Bp+OI;;EAIE;A5Bo+ON;A4Bj+OI;EAGE;EACA;A5Bi+ON;A4B99OI;;;EAGE;EACA;A5Bg+ON;A4B59OM;EACE;A5B89OR;A4B39OM;;;EAGE;EACA;A5B69OR;A4Bx9OM;EACE;A5B09OR;A4Bv9OM;;;EAGE;EACA;A5By9OR;A4Br9OI;EACE;EACA;A5Bu9ON;A4Bp9OI;EACE;A5Bs9ON;A4Bn9OI;EACE;A5Bq9ON;A4Bj9OE;EACE;A5Bm9OJ;A4Bh9OE;EACE;A5Bk9OJ;A4B/8OE;;;EAGE;A5Bi9OJ;A0DpjPE;EAYI;A1D2iPN;A6BnjPE;;EAEE,4CAJc;A7ByjPlB;A6BjjPI;;EAEE,yCAVY;EAWZ;A7BmjPN;A6B/iPE;EACE;A7BijPJ;A6B/iPI;EACE;A7BijPN;A6B7iPE;EACE;A7B+iPJ;A6B5iPE;EACE;A7B8iPJ;A6B1iPE;;EAEE;EACA;A7B4iPJ;A6B9/OM;;;;;EACE;A7BogPR;A6B/gPE;EACE;A7BihPJ;A6BlhPE;EACE;A7BohPJ;A6B3gPM;;;;;EACE;A7BihPR;A6B5hPE;EACE;A7B8hPJ;A6B/hPE;EACE;A7BiiPJ;A6BxhPM;;;;;EACE;A7B8hPR;A6BziPE;EACE;A7B2iPJ;A6B5iPE;EACE;A7B8iPJ;A6BriPM;;;;;EACE;A7B2iPR;A6BhiPE;EACE;A7BkiPJ;A6B9hPE;EACE;A7BgiPJ;A6B9hPI;EACE;A7BgiPN;A6B3hPE;;;;;;;EAIE;A7BgiPJ;A6B7hPE;;;EAGE;EACA;A7B+hPJ;A6B1hPE;;;;;EAIE;EACA;A7B6hPJ;A6B5kPM;;;;;EACE;A7BklPR;A6BvkPE;EACE;A7BykPJ;A6BrkPE;EACE;A7BukPJ;A6BrkPI;EACE;A7BukPN;A6BlkPE;;;;;;;EAIE;A7BukPJ;A6BpkPE;;;EAGE;EACA;A7BskPJ;A6BjkPE;;;;;EAIE;EACA;A7BokPJ;A6BnnPM;;;;;EACE;A7BynPR;A6B9mPE;EACE;A7BgnPJ;A6B5mPE;EACE;A7B8mPJ;A6B5mPI;EACE;A7B8mPN;A6BzmPE;;;;;;;EAIE;A7B8mPJ;A6B3mPE;;;EAGE;EACA;A7B6mPJ;A6BxmPE;;;;;EAIE;EACA;A7B2mPJ;A8BrsPE;EACE;EACA;A9BusPJ;A8BrsPI;EApCF;EACA;A9B4uPF;A8BrsPI;EAxCF;EACA;A9BgvPF;A8BrsPI;EA5CF;EACA;A9BovPF;A8BhvPE;;;EAGE;A9BkvPJ;A8B/uPE;;;;;EAKE;A9BivPJ;A8B9uPE;EACE;A9BgvPJ;A+BpwPE;EACE;A/BswPJ;AoC7wPE;EACE;ApC+wPJ;AoC5wPE;;EAEE;ApC8wPJ;AmCpxPE;EAGE;EACA;EY6IF;A/CwoPF;AmChxPE;EACE;AnCkxPJ;AA7qPA;EACE;EACA;EACA;AAgrPF;AAvqPA;EACE;EACA;EACA;AA0qPF;AAvqPA;EACE;AA0qPF;AAvqPA;EACE;EACA;EACA;AA0qPF;AAvqPA;;;EAGE;AA0qPF;AAvqPA;;;EAGE;AA0qPF;AAvqPA;EACE;EACA;AA0qPF;AAvqPA;;EAEE;AA0qPF;AAvqPA;EACE;EACA;EACA;EAEA;EACA;AA0qPF;AAvqPA;AAEA;;EAEE;EACA;AAyqPF;AAtqPA;;EAEE;EACA;EACA;EACA;EACA;EACA;EAEA;EAEA;EAEA;EAEA;EACA;AAyqPF;AAtqPA;EACE;AAyqPF;AAtqPA;EACE;EACA;EACA;AAyqPF;AAtqPA;EACE;EACA;AAyqPF;AAtqPA;EACE;AAyqPF;AAtqPA;EACE;AAyqPF;AAtqPA;EACE;AAyqPF;AAtqPA;;EAEE;EACA;EACA;AAyqPF;AAtqPA;EACE;AAyqPF;AAtqPA;EACE;AAyqPF;AArqPA;EACE;AAwqPF;AArqPA;EACE;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;EAtqPA;IACE;EAwqPF;AACF;AArqPA;EACE;AAuqPF;AAnqPA;EACE;EACA;EACA;EACA;EACA;EACA;AAsqPF;AAnqPA;EACE;EACA;EACA;EACA;AAsqPF;AAnqPA;EACE;EACA;AAsqPF;AAnqPA;EACE;EACA;EACA;EACA;AAsqPF;AAnqPA;EACE;AAsqPF;AAnqPA;EACE;EACA;AAsqPF;AArqPE;EACE;EACA;AAuqPJ;AAnqPA;EACE;EACA;EACA;AAsqPF;AAnqPA;EACE;AAsqPF;AAnqPA;;EAEE;EACA;AAsqPF;AAlqPA;EACE;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;AAmqPF;AA9pPA;EACE;EACA;EACA;EACA;EACA;AAiqPF;AA9pPA,gB","sources":["./projects/rss-reader/src/styles.scss","./projects/rss-reader/src/_hljs.scss","./node_modules/@angular/material/badge/_badge-theme.scss","./node_modules/@angular/material/core/typography/_typography.scss","./node_modules/@angular/material/core/typography/_typography-utils.scss","./node_modules/@angular/material/bottom-sheet/_bottom-sheet-theme.scss","./node_modules/@angular/material/button/_button-theme.scss","./node_modules/@angular/material/button-toggle/_button-toggle-theme.scss","./node_modules/@angular/material/card/_card-theme.scss","./node_modules/@angular/material/checkbox/_checkbox-theme.scss","./node_modules/@angular/material/chips/_chips-theme.scss","./node_modules/@angular/material/table/_table-theme.scss","./node_modules/@angular/material/datepicker/_datepicker-theme.scss","./node_modules/@angular/material/dialog/_dialog-theme.scss","./node_modules/@angular/material/expansion/_expansion-theme.scss","./node_modules/@angular/material/form-field/_form-field-theme.scss","./node_modules/@angular/material/form-field/_form-field-legacy-theme.scss","./node_modules/@angular/material/form-field/_form-field-fill-theme.scss","./node_modules/@angular/material/form-field/_form-field-outline-theme.scss","./node_modules/@angular/material/grid-list/_grid-list-theme.scss","./node_modules/@angular/material/core/style/_list-common.scss","./node_modules/@angular/material/input/_input-theme.scss","./node_modules/@angular/material/menu/_menu-theme.scss","./node_modules/@angular/material/paginator/_paginator-theme.scss","./node_modules/@angular/material/radio/_radio-theme.scss","./node_modules/@angular/material/select/_select-theme.scss","./node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss","./node_modules/@angular/material/slider/_slider-theme.scss","./node_modules/@angular/material/stepper/_stepper-theme.scss","./node_modules/@angular/material/tabs/_tabs-theme.scss","./node_modules/@angular/material/toolbar/_toolbar-theme.scss","./node_modules/@angular/material/tooltip/_tooltip-theme.scss","./node_modules/@angular/material/list/_list-theme.scss","./node_modules/@angular/material/core/option/_option-theme.scss","./node_modules/@angular/material/core/option/_optgroup-theme.scss","./node_modules/@angular/material/snack-bar/_snack-bar-theme.scss","./node_modules/@angular/material/tree/_tree-theme.scss","./node_modules/@angular/material/core/ripple/_ripple.scss","./node_modules/@angular/cdk/a11y/_index.scss","./node_modules/@angular/cdk/overlay/_index.scss","./node_modules/@angular/cdk/text-field/_index.scss","./node_modules/@angular/material/core/focus-indicators/_private.scss","./node_modules/@angular/material/core/style/_layout-common.scss","./projects/rss-reader/src/_theming.scss","./node_modules/@angular/material/core/ripple/_ripple-theme.scss","./node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss","./node_modules/@angular/material/core/_core-theme.scss","./node_modules/@angular/material/core/style/_elevation.scss","./node_modules/@angular/material/autocomplete/_autocomplete-theme.scss","./node_modules/@angular/material/divider/_divider-theme.scss","./node_modules/@angular/material/expansion/_expansion-mixins.scss","./node_modules/@angular/material/core/style/_form-common.scss","./node_modules/@angular/material/form-field/_form-field-standard-theme.scss","./node_modules/@angular/material/icon/_icon-theme.scss","./node_modules/@angular/material/core/style/_vendor-prefixes.scss","./node_modules/@angular/material/progress-bar/_progress-bar-theme.scss","./node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss","./node_modules/@angular/material/sidenav/_sidenav-theme.scss","./node_modules/@angular/material/sort/_sort-theme.scss","./node_modules/@angular/material/core/theming/_palette.scss"],"sourcesContent":["/* You can add global styles to this file, and also import other style files */\n@use '@angular/material' as mat;\n\n@import 'theming';\n/* Select Angular Material theming. */\n\n$rss-reader-typography: mat.define-typography-config(\n  $font-family: 'Merriweather, sans-serif',\n  $title: mat.define-typography-level(20px, 32px, 700),\n  $body-2: mat.define-typography-level(14px, 24px, 700),\n  $button: mat.define-typography-level(14px, 14px, 700)\n);\n@include mat.core($rss-reader-typography);\n// TODO: Remove the following lines\n$deeppurple-amber-primary: mat.define-palette(mat.$deep-purple-palette);\n$deeppurple-amber-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);\n$deeppurple-amber-theme: mat.define-light-theme($deeppurple-amber-primary, $deeppurple-amber-accent);\n$pink-bluegrey-primary: mat.define-palette(mat.$pink-palette);\n$pink-bluegrey-accent: mat.define-palette(mat.$blue-grey-palette, A200, A100, A400);\n$pink-bluegrey-theme: mat.define-dark-theme($pink-bluegrey-primary, $pink-bluegrey-accent);\n$purple-green-primary: mat.define-palette(mat.$purple-palette);\n$purple-green-accent: mat.define-palette(mat.$green-palette, A200, A100, A400);\n$purple-green-theme: mat.define-dark-theme($purple-green-primary, $purple-green-accent);\n$indigo-pink-primary: mat.define-palette(mat.$indigo-palette);\n$indigo-pink-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);\n$indigo-pink-theme: mat.define-light-theme($indigo-pink-primary, $indigo-pink-accent);\n.deeppurple-amber {\n  @include rss-reader-theme($deeppurple-amber-theme);\n  @include mat.all-component-themes($deeppurple-amber-theme);\n  /** Adapted from https://github.com/atom-material/atom-material-syntax-light */\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #FAFAFA;\n    color: #37474f;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs>*::selection,\n  .hljs-section {\n    background-color: #D6EDEA;\n  }\n  .hljs-comment {\n    color: #B0BEC5;\n    font-style: italic;\n  }\n  .hljs-tag,\n  .hljs-selector-tag,\n  .hljs-regexp,\n  .hljs-meta {\n    color: #9c27b0;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #0d904f;\n  }\n  .hljs-number,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #80CBC4;\n  }\n  .hljs-name,\n  .hljs-keyword,\n  .hljs-type,\n  .hljs-attribute {\n    color: #3b78e7;\n  }\n  .hljs-title,\n  .hljs-function>.hljs-title,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #6182B8;\n  }\n  .hljs-params {\n    color: #d81b60;\n  }\n  .hljs-addition {\n    color: #3b78e7;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    color: #E53935;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #8796B0;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n\n.pink-bluegrey {\n  @include rss-reader-theme($pink-bluegrey-theme);\n  @include mat.all-component-themes($pink-bluegrey-theme);\n}\n\n.purple-green {\n  @include rss-reader-theme($purple-green-theme);\n  @include mat.all-component-themes($purple-green-theme);\n}\n\n// Default theme for the app\nbody {\n  @include rss-reader-theme($indigo-pink-theme);\n  @include mat.all-component-themes($indigo-pink-theme);\n}\n\n.rss-reader-card {\n  width: 350px;\n  box-sizing: border-box;\n  margin: 16px;\n  // .feed-card {\n  //   @include mat-elevation-transition;\n  //   &:hover, &:active {\n  //     @include mat-elevation(8);\n  //   }\n  // }\n}\n\n.rss-reader-cards-container {\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n}\n\n.cdk-overlay-backdrop.cdk-overlay-backdrop-showing.dark-backdrop {\n  background: #000;\n}\n\n.open-in-new-icon {\n  width: 20px;\n  height: 20px;\n  font-size: 20px;\n}\n\n.mat-button:not([no-caps]),\n.mat-raised-button:not([no-caps]),\n.mat-simple-snackbar-action:not([no-caps]) {\n  text-transform: uppercase;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  height: 100%;\n}\n\npre.hljs,\ncode.hljs {\n  white-space: pre-wrap;\n}\n\n.refreshing>div {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  justify-content: center;\n}\n\n/* Extracted from market2 */\n\nmat-spinner.start-indicator svg,\nmat-spinner.start-indicator {\n  width: 22px !important;\n  height: 22px !important;\n}\n\n.start,\n.center {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: -1;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-direction: column;\n  flex-direction: column;\n  -webkit-align-items: center;\n  align-items: center;\n  -webkit-justify-content: center;\n  justify-content: center;\n  text-align: center;\n}\n\n.checkbox {\n  margin: 6px;\n}\n\n.custom-snackbar {\n  display: flex;\n  justify-content: space-between;\n  line-height: 20px;\n}\n\n.custom-snackbar-action {\n  flex-shrink: 0;\n  margin-left: 48px;\n}\n\n.app-sidenav {\n  width: 240px; // @include mat-elevation(3);\n}\n\n.selection-dialog>mat-dialog-container>selection-dialog>mat-dialog-content {\n  padding: 0;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.warning-icon,\n.build-icon {\n  font-size: 72px;\n  width: 72px !important;\n  height: 72px !important;\n}\n\n.page-not-found-container {\n  padding: 4px;\n}\n\n.app-content {\n  margin: 2.5%;\n}\n\n// Excerpt from snackbar demo on material2's demoapp\n.party {\n  animation: party 5000ms infinite;\n}\n\n@keyframes party {\n  0% {\n    background-color: #00f;\n  }\n  10% {\n    background-color: #8e44ad;\n  }\n  20% {\n    background-color: #1abc9c;\n  }\n  30% {\n    background-color: #d35400;\n  }\n  40% {\n    background-color: #00f;\n  }\n  50% {\n    background-color: #34495e;\n  }\n  60% {\n    background-color: #00f;\n  }\n  70% {\n    background-color: #2980b9;\n  }\n  80% {\n    background-color: #f1c40f;\n  }\n  90% {\n    background-color: #2980b9;\n  }\n  100% {\n    background-color: #0ff;\n  }\n}\n\n.red {\n  background-color: red !important;\n}\n\n// Styles for table\ntable {\n  border-collapse: collapse;\n  border-radius: 2px;\n  border-spacing: 0;\n  margin: 0 0 32px 0;\n  width: 100%;\n  box-shadow: 0 2px 2px rgba(0, 0, 0, .24), 0 0 2px rgba(0, 0, 0, .12);\n}\n\nth {\n  font-weight: 400;\n  max-width: 100px;\n  padding: 13px 32px;\n  text-align: left\n}\n\ntd {\n  font-weight: 400;\n  padding: 8px 16px\n}\n\n.post-dialog .mat-dialog-container {\n  position: absolute;\n  top: 18px;\n  bottom: 0px;\n  width: 100%;\n}\n\n.post-dialog {\n  position: relative;\n}\n\n.autocomplete-option .autocomplete-option-img {\n  vertical-align: middle;\n  margin-right: 8px;\n  &[dir=rtl] {\n    margin-right: 0;\n    margin-left: 8px;\n  }\n}\n\n.form-group {\n  min-width: 150px;\n  max-width: 500px;\n  width: 100%;\n}\n\n.form-full-width {\n  width: 100%;\n}\n\nhtml,\nbody {\n  width: 100%;\n  height: 100%;\n}\n\n// Style based from StackOverflow's CSS.\nkbd {\n  display: inline-block;\n  margin: 0 .1em;\n  padding: .1em .6em;\n  font-size: 11px;\n  line-height: 1.4;\n  // color: #242729;\n  border: 1px solid #adb3b9;\n  border-radius: 3px;\n  // box-shadow: 0 1px 0 rgba(12,13,14,.2), 0 0 0 2px #fff inset;\n  white-space: nowrap;\n}\n\n// Adapted from\n// https://github.com/EdricChan03/StudyBuddy-web/blob/3b1e7709c8954fc73fc934cbf6f882de3ed25e2e/src/styles.scss#L244-L250\n.badge {\n  letter-spacing: 0.04em;\n  font-weight: 500;\n  font-size: 0.8em;\n  padding: 2px 8px;\n  border-radius: 16px;\n}\n\n/* End styles */\n","// Highlight.js styles\n// NOTE: If the theming file is imported, you do not have to reimport the theming file in your main styles file\n\n/** Adapted from https://github.com/atom-material/atom-material-syntax-light */\n@mixin hljs-light() {\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #fafafa;\n    color: #37474f;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs > *::selection,\n  .hljs-section {\n    background-color: #d6edea;\n  }\n  .hljs-comment {\n    color: #b0bec5;\n    font-style: italic;\n  }\n  .hljs-tag,\n  .hljs-selector-tag,\n  .hljs-regexp,\n  .hljs-meta {\n    color: #9c27b0;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #0d904f;\n  }\n  .hljs-number,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #80cbc4;\n  }\n  .hljs-name,\n  .hljs-keyword,\n  .hljs-type,\n  .hljs-attribute {\n    color: #3b78e7;\n  }\n  .hljs-title,\n  .hljs-function > .hljs-title,\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #6182b8;\n  }\n  .hljs-params {\n    color: #d81b60;\n  }\n  .hljs-addition {\n    color: #3b78e7;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    color: #e53935;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-id,\n  .hljs-selector-class {\n    color: #8796b0;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n\n/*\nOrginal Style from https://github.com/Kelbster/highlightjs-material-dark-theme  (c) Kelby Gassmanl <kelby.gassman@gmail.com>\n*/\n\n@mixin hljs-dark() {\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    padding: 1em;\n    background: #2b2b2d;\n    color: #cdd3d8;\n    -webkit-font-smoothing: antialiased;\n    text-size-adjust: 100%;\n    font: 300 100%/1 Roboto Mono, monospace;\n    font-size: 14px;\n  }\n  .hljs > *::selection {\n    background-color: #3e4451;\n  }\n  .hljs-comment {\n    color: #656565;\n    font-style: italic;\n  }\n  .hljs-selector-tag {\n    color: #c792ea;\n  }\n  .hljs-string,\n  .hljs-subst {\n    color: #9ccc65;\n  }\n  .hljs-number,\n  .hljs-regexp,\n  .hljs-variable,\n  .hljs-template-variable {\n    color: #f77669;\n  }\n  .hljs-keyword {\n    color: #c792ea;\n  }\n  .hljs-function > .hljs-title {\n    color: #75a5ff;\n  }\n  .hljs-tag {\n    color: #ce93d8;\n  }\n  .hljs-name {\n    color: #4dd0e1;\n  }\n  .hljs-type {\n    color: #da4939;\n  }\n  .hljs-attribute {\n    color: #80cbbf;\n  }\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-built_in,\n  .hljs-builtin-name,\n  .hljs-link {\n    color: #c792ea;\n  }\n  .hljs-params {\n    color: #eefff7;\n  }\n  .hljs-meta {\n    color: #75a5ff;\n  }\n  .hljs-title {\n    color: #75a5ff;\n  }\n  .hljs-section {\n    color: #ffc66d;\n  }\n  .hljs-addition {\n    background-color: #144212;\n    color: #e6e1dc;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-deletion {\n    background-color: #600;\n    color: #e6e1dc;\n    display: inline-block;\n    width: 100%;\n  }\n  .hljs-selector-class {\n    color: #ffcb68;\n  }\n  .hljs-selector-id {\n    color: #f77669;\n  }\n  .hljs-emphasis {\n    font-style: italic;\n  }\n  .hljs-strong {\n    font-weight: bold;\n  }\n  .hljs-link {\n    text-decoration: underline;\n  }\n}\n","// This contains all of the styles for the badge\n// rather than just the color/theme because of\n// no style sheet support for directives.\n@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:math';\n@use '@angular/cdk';\n\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$font-size: 12px;\n$font-weight: 600;\n$default-size: 22px !default;\n$small-size: $default-size - 6;\n$large-size: $default-size + 6;\n$_badge-structure-emitted: false !default;\n\n// Mixin for building offset given different sizes\n@mixin _badge-size($size) {\n  // This mixin isn't used in the context of a theme so we can disable the ampersand check.\n  // stylelint-disable material/no-ampersand-beyond-selector-start\n  .mat-badge-content {\n    width: $size;\n    height: $size;\n    line-height: $size;\n  }\n\n  &.mat-badge-above {\n    .mat-badge-content {\n      top: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-below {\n    .mat-badge-content {\n      bottom: math.div(-$size, 2);\n    }\n  }\n\n  &.mat-badge-before {\n    .mat-badge-content {\n      left: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-before {\n    .mat-badge-content {\n      left: auto;\n      right: -$size;\n    }\n  }\n\n  &.mat-badge-after {\n    .mat-badge-content {\n      right: -$size;\n    }\n  }\n\n  [dir='rtl'] &.mat-badge-after {\n    .mat-badge-content {\n      right: auto;\n      left: -$size;\n    }\n  }\n\n  &.mat-badge-overlap {\n    &.mat-badge-before {\n      .mat-badge-content {\n        left: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-before {\n      .mat-badge-content {\n        left: auto;\n        right: math.div(-$size, 2);\n      }\n    }\n\n    &.mat-badge-after {\n      .mat-badge-content {\n        right: math.div(-$size, 2);\n      }\n    }\n\n    [dir='rtl'] &.mat-badge-after {\n      .mat-badge-content {\n        right: auto;\n        left: math.div(-$size, 2);\n      }\n    }\n  }\n  // stylelint-enable\n}\n\n// Structural styles for the badge. They have to be included as a part of the theme,\n// because the badge is a directive and we have no other way of attaching styles to it.\n@mixin _badge-structure {\n  .mat-badge {\n    position: relative;\n  }\n\n  // The badge should make sure its host is overflow visible so that the badge content\n  // can be rendered outside of the element. Some components such as <mat-icon> explicitly\n  // style `overflow: hidden` so this requires extra specificity so that it does not\n  // depend on style load order.\n  .mat-badge.mat-badge {\n    overflow: visible;\n  }\n\n  .mat-badge-hidden {\n    .mat-badge-content {\n      display: none;\n    }\n  }\n\n  .mat-badge-content {\n    position: absolute;\n    text-align: center;\n    display: inline-block;\n    border-radius: 50%;\n    transition: transform 200ms ease-in-out;\n    transform: scale(0.6);\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    pointer-events: none;\n  }\n\n  .ng-animate-disabled .mat-badge-content,\n  .mat-badge-content._mat-animation-noopable {\n    transition: none;\n  }\n\n  // The active class is added after the element is added\n  // so it can animate scale to default\n  .mat-badge-content.mat-badge-active {\n    // Scale to `none` instead of `1` to avoid blurry text in some browsers.\n    transform: none;\n  }\n\n  .mat-badge-small {\n    @include _badge-size($small-size);\n  }\n\n  .mat-badge-medium {\n    @include _badge-size($default-size);\n  }\n\n  .mat-badge-large {\n    @include _badge-size($large-size);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $primary: map.get($config, primary);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-badge-content {\n    color: theming.get-color-from-palette($primary, default-contrast);\n    background: theming.get-color-from-palette($primary);\n\n    @include cdk.high-contrast(active, off) {\n      outline: solid 1px;\n      border-radius: 0;\n    }\n  }\n\n  .mat-badge-accent {\n    .mat-badge-content {\n      background: theming.get-color-from-palette($accent);\n      color: theming.get-color-from-palette($accent, default-contrast);\n    }\n  }\n\n  .mat-badge-warn {\n    .mat-badge-content {\n      color: theming.get-color-from-palette($warn, default-contrast);\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-badge-disabled {\n    .mat-badge-content {\n      $app-background: theming.get-color-from-palette($background, 'background');\n      $badge-color: theming.get-color-from-palette($foreground, disabled-button);\n\n      // The disabled color usually has some kind of opacity, but because the badge is overlayed\n      // on top of something else, it won't look good if it's opaque. If it is a color *type*,\n      // we convert it into a solid color by taking the opacity from the rgba value and using\n      // the value to determine the percentage of the background to put into foreground when\n      // mixing the colors together.\n      @if (meta.type-of($badge-color) == color and meta.type-of($app-background) == color) {\n        $badge-opacity: opacity($badge-color);\n        background: color.mix($app-background, rgba($badge-color, 1), (1 - $badge-opacity) * 100%);\n      }\n      @else {\n        background: $badge-color;\n      }\n\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-badge-content {\n    font-weight: $font-weight;\n    font-size: $font-size;\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-badge-small .mat-badge-content {\n    // Set the font size to 75% of the original.\n    font-size: $font-size * 0.75;\n  }\n\n  .mat-badge-large .mat-badge-content {\n    font-size: $font-size * 2;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    // Try to reduce the number of times that the structural styles are emitted.\n    @if not $_badge-structure-emitted {\n      @include _badge-structure;\n\n      // Only flip the flag if the mixin is included at the top level. Otherwise the first\n      // inclusion might be inside of a theme class which will exclude the structural styles\n      // from all other themes.\n      @if not & {\n        $_badge-structure-emitted: true !global;\n      }\n    }\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'typography-utils';\n@use '../theming/theming';\n\n/// Defines a typography level from the Material Design spec.\n/// @param {String} $font-size The font-size for this level.\n/// @param {String | Number} $line-height The line-height for this level.\n/// @param {String | Number} $font-weight The font-weight for this level.\n/// @param {String} $font-family The font-family for this level.\n/// @param {String} $letter-spacing The letter-spacing for this level.\n/// @returns {Map} A map representing the definition of this typographic level.\n@function define-typography-level(\n  $font-size,\n  $line-height: $font-size,\n  $font-weight: 400,\n  $font-family: null,\n  $letter-spacing: normal) {\n\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight,\n    font-family: $font-family,\n    letter-spacing: $letter-spacing\n  );\n}\n\n/// Defines a collection of typography levels to configure typography for an application.\n/// Any level not specified defaults to the values defined in the Material Design specification:\n/// https://material.io/guidelines/style/typography.html.\n///\n/// Note that the Material Design specification does not describe explicit letter-spacing values.\n/// The values here come from reverse engineering the Material Design examples.\n/// @param {String} $font-family Default font-family for levels that don't specify font-family.\n/// @param {Map} $display-4 Configuration for the \"display-4\" typographic level.\n/// @param {Map} $display-3 Configuration for the \"display-3\" typographic level.\n/// @param {Map} $display-2 Configuration for the \"display-2\" typographic level.\n/// @param {Map} $display-1 Configuration for the \"display-1\" typographic level.\n/// @param {Map} $headline Configuration for the \"headline\" typographic level.\n/// @param {Map} $title Configuration for the \"title\" typographic level.\n/// @param {Map} $subheading-2 Configuration for the \"subheading-2\" typographic level.\n/// @param {Map} $subheading-1 Configuration for the \"subheading-1\" typographic level.\n/// @param {Map} $body-2 Configuration for the \"body-2\" typographic level.\n/// @param {Map} $body-1 Configuration for the \"body-1\" typographic level.\n/// @param {Map} $caption Configuration for the \"caption\" typographic level.\n/// @param {Map} $button Configuration for the \"button\" typographic level.\n/// @param {Map} $input Configuration for the \"input\" typographic level.\n/// @returns {Map} A typography config for the application.\n@function define-typography-config(\n  $font-family:   'Roboto, \"Helvetica Neue\", sans-serif',\n  $display-4:     define-typography-level(112px, 112px, 300, $letter-spacing: -0.05em),\n  $display-3:     define-typography-level(56px, 56px, 400, $letter-spacing: -0.02em),\n  $display-2:     define-typography-level(45px, 48px, 400, $letter-spacing: -0.005em),\n  $display-1:     define-typography-level(34px, 40px, 400),\n  $headline:      define-typography-level(24px, 32px, 400),\n  $title:         define-typography-level(20px, 32px, 500),\n  $subheading-2:  define-typography-level(16px, 28px, 400),\n  $subheading-1:  define-typography-level(15px, 24px, 400),\n  $body-2:        define-typography-level(14px, 24px, 500),\n  $body-1:        define-typography-level(14px, 20px, 400),\n  $caption:       define-typography-level(12px, 20px, 400),\n  $button:        define-typography-level(14px, 14px, 500),\n  // Line-height must be unit-less fraction of the font-size.\n  $input:         define-typography-level(inherit, 1.125, 400)\n) {\n\n  // Declare an initial map with all of the levels.\n  $config: (\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n\n  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.\n  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.\n  @each $key, $level in $config {\n    @if map.get($level, font-family) == null {\n      $new-level: map.merge($level, (font-family: $font-family));\n      $config: map.merge($config, ($key: $new-level));\n    }\n  }\n\n  // Add the base font family to the config.\n  @return map.merge($config, (font-family: $font-family));\n}\n\n// Whether a config is for the Material Design 2018 typography system.\n@function private-typography-is-2018-config($config) {\n  @return map.get($config, headline-1) != null;\n}\n\n// Whether a config is for the Material Design 2014 typography system.\n@function private-typography-is-2014-config($config) {\n  @return map.get($config, headline) != null;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2014 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n//\n// Components using this function should be migrated to normalize to the 2018 style config instead.\n// New components should not use this function.\n@function private-typography-to-2014-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2014-config($config) {\n    $args: (\n        display-4: map.get($config, headline-1),\n        display-3: map.get($config, headline-2),\n        display-2: map.get($config, headline-3),\n        display-1: map.get($config, headline-4),\n        headline: map.get($config, headline-5),\n        title: map.get($config, headline-6),\n        subheading-2: map.get($config, subtitle-1),\n        subheading-1: map.get($config, subtitle-2),\n        body-2: map.get($config, body-1),\n        body-1: map.get($config, body-2),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n    );\n    $non-null-args: ();\n    @each $key, $value in $args {\n      @if $value != null {\n        $non-null-args: map.merge($non-null-args, ($key: $value));\n      }\n    }\n    @return define-typography-config($non-null-args...);\n  }\n  @return $config;\n}\n\n// Given a config for either the 2014 or 2018 Material Design typography system,\n// produces a normalized typography config for the 2018 Material Design typography system.\n// 2014 - https://material.io/archive/guidelines/style/typography.html#typography-styles\n// 2018 - https://material.io/design/typography/the-type-system.html#type-scale\n@function private-typography-to-2018-config($config) {\n  @if $config == null {\n    @return null;\n  }\n  @if not private-typography-is-2018-config($config) {\n    @return (\n        headline-1: map.get($config, display-4),\n        headline-2: map.get($config, display-3),\n        headline-3: map.get($config, display-2),\n        headline-4: map.get($config, display-1),\n        headline-5: map.get($config, headline),\n        headline-6: map.get($config, title),\n        subtitle-1: map.get($config, subheading-2),\n\n        // These mappings are odd, but body-2 in the 2014 system actually looks closer to subtitle-2\n        // in the 2018 system, and subeading-1 in the 2014 system looks more like body-1 in the 2018\n        // system.\n        subtitle-2: map.get($config, body-2),\n        body-1: map.get($config, subheading-1),\n\n        body-2: map.get($config, body-1),\n        button: map.get($config, button),\n        caption: map.get($config, caption),\n        overline: if(map.get($config, overline), map.get($config, overline),\n            define-typography-level(12px, 32px, 500)\n        )\n    );\n  }\n  @return $config;\n}\n\n/// Emits baseline typographic styles based on a given config.\n/// @param {Map} $config-or-theme A typography config for an entire theme.\n/// @param {String} $selector Ancestor selector under which native elements, such as h1, will\n///     be styled.\n@mixin typography-hierarchy($config-or-theme, $selector: '.mat-typography') {\n  $config: private-typography-to-2014-config(theming.get-typography-config($config-or-theme));\n\n  // Note that it seems redundant to prefix the class rules with the `$selector`, however it's\n  // necessary if we want to allow people to overwrite the tag selectors. This is due to\n  // selectors like `#{$selector} h1` being more specific than ones like `.mat-title`.\n  .mat-h1,\n  .mat-headline,\n  #{$selector} .mat-h1,\n  #{$selector} .mat-headline,\n  #{$selector} h1 {\n    @include typography-utils.typography-level($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2,\n  .mat-title,\n  #{$selector} .mat-h2,\n  #{$selector} .mat-title,\n  #{$selector} h2 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3,\n  .mat-subheading-2,\n  #{$selector} .mat-h3,\n  #{$selector} .mat-subheading-2,\n  #{$selector} h3 {\n    @include typography-utils.typography-level($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4,\n  .mat-subheading-1,\n  #{$selector} .mat-h4,\n  #{$selector} .mat-subheading-1,\n  #{$selector} h4 {\n    @include typography-utils.typography-level($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5,\n  #{$selector} .mat-h5,\n  #{$selector} h5 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.83),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-h6,\n  #{$selector} .mat-h6,\n  #{$selector} h6 {\n    @include typography-utils.font-shorthand(\n       // calc is used here to support css variables\n      calc(#{typography-utils.font-size($config, body-1)} * 0.67),\n      typography-utils.font-weight($config, body-1),\n      typography-utils.line-height($config, body-1),\n      typography-utils.font-family($config, body-1)\n    );\n\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong,\n  .mat-body-2,\n  #{$selector} .mat-body-strong,\n  #{$selector} .mat-body-2 {\n    @include typography-utils.typography-level($config, body-2);\n  }\n\n  .mat-body,\n  .mat-body-1,\n  #{$selector} .mat-body,\n  #{$selector} .mat-body-1,\n  #{$selector} {\n    @include typography-utils.typography-level($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small,\n  .mat-caption,\n  #{$selector} .mat-small,\n  #{$selector} .mat-caption {\n    @include typography-utils.typography-level($config, caption);\n  }\n\n  .mat-display-4,\n  #{$selector} .mat-display-4 {\n    @include typography-utils.typography-level($config, display-4);\n    margin: 0 0 56px;\n  }\n\n  .mat-display-3,\n  #{$selector} .mat-display-3 {\n    @include typography-utils.typography-level($config, display-3);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-2,\n  #{$selector} .mat-display-2 {\n    @include typography-utils.typography-level($config, display-2);\n    margin: 0 0 64px;\n  }\n\n  .mat-display-1,\n  #{$selector} .mat-display-1 {\n    @include typography-utils.typography-level($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n","@use 'sass:list';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'sass:string';\n\n\n// Utility for fetching a nested value from a typography config.\n@function _mat-get-type-value($config, $level, $name) {\n  @return map.get(map.get($config, $level), $name);\n}\n\n/// Gets the font size for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-size($config, $level) {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n/// Gets the line height for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function line-height($config, $level) {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n/// Gets the font weight for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-weight($config, $level) {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n/// Gets the letter spacing for a level inside a typography config.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function letter-spacing($config, $level) {\n  @return _mat-get-type-value($config, $level, letter-spacing);\n}\n\n/// Gets the font-family from a typography config and removes the quotes around it.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@function font-family($config, $level: null) {\n  $font-family: map.get($config, font-family);\n\n  @if $level != null {\n    $font-family: _mat-get-type-value($config, $level, font-family);\n  }\n\n  // Guard against unquoting non-string values, because it's deprecated.\n  @return if(meta.type-of($font-family) == string, string.unquote($font-family), $font-family);\n}\n\n/// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to\n/// the individual properties if a value that isn't allowed in the shorthand is passed in.\n/// @param {String} $font-size The font-size value.\n/// @param {String | Number} $font-weight The font-weight value.\n/// @param {String | Number} $line-height The line-height value.\n/// @param {String} $font-family The font-family value.\n/// @returns {String} The `font` shorthand value combining the given parts.\n@mixin font-shorthand($font-size, $font-weight, $line-height, $font-family) {\n  // If any of the values are set to `inherit`, we can't use the shorthand\n  // so we fall back to passing in the individual properties.\n  @if ($font-size == inherit or\n       $font-weight == inherit or\n       $line-height == inherit or\n       $font-family == inherit or\n       $font-size == null or\n       $font-weight == null or\n       $line-height == null or\n       $font-family == null) {\n\n    font-size: $font-size;\n    font-weight: $font-weight;\n    line-height: $line-height;\n    font-family: $font-family;\n  }\n  @else {\n    // Otherwise use the shorthand `font`, because it's the least amount of bytes.\n    font: $font-weight list.slash($font-size, $line-height) $font-family;\n  }\n}\n\n/// Emits CSS styles for the given typography level.\n/// @param {Map} $config A typography config.\n/// @param {Map} $level A typography level.\n@mixin typography-level($config, $level) {\n  $font-size: font-size($config, $level);\n  $font-weight: font-weight($config, $level);\n  $line-height: line-height($config, $level);\n  $font-family: font-family($config, $level);\n\n  @include font-shorthand($font-size, $font-weight, $line-height, $font-family);\n  letter-spacing: letter-spacing($config, $level);\n}\n\n/// Coerce a value to `em` if it is a unitless number, otherwise returns\n/// the value provided.\n@function private-coerce-unitless-to-em($value) {\n  @return if(math.is-unitless($value), 1em * $value, $value);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-bottom-sheet-container {\n    @include private.private-theme-elevation(16, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-bottom-sheet-container {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-bottom-sheet') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$_ripple-opacity: 0.1;\n\n// Applies a focus style to an mat-button element for each of the supported palettes.\n@mixin _focus-overlay-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($accent);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: theming.get-color-from-palette($warn);\n  }\n\n  &.mat-button-disabled .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n// Applies the background color for a ripple. If the value provided is not a Sass color,\n// we assume that we've been given a CSS variable. Since we can't perform alpha-blending\n// on a CSS variable, we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $hue, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $hue, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _ripple-color($theme, $hue, $opacity: $_ripple-opacity) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    @include _ripple-background($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    @include _ripple-background($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    @include _ripple-background($warn, $hue, $opacity);\n  }\n}\n\n// Applies a property to an mat-button element for each of the supported palettes.\n@mixin _theme-property($theme, $property, $hue) {\n  $primary: map.get($theme, primary);\n  $accent: map.get($theme, accent);\n  $warn: map.get($theme, warn);\n  $background: map.get($theme, background);\n  $foreground: map.get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: theming.get-color-from-palette($primary, $hue);\n  }\n  &.mat-accent {\n    #{$property}: theming.get-color-from-palette($accent, $hue);\n  }\n  &.mat-warn {\n    #{$property}: theming.get-color-from-palette($warn, $hue);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &.mat-button-disabled {\n    &.mat-button-disabled {\n      $palette: if($property == 'color', $foreground, $background);\n      #{$property}: theming.get-color-from-palette($palette, disabled-button);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-button, .mat-icon-button, .mat-stroked-button {\n    // Buttons without a background color should inherit the font color. This is necessary to\n    // ensure that the button is readable on custom background colors. It's wrong to always assume\n    // that those buttons are always placed inside of containers with the default background\n    // color of the theme (e.g. themed toolbars).\n    color: inherit;\n    background: transparent;\n\n    @include _theme-property($config, 'color', text);\n    @include _focus-overlay-color($config);\n\n    // Setup the ripple color to be based on the text color. This ensures that the ripples\n    // are matching with the current theme palette and are in contrast to the background color\n    // (e.g in themed toolbars).\n    .mat-ripple-element {\n      opacity: $_ripple-opacity;\n      background-color: currentColor;\n    }\n  }\n\n  .mat-button-focus-overlay {\n    background: map.get($foreground, base);\n  }\n\n  // Note: this needs a bit extra specificity, because we're not guaranteed the inclusion\n  // order of the theme styles and the button reset may end up resetting this as well.\n  .mat-stroked-button:not(.mat-button-disabled) {\n    border-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-flat-button, .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default font and background color when not using any color palette.\n    color: theming.get-color-from-palette($foreground, text);\n    background-color: theming.get-color-from-palette($background, raised-button);\n\n    @include _theme-property($config, 'color', default-contrast);\n    @include _theme-property($config, 'background-color', default);\n    @include _ripple-color($config, default-contrast);\n  }\n\n  .mat-stroked-button, .mat-flat-button {\n    @include private.private-theme-overridable-elevation(0, $config);\n  }\n\n  .mat-raised-button {\n    @include private.private-theme-overridable-elevation(2, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(8, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-fab, .mat-mini-fab {\n    @include private.private-theme-overridable-elevation(6, $config);\n\n    &:not(.mat-button-disabled):active {\n      @include private.private-theme-overridable-elevation(12, $config);\n    }\n\n    &.mat-button-disabled {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button, .mat-raised-button, .mat-icon-button, .mat-stroked-button,\n  .mat-flat-button, .mat-fab, .mat-mini-fab {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './button-toggle-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $divider-color: theming.get-color-from-palette($foreground, divider);\n  $theme-divider-color: map.get($foreground, divider);\n\n  // By default the theme usually has an rgba color for the dividers, which can\n  // stack up with the background of a button toggle. This can cause the border\n  // of a selected toggle to look different from an deselected one. We use a solid\n  // color to ensure that the border always stays the same.\n  $divider-color: if(type-of($theme-divider-color) == color,\n    theming.private-rgba-to-hex($theme-divider-color, map.get($background, card)),\n    $theme-divider-color\n  );\n\n  .mat-button-toggle-standalone,\n  .mat-button-toggle-group {\n    @include private.private-theme-overridable-elevation(2, $config);\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    &:not([class*='mat-elevation-z']) {\n      box-shadow: none;\n    }\n  }\n\n  .mat-button-toggle {\n    color: theming.get-color-from-palette($foreground, hint-text);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button);\n    }\n  }\n\n  .mat-button-toggle-appearance-standard {\n    color: theming.get-color-from-palette($foreground, text);\n    background: theming.get-color-from-palette($background, card);\n\n    .mat-button-toggle-focus-overlay {\n      background-color: theming.get-color-from-palette($background, focused-button, 1);\n    }\n  }\n\n  .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: solid 1px $divider-color;\n  }\n\n  [dir='rtl'] .mat-button-toggle-group-appearance-standard .mat-button-toggle + .mat-button-toggle {\n    border-left: none;\n    border-right: solid 1px $divider-color;\n  }\n\n  .mat-button-toggle-group-appearance-standard.mat-button-toggle-vertical {\n    .mat-button-toggle + .mat-button-toggle {\n      border-left: none;\n      border-right: none;\n      border-top: solid 1px $divider-color;\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: theming.get-color-from-palette($background, selected-button);\n    color: theming.get-color-from-palette($foreground, secondary-text);\n\n    &.mat-button-toggle-appearance-standard {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n  }\n\n  .mat-button-toggle-disabled {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n    background-color: theming.get-color-from-palette($background, disabled-button-toggle);\n\n    &.mat-button-toggle-appearance-standard {\n      background: theming.get-color-from-palette($background, card);\n    }\n\n    &.mat-button-toggle-checked {\n      background-color: theming.get-color-from-palette($background, selected-disabled-button);\n    }\n  }\n\n  .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,\n  .mat-button-toggle-group-appearance-standard {\n    border: solid 1px $divider-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-button-toggle {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $standard-height: compatibility.private-density-prop-value(\n      button-toggle-variables.$standard-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-button-toggle-appearance-standard .mat-button-toggle-label-content {\n      line-height: $standard-height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-card {\n    @include private.private-theme-overridable-elevation(1, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Needs extra specificity to be able to override the elevation selectors.\n    &.mat-card-flat {\n      @include private.private-theme-overridable-elevation(0, $config);\n    }\n  }\n\n  .mat-card-subtitle {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-card {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: typography-utils.font-size($config, headline);\n      weight: typography-utils.font-weight($config, title);\n    }\n  }\n\n  .mat-card-header .mat-card-title {\n    font-size: typography-utils.font-size($config, title);\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-card') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n\n  // The color of the checkbox's checkmark / mixedmark.\n  $checkbox-mark-color: theming.get-color-from-palette($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an\n    // attribute on the SVG in order for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked,\n    &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: theming.get-color-from-palette($foreground, disabled);\n    }\n  }\n\n  // Switch this to a solid color since we're using `opacity`\n  // to control how opaque the ripple should be.\n  .mat-checkbox .mat-ripple-element {\n    background-color: map.get(map.get($config, foreground), base);\n  }\n\n  .mat-checkbox-checked:not(.mat-checkbox-disabled),\n  .mat-checkbox:active:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-ripple-element {\n      background: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent .mat-ripple-element {\n      background: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn .mat-ripple-element {\n      background: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-checkbox {\n    font-family: typography-utils.font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: typography-utils.line-height($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$chip-remove-font-size: 18px;\n\n@mixin _element-color($foreground, $background) {\n  background-color: $background;\n  color: $foreground;\n\n  .mat-chip-remove {\n    color: $foreground;\n    opacity: 0.4;\n  }\n}\n\n\n// Applies the background color for a ripple element.\n// If the color value provided is not a Sass color,\n// we assume that we've been given a CSS variable.\n// Since we can't perform alpha-blending on a CSS variable,\n// we instead add the opacity directly to the ripple element.\n@mixin _ripple-background($palette, $default-contrast, $opacity) {\n  $background-color: theming.get-color-from-palette($palette, $default-contrast, $opacity);\n  background-color: $background-color;\n  @if (meta.type-of($background-color) != color) {\n    opacity: $opacity;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  @include _element-color(theming.get-color-from-palette($palette, default-contrast),\n    theming.get-color-from-palette($palette));\n\n  .mat-ripple-element {\n    @include _ripple-background($palette, default-contrast, 0.1);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $unselected-background: theming.get-color-from-palette($background, unselected-chip);\n  $unselected-foreground: theming.get-color-from-palette($foreground, text);\n\n  .mat-chip.mat-standard-chip {\n    @include _element-color($unselected-foreground, $unselected-background);\n\n    &:not(.mat-chip-disabled) {\n      &:active {\n        @include private.private-theme-elevation(3, $config);\n      }\n\n      .mat-chip-remove:hover {\n        opacity: 0.54;\n      }\n    }\n\n    &.mat-chip-disabled {\n      opacity: 0.4;\n    }\n\n    &::after {\n      background: map.get($foreground, base);\n    }\n  }\n\n  .mat-chip.mat-standard-chip.mat-chip-selected {\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-chip {\n    font-size: typography-utils.font-size($config, body-2);\n    font-weight: typography-utils.font-weight($config, body-2);\n\n    .mat-chip-trailing-icon.mat-icon,\n    .mat-chip-remove.mat-icon {\n      font-size: $chip-remove-font-size;\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-table {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-table thead, .mat-table tbody, .mat-table tfoot,\n  mat-header-row, mat-row, mat-footer-row,\n  [mat-header-row], [mat-row], [mat-footer-row],\n  .mat-table-sticky {\n    background: inherit;\n  }\n\n  mat-row, mat-header-row, mat-footer-row,\n  th.mat-header-cell, td.mat-cell, td.mat-footer-cell {\n    border-bottom-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-table {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-header-cell {\n    font-size: typography-utils.font-size($config, caption);\n    font-weight: typography-utils.font-weight($config, body-2);\n  }\n\n  .mat-cell, .mat-footer-cell {\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-table') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _color($palette) {\n  @include date-range-colors(\n    theming.get-color-from-palette($palette, default, $range-fade-amount));\n\n  .mat-calendar-body-selected {\n    background-color: theming.get-color-from-palette($palette);\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    $background: theming.get-color-from-palette($palette);\n\n    @if (meta.type-of($background) == color) {\n      background-color: color.adjust($background, $alpha: -$selected-fade-amount);\n    }\n    @else {\n      // If we couldn't resolve to background to a color (e.g. it's a CSS variable),\n      // fall back to fading the content out via `opacity`.\n      opacity: $today-fade-amount;\n    }\n  }\n\n  .mat-calendar-body-today.mat-calendar-body-selected {\n    box-shadow: inset 0 0 0 $selected-today-box-shadow-width\n                theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .cdk-keyboard-focused .mat-calendar-body-active,\n  .cdk-program-focused .mat-calendar-body-active {\n    @include _highlighted-cell($palette);\n  }\n\n  @media (hover: hover) {\n    .mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover {\n      @include _highlighted-cell($palette);\n    }\n  }\n}\n\n// Utility mixin to target cells that aren't selected. Used to make selector easier to follow.\n@mixin _unselected-cell {\n  &:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical) {\n    @content;\n  }\n}\n\n// Styles for a highlighted calendar cell (e.g. hovered or focused).\n@mixin _highlighted-cell($palette) {\n  & > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      background-color: theming.get-color-from-palette($palette, 0.3);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-calendar-arrow {\n    fill: theming.get-color-from-palette($foreground, icon);\n  }\n\n  // The prev/next buttons need a bit more specificity to\n  // avoid being overwritten by the .mat-icon-button.\n  .mat-datepicker-toggle,\n  .mat-datepicker-content .mat-calendar-next-button,\n  .mat-datepicker-content .mat-calendar-previous-button {\n    color: theming.get-color-from-palette($foreground, icon);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-calendar-table-header,\n  .mat-calendar-body-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content,\n  .mat-date-range-input-separator {\n    color: theming.get-color-from-palette($foreground, text);\n    border-color: transparent;\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-cell-content {\n    @include _unselected-cell {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-form-field-disabled .mat-date-range-input-separator {\n    color: $disabled-color;\n  }\n\n  .mat-calendar-body-in-preview {\n    $divider-color: theming.get-color-from-palette($foreground, divider);\n\n    @if meta.type-of($divider-color) == color {\n      // The divider color is set under the assumption that it'll be used\n      // for a solid border, but because we're using a dashed border for the\n      // preview range, we need to bump its opacity to ensure that it's visible.\n      color: rgba($divider-color, math.min(opacity($divider-color) * 2, 1));\n    }\n    @else {\n      color: $divider-color;\n    }\n  }\n\n  .mat-calendar-body-today {\n    @include _unselected-cell {\n      // Note: though it's not text, the border is a hint about the fact that this is today's date,\n      // so we use the hint color.\n      border-color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today {\n    @include _unselected-cell {\n      $color: theming.get-color-from-palette($foreground, hint-text);\n\n      @if (meta.type-of($color) == color) {\n        border-color: color.adjust($color, $alpha: -$today-fade-amount);\n      }\n      @else {\n        // If the color didn't resolve to a color value, but something like a CSS variable, we can't\n        // fade it out so we fall back to reducing the element opacity. Note that we don't use the\n        // $mat-datepicker-today-fade-amount, because hint text usually has some opacity applied\n        // to it already and we don't want them to stack on top of each other.\n        opacity: 0.5;\n      }\n    }\n  }\n\n  @include _color(map.get($config, primary));\n\n  .mat-datepicker-content {\n    @include private.private-theme-elevation(4, $config);\n    background-color: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-accent {\n      @include _color(map.get($config, accent));\n    }\n\n    &.mat-warn {\n      @include _color(map.get($config, warn));\n    }\n  }\n\n  .mat-datepicker-content-touch {\n    @include private.private-theme-elevation(24, $config);\n  }\n\n  .mat-datepicker-toggle-active {\n    color: theming.get-color-from-palette(map.get($config, primary), text);\n\n    &.mat-accent {\n      color: theming.get-color-from-palette(map.get($config, accent), text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette(map.get($config, warn), text);\n    }\n  }\n\n  .mat-date-range-input-inner[disabled] {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-calendar {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $calendar-weekday-table-font-size;\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: rgba(#f9ab00, $range-fade-amount),\n  $overlap-color: #a8dab5,\n  $overlap-selected-color: color.adjust($overlap-color, $lightness: -30%)) {\n\n  .mat-calendar-body-in-range::before {\n    background: $range-color;\n  }\n\n  .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range::before {\n    background: $comparison-color;\n  }\n\n  .mat-calendar-body-comparison-bridge-start::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-end::before {\n    background: linear-gradient(to right, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-comparison-bridge-end::before,\n  [dir='rtl'] .mat-calendar-body-comparison-bridge-start::before {\n    background: linear-gradient(to left, $range-color 50%, $comparison-color 50%);\n  }\n\n  .mat-calendar-body-in-range > .mat-calendar-body-comparison-identical,\n  .mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after {\n    background: $overlap-color;\n  }\n\n  .mat-calendar-body-comparison-identical.mat-calendar-body-selected,\n  .mat-calendar-body-in-comparison-range > .mat-calendar-body-selected {\n    background: $overlap-selected-color;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-dialog-container {\n    @include private.private-theme-elevation(24, $config);\n    background: theming.get-color-from-palette($background, dialog);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-dialog-title {\n    @include typography-utils.typography-level($config, title);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-dialog') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './expansion-variables';\n@use './expansion-mixins';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-expansion-panel {\n    @include private.private-theme-overridable-elevation(2, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-action-row {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  @include expansion-mixins.private-expansion-focus {\n    background: theming.get-color-from-palette($background, hover);\n  }\n\n  // Disable the hover on touch devices since it can appear like it is stuck. We can't use\n  // `@media (hover)` above, because the desktop support browser support isn't great.\n  @media (hover: none) {\n    .mat-expansion-panel:not(.mat-expanded):not([aria-disabled='true'])\n      .mat-expansion-panel-header:hover {\n      background: theming.get-color-from-palette($background, card);\n    }\n  }\n\n  .mat-expansion-panel-header-title {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description,\n  .mat-expansion-indicator::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-expansion-panel-header[aria-disabled='true'] {\n    color: theming.get-color-from-palette($foreground, disabled-button);\n\n    .mat-expansion-panel-header-title,\n    .mat-expansion-panel-header-description {\n      color: inherit;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-expansion-panel-header {\n    font: {\n      family: typography-utils.font-family($config, subheading-1);\n      size: typography-utils.font-size($config, subheading-1);\n      weight: typography-utils.font-weight($config, subheading-1);\n    }\n  }\n\n  .mat-expansion-panel-content {\n    @include typography-utils.typography-level($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $expanded-height: compatibility.private-density-prop-value(\n        expansion-variables.$header-density-config, $density-scale, expanded-height);\n  $collapsed-height: compatibility.private-density-prop-value(\n      expansion-variables.$header-density-config, $density-scale, collapsed-height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-expansion-panel-header {\n      height: $collapsed-height;\n\n      &.mat-expanded {\n        height: $expanded-height;\n      }\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-expansion') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@use './form-field-fill-theme.scss';\n@use './form-field-legacy-theme.scss';\n@use './form-field-outline-theme.scss';\n@use './form-field-standard-theme.scss';\n\n// Color styles that apply to all appearances of the form-field.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  // Label colors. Required is used for the `*` star shown in the label.\n  $label-color:\n    theming.get-color-from-palette($foreground, secondary-text, if($is-dark-theme, 0.7, 0.6));\n  $focused-label-color: theming.get-color-from-palette($primary, text);\n  $required-label-color: theming.get-color-from-palette($accent, text);\n\n  // Underline colors.\n  $underline-color-base:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $underline-color-accent: theming.get-color-from-palette($accent, text);\n  $underline-color-warn: theming.get-color-from-palette($warn, text);\n  $underline-focused-color: theming.get-color-from-palette($primary, text);\n\n  .mat-form-field-label {\n    color: $label-color;\n  }\n\n  .mat-hint {\n    color: $label-color;\n  }\n\n  .mat-form-field.mat-focused .mat-form-field-label {\n    color: $focused-label-color;\n\n    &.mat-accent {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $underline-color-warn;\n    }\n  }\n\n  .mat-focused .mat-form-field-required-marker {\n    color: $required-label-color;\n  }\n\n  .mat-form-field-ripple {\n    background-color: $underline-color-base;\n  }\n\n  .mat-form-field.mat-focused {\n    .mat-form-field-ripple {\n      background-color: $underline-focused-color;\n\n      &.mat-accent {\n        background-color: $underline-color-accent;\n      }\n\n      &.mat-warn {\n        background-color: $underline-color-warn;\n      }\n    }\n  }\n\n  .mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) {\n    .mat-form-field-infix::after {\n      color: $underline-focused-color;\n    }\n\n    &.mat-accent .mat-form-field-infix::after {\n      color: $underline-color-accent;\n    }\n\n    &.mat-warn .mat-form-field-infix::after {\n      color: $underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the form field. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-form-field.mat-form-field-invalid {\n    .mat-form-field-label {\n      color: $underline-color-warn;\n\n      &.mat-accent,\n      .mat-form-field-required-marker {\n        color: $underline-color-warn;\n      }\n    }\n\n    .mat-form-field-ripple,\n    .mat-form-field-ripple.mat-accent {\n      background-color: $underline-color-warn;\n    }\n  }\n\n  .mat-error {\n    color: $underline-color-warn;\n  }\n\n  @include form-field-legacy-theme.legacy-color($config);\n  @include form-field-standard-theme.standard-color($config);\n  @include form-field-fill-theme.fill-color($config);\n  @include form-field-outline-theme.outline-color($config);\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $dedupe;\n\n  $dedupe: $dedupe + 0.00001 !global;\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The padding on the infix. Mocks show half of the text size.\n  $infix-padding: 0.5em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top: $subscript-font-scale *\n      typography-utils.private-coerce-unitless-to-em($line-height);\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field {\n    @include typography-utils.typography-level($config, input);\n  }\n\n  .mat-form-field-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-prefix,\n  .mat-form-field-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon {\n      font-size: $prefix-suffix-icon-font-size;\n      line-height: $line-height;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        height: typography-utils.private-coerce-unitless-to-em($line-height);\n        line-height: $line-height;\n      }\n    }\n  }\n\n  .mat-form-field-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-form-field-can-float {\n    &.mat-form-field-should-float .mat-form-field-label,\n    .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n\n    // Server-side rendered matInput with a label attribute but label not shown\n    // (used as a pure CSS stand-in for mat-form-field-should-float).\n    .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n      @include _label-floating(\n              $subscript-font-scale, $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-form-field-label-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-form-field-label {\n    top: $infix-margin-top + $infix-padding;\n  }\n\n  .mat-form-field-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-form-field-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n  }\n\n  @include form-field-legacy-theme.legacy-typography($config);\n  @include form-field-standard-theme.standard-typography($config);\n  @include form-field-fill-theme.fill-typography($config);\n  @include form-field-outline-theme.outline-typography($config);\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  @include form-field-legacy-theme.private-form-field-legacy-density($density-scale);\n  @include form-field-standard-theme.private-form-field-standard-density($density-scale);\n  @include form-field-fill-theme.private-form-field-fill-density($density-scale);\n  @include form-field-outline-theme.private-form-field-outline-density($density-scale);\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the legacy appearance of the form-field.\n\n@mixin legacy-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-color: theming.get-color-from-palette($foreground, secondary-text);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-label {\n      color: $label-color;\n    }\n\n    .mat-hint {\n      color: $label-color;\n    }\n\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$legacy-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  // We use perspective to fix the text blurriness as described here:\n  // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding) scale($font-scale) perspective(100px)\n  translateZ(0.001px + $legacy-dedupe);\n  width: math.div(100%, $font-scale) + $legacy-dedupe;\n\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n// Same as mixin above, but omits the translateZ for printing purposes.\n@mixin _label-floating-print($font-scale, $infix-padding, $infix-margin-top) {\n  // This results in a small jitter after the label floats on Firefox, which the\n  // translateZ fixes.\n  transform: translateY(-$infix-margin-top - $infix-padding + $legacy-dedupe)\n                  scale($font-scale);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don't include them in the IE version.\n  $legacy-dedupe: $legacy-dedupe + 0.00001 !global;\n}\n\n@mixin legacy-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  // If the line-height is given as a unitless number, coerce it to `em`.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size. We again need to subtract off the line spacing since the mocks measure to the edge of the\n  // text, not the  edge of the line.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale) - ($line-spacing * 2);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-form-field-appearance-legacy {\n    .mat-form-field-wrapper {\n      padding-bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-infix {\n      padding: $infix-padding 0;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n      .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding, $infix-margin-top);\n      }\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n    }\n\n    .mat-form-field-underline {\n      // We want the underline to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount.\n      bottom: $wrapper-padding-bottom;\n    }\n\n    .mat-form-field-subscript-wrapper {\n      margin-top: $subscript-margin-top;\n\n      // We want the subscript to start at the end of the content box, not the padding box,\n      // so we move it up by the padding amount (adjusted for the smaller font size);\n      top: calc(100% - #{math.div($wrapper-padding-bottom, $subscript-font-scale)});\n    }\n  }\n\n  // translateZ causes the label to not appear while printing, so we override it to not\n  // apply translateZ while printing\n  @media print {\n    .mat-form-field-appearance-legacy {\n      &.mat-form-field-can-float {\n        &.mat-form-field-should-float .mat-form-field-label,\n        .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // @breaking-change 8.0.0 will rely on AutofillMonitor instead.\n        .mat-form-field-autofill-control:-webkit-autofill + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n\n        // Server-side rendered matInput with a label attribute but label not shown\n        // (used as a pure CSS stand-in for mat-form-field-should-float).\n        .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n        .mat-form-field-label {\n          @include _label-floating-print(\n                  $subscript-font-scale, $infix-padding, $infix-margin-top);\n        }\n      }\n    }\n  }\n}\n\n@mixin private-form-field-legacy-density($config-or-theme) {}\n\n@mixin legacy-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-legacy') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include legacy-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-legacy-density($density);\n    }\n    @if $typography != null {\n      @include legacy-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the fill appearance of the form-field.\n\n@mixin fill-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $fill-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.1, 0.04));\n  $fill-disabled-background:\n    theming.get-color-from-palette($foreground, base, if($is-dark-theme, 0.05, 0.02));\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.5, 0.42));\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-flex {\n      background-color: $fill-background;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-flex {\n      background-color: $fill-disabled-background;\n    }\n\n    .mat-form-field-underline::before {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-underline::before {\n        background-color: transparent;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$fill-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $fill-dedupe)\n             scale($font-scale);\n  width: math.div(100%, $font-scale) + $fill-dedupe;\n\n  $fill-dedupe: $fill-dedupe + 0.00001 !global;\n}\n\n@mixin fill-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding on top of the infix.\n  $infix-padding-top: 0.25em;\n  // The padding below the infix.\n  $infix-padding-bottom: 0.75em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The amount we offset the label from the input text in the fill appearance.\n  $fill-appearance-label-offset: -0.5em;\n\n  .mat-form-field-appearance-fill {\n    .mat-form-field-infix {\n      padding: $infix-padding-top 0 $infix-padding-bottom 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding-top;\n      margin-top: $fill-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding-top + $fill-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-fill-density($config-or-theme) {}\n\n@mixin fill-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-fill') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include fill-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-fill-density($density);\n    }\n    @if $typography != null {\n      @include fill-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n// Theme styles that only apply to the outline appearance of the form-field.\n\n@mixin outline-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n\n  $label-disabled-color: theming.get-color-from-palette($foreground, disabled-text);\n  $outline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.3, 0.12));\n  $outline-color-hover:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 1, 0.87));\n  $outline-color-primary: theming.get-color-from-palette($primary);\n  $outline-color-accent: theming.get-color-from-palette($accent);\n  $outline-color-warn: theming.get-color-from-palette($warn);\n  $outline-color-disabled:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.15, 0.06));\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-outline {\n      color: $outline-color;\n    }\n\n    .mat-form-field-outline-thick {\n      color: $outline-color-hover;\n    }\n\n    &.mat-focused {\n      .mat-form-field-outline-thick {\n        color: $outline-color-primary;\n      }\n\n      &.mat-accent .mat-form-field-outline-thick {\n        color: $outline-color-accent;\n      }\n\n      &.mat-warn .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    // Class repeated so that rule is specific enough to override focused accent color case.\n    &.mat-form-field-invalid.mat-form-field-invalid {\n      .mat-form-field-outline-thick {\n        color: $outline-color-warn;\n      }\n    }\n\n    &.mat-form-field-disabled {\n      .mat-form-field-label {\n        color: $label-disabled-color;\n      }\n\n      .mat-form-field-outline {\n        color: $outline-color-disabled;\n      }\n    }\n  }\n}\n\n// Used to make instances of the _mat-form-field-label-floating mixin negligibly different,\n// and prevent Google's CSS Optimizer from collapsing the declarations. This is needed because some\n// of the selectors contain pseudo-classes not recognized in all browsers. If a browser encounters\n// an unknown pseudo-class it will discard the entire rule set.\n$outline-dedupe: 0;\n\n// Applies a floating label above the form field control itself.\n@mixin _label-floating($font-scale, $infix-padding, $infix-margin-top) {\n  transform: translateY(-$infix-margin-top - $infix-padding + $outline-dedupe)\n  scale($font-scale);\n  width: math.div(100%, $font-scale) + $outline-dedupe;\n\n  $outline-dedupe: $outline-dedupe + 0.00001 !global;\n}\n\n@mixin outline-typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The padding above and below the infix.\n  $infix-padding: 1em;\n  // The margin applied to the form-field-infix to reserve space for the floating label.\n  $infix-margin-top:\n      $subscript-font-scale * typography-utils.private-coerce-unitless-to-em($line-height);\n  // The space between the bottom of the .mat-form-field-flex area and the subscript wrapper.\n  // Mocks show half of the text size, but this margin is applied to an element with the subscript\n  // text font size, so we need to divide by the scale factor to make it half of the original text\n  // size.\n  $subscript-margin-top: math.div(0.5em, $subscript-font-scale);\n  // The padding applied to the form-field-wrapper to reserve space for the subscript, since it's\n  // absolutely positioned. This is a combination of the subscript's margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n  // The amount we offset the label from the input text in the outline appearance.\n  $outline-appearance-label-offset: -0.25em;\n\n  .mat-form-field-appearance-outline {\n    .mat-form-field-infix {\n      padding: $infix-padding 0 $infix-padding 0;\n    }\n\n    .mat-form-field-label {\n      top: $infix-margin-top + $infix-padding;\n      margin-top: $outline-appearance-label-offset;\n    }\n\n    &.mat-form-field-can-float {\n      &.mat-form-field-should-float .mat-form-field-label,\n      .mat-input-server:focus + .mat-form-field-label-wrapper .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n\n      // Server-side rendered matInput with a label attribute but label not shown\n      // (used as a pure CSS stand-in for mat-form-field-should-float).\n      .mat-input-server[label]:not(:label-shown) + .mat-form-field-label-wrapper\n      .mat-form-field-label {\n        @include _label-floating(\n                $subscript-font-scale, $infix-padding + $outline-appearance-label-offset,\n                $infix-margin-top);\n      }\n    }\n  }\n}\n\n@mixin private-form-field-outline-density($config-or-theme) {}\n\n@mixin outline-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-outline') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include outline-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-outline-density($density);\n    }\n    @if $typography != null {\n      @include outline-typography($typography);\n    }\n  }\n}\n\n","@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n// Include this empty mixin for consistency with the other components.\n@mixin color($config-or-theme) {}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include list-common.base(typography-utils.font-size($config, caption));\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-grid-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","// This mixin will ensure that lines that overflow the container will hide the overflow and\n// truncate neatly with an ellipsis.\n@mixin truncate-line() {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n// Mixin to provide all mat-line styles, changing secondary font size based on whether the list\n// is in dense mode.\n@mixin base($secondary-font-size) {\n  .mat-line {\n    @include truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n// This mixin normalizes default element styles, e.g. font weight for heading text.\n@mixin normalize-text() {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n// This mixin provides base styles for the wrapper around mat-line elements in a list.\n@mixin wrapper-base() {\n  @include normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  flex: auto;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/vendor-prefixes';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $foreground: map.get($config, foreground);\n\n  .mat-form-field-type-mat-native-select .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-input-element:disabled,\n  .mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-input-element {\n    caret-color: theming.get-color-from-palette($primary, text);\n\n    @include vendor-prefixes.input-placeholder {\n      color: form-common.private-control-placeholder-color($config);\n    }\n\n    // On dark themes we set the native `select` color to some shade of white,\n    // however the color propagates to all of the `option` elements, which are\n    // always on a white background inside the dropdown, causing them to blend in.\n    // Since we can't change background of the dropdown, we need to explicitly\n    // reset the color of the options to something dark.\n    @if (map.get($config, is-dark)) {\n      &:not(.mat-native-select-inline) {\n        option {\n          color: palette.$dark-primary-text;\n        }\n\n        option:disabled {\n          color: palette.$dark-disabled-text;\n        }\n      }\n    }\n  }\n\n  .mat-form-field.mat-accent .mat-input-element {\n    caret-color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-form-field.mat-warn .mat-input-element,\n  .mat-form-field-invalid .mat-input-element {\n    caret-color: theming.get-color-from-palette($warn, text);\n  }\n\n  .mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: math.div($line-height - 1, 2);\n\n  // <input> elements seem to have their height set slightly too large on Safari causing the text to\n  // be misaligned w.r.t. the placeholder. Adding this margin corrects it.\n  input.mat-input-element {\n    margin-top: typography-utils.private-coerce-unitless-to-em(-$line-spacing);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-input') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-menu-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: theming.get-color-from-palette($foreground, 'text');\n\n    &[disabled] {\n      &,\n      .mat-menu-submenu-icon,\n      .mat-icon-no-color {\n        color: theming.get-color-from-palette($foreground, 'disabled');\n      }\n    }\n  }\n\n  .mat-menu-item .mat-icon-no-color,\n  .mat-menu-submenu-icon {\n    color: theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-menu-item:hover,\n  .mat-menu-item.cdk-program-focused,\n  .mat-menu-item.cdk-keyboard-focused,\n  .mat-menu-item-highlighted {\n    &:not([disabled]) {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-menu-item {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-menu') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './paginator-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-paginator {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-paginator-decrement,\n  .mat-paginator-increment {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n    border-right: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-paginator-first,\n  .mat-paginator-last {\n    border-top: 2px solid theming.get-color-from-palette($foreground, 'icon');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-decrement,\n    .mat-paginator-increment,\n    .mat-paginator-first,\n    .mat-paginator-last {\n      border-color: theming.get-color-from-palette($foreground, 'disabled');\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: typography-utils.font-family($config, caption);\n      size: typography-utils.font-size($config, caption);\n    }\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(paginator-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-paginator-container {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-paginator') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-radio-inner-circle,\n  .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple),\n  &.mat-radio-checked .mat-radio-persistent-ripple,\n  &:active .mat-radio-persistent-ripple {\n    background-color: theming.get-color-from-palette($palette);\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include _color($primary);\n    }\n\n    &.mat-accent {\n      @include _color($accent);\n    }\n\n    &.mat-warn {\n      @include _color($warn);\n    }\n\n    // This needs extra specificity, because the classes above are combined\n    // (e.g. `.mat-radio-button.mat-accent`) which increases their specificity a lot.\n    // TODO: consider making the selectors into descendants (`.mat-primary .mat-radio-button`).\n    &.mat-radio-disabled {\n      &.mat-radio-checked .mat-radio-outer-circle,\n      .mat-radio-outer-circle {\n        border-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-ripple .mat-ripple-element,\n      .mat-radio-inner-circle {\n        background-color: theming.get-color-from-palette($foreground, disabled);\n      }\n\n      .mat-radio-label-content {\n        color: theming.get-color-from-palette($foreground, disabled);\n      }\n    }\n\n    // Switch this to a solid color since we're using `opacity`\n    // to control how opaque the ripple should be.\n    .mat-ripple-element {\n      background-color: map.get($foreground, base);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-radio-button {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/private';\n@use '../core/style/form-common';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-select-value {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-select-placeholder {\n    color: form-common.private-control-placeholder-color($config);\n  }\n\n  .mat-select-disabled .mat-select-value {\n    color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  .mat-select-arrow {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-select-panel {\n    background: theming.get-color-from-palette($background, card);\n    @include private.private-theme-overridable-elevation(4, $config);\n\n    .mat-option.mat-selected:not(.mat-option-multiple) {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n\n  .mat-form-field {\n    &.mat-focused {\n      &.mat-primary .mat-select-arrow {\n        color: theming.get-color-from-palette($primary, text);\n      }\n\n      &.mat-accent .mat-select-arrow {\n        color: theming.get-color-from-palette($accent, text);\n      }\n\n      &.mat-warn .mat-select-arrow {\n        color: theming.get-color-from-palette($warn, text);\n      }\n    }\n\n    .mat-select.mat-select-invalid .mat-select-arrow {\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-select.mat-select-disabled .mat-select-arrow {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  // The unit-less line-height from the font config.\n  $line-height: typography-utils.line-height($config, input);\n\n  .mat-select {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-select-trigger {\n    height: typography-utils.private-coerce-unitless-to-em($line-height);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/palette';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _checked-color($palette, $thumb-checked-hue) {\n  &.mat-checked {\n    .mat-slide-toggle-thumb {\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      // Opacity is determined from the specs for the selection controls.\n      // See: https://material.io/design/components/selection-controls.html#specs\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue, 0.54);\n    }\n\n    .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: theming.get-color-from-palette($palette, $thumb-checked-hue);\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  // Color hues are based on the specs which briefly show the hues that are applied to a switch.\n  // The 2018 specs no longer describe how dark switches should look like. Due to the lack of\n  // information for dark themed switches, we partially keep the old behavior that is based on\n  // the previous specifications. For the checked color we always use the `default` hue because\n  // that follows MDC and also makes it easier for people to create a custom theme without needing\n  // to specify each hue individually.\n  $thumb-unchecked-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: default;\n\n  $bar-unchecked-color: theming.get-color-from-palette($foreground, disabled);\n  $ripple-unchecked-color: theming.get-color-from-palette($foreground, base);\n\n  .mat-slide-toggle {\n    @include _checked-color($accent, $thumb-checked-hue);\n\n    &.mat-primary {\n      @include _checked-color($primary, $thumb-checked-hue);\n    }\n\n    &.mat-warn {\n      @include _checked-color($warn, $thumb-checked-hue);\n    }\n\n    &:not(.mat-checked) .mat-ripple-element {\n      // Set no opacity for the ripples because the ripple opacity will be adjusted dynamically\n      // based on the type of interaction with the slide-toggle (e.g. for hover, focus)\n      background-color: $ripple-unchecked-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    @include private.private-theme-elevation(1, $config);\n    background-color: theming.get-color-from-palette(palette.$grey-palette, $thumb-unchecked-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-unchecked-color;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slide-toggle-content {\n    font-family: typography-utils.font-family($config);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin _inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: theming.get-color-from-palette($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: theming.get-color-from-palette($palette, default-contrast);\n  }\n\n  .mat-slider-focus-ring {\n    $opacity: 0.2;\n    $color: theming.get-color-from-palette($palette, default, $opacity);\n    background-color: $color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($color) != color) {\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $mat-slider-off-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-off-focused-color: theming.get-color-from-palette($foreground, slider-off-active);\n  $mat-slider-disabled-color: theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color:\n    theming.get-color-from-palette($foreground, slider-min);\n  $mat-slider-labeled-min-value-thumb-label-color:\n    theming.get-color-from-palette($foreground, slider-off);\n  $mat-slider-tick-opacity: 0.7;\n  $mat-slider-tick-color:\n    theming.get-color-from-palette($foreground, base, $mat-slider-tick-opacity);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-slider {\n    &.mat-primary {\n      @include _inner-content-theme($primary);\n    }\n\n    &.mat-accent {\n      @include _inner-content-theme($accent);\n    }\n\n    &.mat-warn {\n      @include _inner-content-theme($warn);\n    }\n  }\n\n  .mat-slider:hover,\n  .mat-slider.cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider.mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider.mat-slider-min-value {\n    .mat-slider-focus-ring {\n      $opacity: 0.12;\n      $color: theming.get-color-from-palette($foreground, base, $opacity);\n      background-color: $color;\n\n      // `mat-color` uses `rgba` for the opacity which won't work with\n      // CSS variables so we need to use `opacity` as a fallback.\n      @if (meta.type-of($color) != color) {\n        opacity: $opacity;\n      }\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn't draw the gradient correctly with 'to right'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n\n    // `mat-color` uses `rgba` for the opacity which won't work with\n    // CSS variables so we need to use `opacity` as a fallback.\n    @if (meta.type-of($mat-slider-tick-color) != color) {\n      opacity: $mat-slider-tick-opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-slider-thumb-label-text {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, caption);\n      weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/density/private/compatibility';\n@use './stepper-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-step-header {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused,\n    &:hover:not([aria-disabled]),\n    &:hover[aria-disabled='false'] {\n      background-color: theming.get-color-from-palette($background, hover);\n    }\n\n    &:hover[aria-disabled='true'] {\n      cursor: default;\n    }\n\n    // On touch devices the :hover state will linger on the element after a tap.\n    // Reset it via `@media` after the declaration, because the media query isn't\n    // supported by all browsers yet.\n    @media (hover: none) {\n      &:hover {\n        background: none;\n      }\n    }\n\n    .mat-step-label,\n    .mat-step-optional {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-step-icon {\n      // TODO(josephperrott): Update to using a corrected disabled-text contrast\n      // instead of secondary-text.\n      background-color: theming.get-color-from-palette($foreground, secondary-text);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    .mat-step-icon-selected,\n    .mat-step-icon-state-done,\n    .mat-step-icon-state-edit {\n      background-color: theming.get-color-from-palette($primary);\n      color: theming.get-color-from-palette($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($accent);\n        color: theming.get-color-from-palette($accent, default-contrast);\n      }\n    }\n\n    &.mat-warn {\n      .mat-step-icon {\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n\n      .mat-step-icon-selected,\n      .mat-step-icon-state-done,\n      .mat-step-icon-state-edit {\n        background-color: theming.get-color-from-palette($warn);\n        color: theming.get-color-from-palette($warn, default-contrast);\n      }\n    }\n\n    .mat-step-icon-state-error {\n      background-color: transparent;\n      color: theming.get-color-from-palette($warn, text);\n    }\n\n    .mat-step-label.mat-step-label-active {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-step-label.mat-step-label-error {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n\n  .mat-stepper-horizontal, .mat-stepper-vertical {\n    background-color: theming.get-color-from-palette($background, card);\n  }\n\n  .mat-stepper-vertical-line::before {\n    border-left-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-horizontal-stepper-header::before,\n  .mat-horizontal-stepper-header::after,\n  .mat-stepper-horizontal-line {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-stepper-vertical, .mat-stepper-horizontal {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-step-label {\n    font: {\n      size: typography-utils.font-size($config, body-1);\n      weight: typography-utils.font-weight($config, body-1);\n    };\n  }\n\n  .mat-step-sub-label-error {\n    font-weight: normal;\n  }\n\n  .mat-step-label-error {\n    font-size: typography-utils.font-size($config, body-2);\n  }\n\n  .mat-step-label-selected {\n    font: {\n      size: typography-utils.font-size($config, body-2);\n      weight: typography-utils.font-weight($config, body-2);\n    };\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(stepper-variables.$density-config,\n    $density-scale, height);\n  $vertical-padding: math.div($height - stepper-variables.$label-header-height, 2);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-horizontal-stepper-header {\n      height: $height;\n    }\n\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header,\n    .mat-vertical-stepper-header {\n      padding: $vertical-padding stepper-variables.$side-gap;\n    }\n\n    // Ensures that the vertical lines for the step content exceed into the step\n    // headers with a given distance (`$mat-stepper-line-gap`) to the step icon.\n    .mat-stepper-vertical-line::before {\n      top: stepper-variables.$line-gap - $vertical-padding;\n      bottom: stepper-variables.$line-gap - $vertical-padding;\n    }\n\n    // Ensures that the horizontal lines for the step header are centered vertically.\n    .mat-stepper-label-position-bottom .mat-horizontal-stepper-header {\n      &::after, &::before {\n        top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n      }\n    }\n\n    // Ensures that the horizontal line for the step content is aligned centered vertically.\n    .mat-stepper-label-position-bottom .mat-stepper-horizontal-line {\n      top: $vertical-padding + math.div(stepper-variables.$label-header-height, 2);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n  $header-border: 1px solid theming.get-color-from-palette($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    border-color: theming.get-color-from-palette($foreground, disabled-text);\n  }\n\n  // Remove header border when there is a background color\n  .mat-tab-group[class*='mat-background-'] > .mat-tab-header,\n  .mat-tab-nav-bar[class*='mat-background-'] {\n    border-bottom: none;\n    border-top: none;\n  }\n\n  .mat-tab-group, .mat-tab-nav-bar {\n    $theme-colors: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $name, $color in $theme-colors {\n      // Set the foreground color of the tabs\n      &.mat-#{$name} {\n        @include _label-focus-color($color);\n        @include _ink-bar-color($color);\n\n        // Override ink bar when background color is the same\n        &.mat-background-#{$name} {\n          > .mat-tab-header, > .mat-tab-link-container {\n            @include _ink-bar-color($color, default-contrast);\n          }\n        }\n      }\n    }\n\n    @each $name, $color in $theme-colors {\n      // Set background color of the tabs and override focus color\n      &.mat-background-#{$name} {\n        @include _label-focus-color($color);\n        @include _tabs-background($color);\n      }\n    }\n  }\n}\n\n@mixin _ink-bar-color($color, $hue: default) {\n  .mat-ink-bar {\n    background-color: theming.get-color-from-palette($color, $hue);\n  }\n}\n\n@mixin _label-focus-color($tab-focus-color) {\n  .mat-tab-label,\n  .mat-tab-link {\n    &.cdk-keyboard-focused,\n    &.cdk-program-focused {\n      &:not(.mat-tab-disabled) {\n        background-color: theming.get-color-from-palette($tab-focus-color, lighter, 0.3);\n      }\n    }\n  }\n}\n\n@mixin _tabs-background($background-color) {\n  // Note that these selectors target direct descendants so\n  // that the styles don't apply to any nested tab groups.\n\n  // Set background color for the tab group\n  > .mat-tab-header, > .mat-tab-link-container, > .mat-tab-header-pagination {\n    background-color: theming.get-color-from-palette($background-color);\n  }\n\n  // Set labels to contrast against background\n  > .mat-tab-header .mat-tab-label, > .mat-tab-link-container .mat-tab-link {\n    color: theming.get-color-from-palette($background-color, default-contrast);\n\n    &.mat-tab-disabled {\n      color: theming.get-color-from-palette($background-color, default-contrast, 0.4);\n    }\n  }\n\n  // Set pagination chevrons to contrast background\n  > .mat-tab-header .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination .mat-tab-header-pagination-chevron,\n  > .mat-tab-link-container .mat-focus-indicator::before,\n  > .mat-tab-header .mat-focus-indicator::before {\n    border-color: theming.get-color-from-palette($background-color, default-contrast);\n  }\n\n  > .mat-tab-header .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron,\n  > .mat-tab-header-pagination-disabled .mat-tab-header-pagination-chevron {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    border-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.4;\n  }\n\n  // Set ripples color to be the contrast color of the new background. Otherwise the ripple\n  // color will be based on the app background color.\n  > .mat-tab-header .mat-ripple-element,\n  > .mat-tab-link-container .mat-ripple-element,\n  > .mat-tab-header-pagination .mat-ripple-element {\n    // Set the color opacity via `opacity`, rather than `rgba`, because it may be a CSS variable.\n    background-color: theming.get-color-from-palette($background-color, default-contrast, 1);\n    opacity: 0.12;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tab-group {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: typography-utils.font-family($config, button);\n      size: typography-utils.font-size($config, button);\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/style/variables';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './toolbar-variables';\n\n@mixin _height($height) {\n  .mat-toolbar-multiple-rows {\n    min-height: $height;\n  }\n  .mat-toolbar-row, .mat-toolbar-single-row {\n    height: $height;\n  }\n}\n\n@mixin _palette-styles($palette) {\n  background: theming.get-color-from-palette($palette);\n  color: theming.get-color-from-palette($palette, default-contrast);\n}\n\n@mixin _form-field-overrides {\n  .mat-form-field-underline,\n  .mat-form-field-ripple,\n  .mat-focused .mat-form-field-ripple {\n    background-color: currentColor;\n  }\n\n  .mat-form-field-label,\n  .mat-focused .mat-form-field-label,\n  .mat-select-value,\n  .mat-select-arrow,\n  .mat-form-field.mat-focused .mat-select-arrow {\n    color: inherit;\n  }\n\n  .mat-input-element {\n    caret-color: currentColor;\n  }\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-toolbar {\n    background: theming.get-color-from-palette($background, app-bar);\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-primary {\n      @include _palette-styles($primary);\n    }\n\n    &.mat-accent {\n      @include _palette-styles($accent);\n    }\n\n    &.mat-warn {\n      @include _palette-styles($warn);\n    }\n\n    @include _form-field-overrides;\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include typography-utils.typography-level($config, title);\n    margin: 0;\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height-desktop: compatibility.private-density-prop-value(\n      toolbar-variables.$desktop-density-config, $density-scale, height);\n  $height-mobile: compatibility.private-density-prop-value(\n      toolbar-variables.$mobile-density-config, $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    // Set the default height for the toolbar.\n    @include _height($height-desktop);\n\n    // As per specs, toolbars should have a different height in mobile devices. This has been\n    // specified in the old guidelines and is still observable in the new specifications by\n    // looking at the spec images. See: https://material.io/design/components/app-bars-top.html#anatomy\n    @media (variables.$xsmall) {\n      @include _height($height-mobile);\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n\n$target-height: 22px;\n$font-size: 10px;\n$vertical-padding: math.div($target-height - $font-size, 2);\n\n$handset-target-height: 30px;\n$handset-font-size: 14px;\n$handset-vertical-padding: math.div($handset-target-height - $handset-font-size, 2);\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n\n  .mat-tooltip {\n    background: theming.get-color-from-palette($background, tooltip, 0.9);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tooltip {\n    font-family: typography-utils.font-family($config);\n    font-size: $font-size;\n    padding-top: $vertical-padding;\n    padding-bottom: $vertical-padding;\n  }\n\n  .mat-tooltip-handset {\n    font-size: $handset-font-size;\n    padding-top: $handset-vertical-padding;\n    padding-bottom: $handset-vertical-padding;\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tooltip') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/style/list-common';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-list-base {\n    .mat-list-item {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-list-option {\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    .mat-subheader {\n      color: theming.get-color-from-palette($foreground, secondary-text);\n    }\n\n    .mat-list-item-disabled {\n      background-color: theming.get-color-from-palette($background, disabled-list-option);\n      color: theming.get-color-from-palette($foreground, disabled-text);\n    }\n  }\n\n  .mat-list-option,\n  .mat-nav-list .mat-list-item,\n  .mat-action-list .mat-list-item {\n    &:hover, &:focus {\n      background: theming.get-color-from-palette($background, 'hover');\n    }\n  }\n\n  .mat-list-single-selected-option {\n    &, &:hover, &:focus {\n      background: theming.get-color-from-palette($background, hover, 0.12);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  $font-family: typography-utils.font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  .mat-list-option {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list-base {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, subheading-2);\n      @include list-common.base(typography-utils.font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      font-family: typography-utils.font-family($config, body-2);\n      font-size: typography-utils.font-size($config, body-2);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list-base[dense] {\n    .mat-list-item {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-list-option {\n      font-size: typography-utils.font-size($config, caption);\n      @include list-common.base(typography-utils.font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font-family: $font-family;\n      font-size: typography-utils.font-size($config, caption);\n      font-weight: typography-utils.font-weight($config, body-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-option {\n    color: theming.get-color-from-palette($foreground, text);\n\n    &:hover:not(.mat-option-disabled),\n    &:focus:not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled) {\n      background: theming.get-color-from-palette($background, hover);\n    }\n\n    &.mat-active {\n      background: theming.get-color-from-palette($background, hover);\n      color: theming.get-color-from-palette($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: theming.get-color-from-palette($foreground, hint-text);\n    }\n  }\n\n  .mat-primary .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($primary, text);\n  }\n\n  .mat-accent .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($accent, text);\n  }\n\n  .mat-warn .mat-option.mat-selected:not(.mat-option-disabled) {\n    color: theming.get-color-from-palette($warn, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-option {\n    font: {\n      family: typography-utils.font-family($config);\n      size: typography-utils.font-size($config, subheading-2);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n@use '../typography/typography';\n@use '../typography/typography-utils';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: theming.get-color-from-palette($foreground, hint-text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-optgroup-label {\n    @include typography-utils.typography-level($config, body-2);\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-optgroup') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use '../core/theming/theming';\n@use '../core/theming/palette';\n@use '../core/style/private';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $accent: map.get($config, accent);\n\n  .mat-snack-bar-container {\n    // Use the primary text on the dark theme, even though the lighter one uses\n    // a secondary, because the contrast on the light primary text is poor.\n    color: if($is-dark-theme, palette.$dark-primary-text, palette.$light-secondary-text);\n    background: if($is-dark-theme, map.get(palette.$grey-palette, 50), #323232);\n\n    @include private.private-theme-elevation(6, $config);\n  }\n\n  .mat-simple-snackbar-action {\n    color: if($is-dark-theme, inherit, theming.get-color-from-palette($accent, text));\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-simple-snackbar {\n    font: {\n      family: typography-utils.font-family($config, body-1);\n      size: typography-utils.font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: typography-utils.font-weight($config, button);\n    }\n  }\n}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-snack-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/density/private/compatibility';\n@use '../core/theming/theming';\n@use '../core/typography/typography';\n@use '../core/typography/typography-utils';\n@use './tree-variables';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-tree {\n    background: theming.get-color-from-palette($background, 'card');\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    color: theming.get-color-from-palette($foreground, text);\n  }\n}\n\n@mixin typography($config-or-theme) {\n  $config: typography.private-typography-to-2014-config(\n      theming.get-typography-config($config-or-theme));\n  .mat-tree {\n    font-family: typography-utils.font-family($config);\n  }\n\n  .mat-tree-node,\n  .mat-nested-tree-node {\n    font-weight: typography-utils.font-weight($config, body-1);\n    font-size: typography-utils.font-size($config, body-1);\n  }\n}\n\n@mixin density($config-or-theme) {\n  $density-scale: theming.get-density-config($config-or-theme);\n  $height: compatibility.private-density-prop-value(tree-variables.$density-config,\n    $density-scale, height);\n\n  @include compatibility.private-density-legacy-compatibility() {\n    .mat-tree-node {\n      min-height: $height;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tree') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use '@angular/cdk';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n  }\n}\n","/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n","// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n","// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n","@use 'sass:map';\n@use '@angular/cdk';\n@use '../style/layout-common';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n","// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n","@use '@angular/material' as mat;\n@import 'hljs';\n// Dedicated file for theming the app\n@mixin rss-reader-theme($theme) {\n  @include tables-theme($theme);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $is-dark-theme: map-get($theme, is-dark); // Check if the theme is dark\n  @if ($is-dark-theme) {\n    // Apply highlight.js dark styles available in _hljs.scss\n    @include hljs-dark();\n  } @else {\n    // Apply highlight.js light styles available in _hljs.scss\n    @include hljs-light();\n  }\n\n  // Shows the current link. Used in the sidenav\n  .active-link {\n    // Since it's a bit hard to actually see the text in the dark theme, it'll use the accent color if it's dark and primary if it's not. Same applies for mat-icon\n    color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary)) !important;\n    mat-icon {\n      color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary)) !important;\n    } // Note: These colors are based on the Android sidenav selection state\n    background-color: if($is-dark-theme, #595959, #DCDCDC) !important;\n  }\n\n  // Warning icon color\n  .warning-icon {\n    color: mat.get-color-from-palette($warn) !important;\n  }\n\n  a.anchor-link {\n    color: mat.get-color-from-palette($primary, if($is-dark-theme, 200, default));\n    text-decoration: none;\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .mat-list-item-content mat-icon,\n  .icon {\n    color: map-get($foreground, icon);\n  }\n\n  .onboarding-content {\n    color: if($is-dark-theme, #FFF, #000);\n  }\n  .onboarding-card {\n    background-color: if($is-dark-theme, #303030, #FAFAFA);\n  }\n\n  .indicator-active {\n    background-color: mat.get-color-from-palette($accent) !important;\n  }\n  .indicator {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n\n  // Adapted from\n  // https://github.com/EdricChan03/StudyBuddy-web/blob/3b1e7709c8954fc73fc934cbf6f882de3ed25e2e/src/styles.scss#L64-L86\n  .badge {\n    color: mat.get-color-from-palette($foreground, text);\n    background-color: mat.get-color-from-palette($background, unselected-chip);\n\n    &.badge--colored {\n      background-color: if($is-dark-theme, mat.get-color-from-palette($accent), mat.get-color-from-palette($primary));\n      color: if($is-dark-theme, map-get($accent, 'default-contrast'), map-get($primary, 'default-contrast'));\n    }\n\n    $palettes-list: (\n      primary: $primary,\n      accent: $accent,\n      warn: $warn\n    );\n\n    @each $key, $val in $palettes-list {\n      &.badge--#{$key} {\n        background-color: mat.get-color-from-palette($val);\n        color: map-get($val, 'default-contrast');\n      }\n    }\n  }\n}\n\n// Mixin from material docs site\n@mixin tables-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $is-dark-theme: map-get($theme, is-dark);\n  $tableBorderOpacity: if($is-dark-theme, 0.08, 0.03);\n\n  table.app-table {\n    color: mat.get-color-from-palette($foreground, text);\n\n    th {\n      background: mat.get-color-from-palette($background, app-bar);\n    }\n\n    td {\n      border: 1px solid rgba(mat.get-color-from-palette($foreground, secondary-text), $tableBorderOpacity);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:meta';\n@use '../theming/theming';\n\n// Colors for the ripple elements.\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $foreground-base: map.get($foreground, base);\n  $color-opacity: 0.1;\n\n  .mat-ripple-element {\n    // If the ripple color is resolves to a color *type*, we can use it directly, otherwise\n    // (e.g. it resolves to a CSS variable) we fall back to using the color and setting an opacity.\n    @if (meta.type-of($foreground-base) == color) {\n      background-color: rgba($foreground-base, $color-opacity);\n    }\n    @else {\n      background-color: $foreground-base;\n      opacity: $color-opacity;\n    }\n  }\n}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-ripple') {\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../../theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $is-dark-theme: map.get($config, is-dark);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: '.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate';\n\n  .mat-pseudo-checkbox {\n    color: theming.get-color-from-palette(map.get($config, foreground), secondary-text);\n\n    &::after {\n      color: theming.get-color-from-palette($background, background);\n    }\n  }\n\n  .mat-pseudo-checkbox-disabled {\n    color: $disabled-color;\n  }\n\n  .mat-primary .mat-pseudo-checkbox-checked,\n  .mat-primary .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, primary));\n  }\n\n  // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n  // theme from their parent, rather than implementing their own theming, which is why we\n  // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n  // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n  // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate,\n  .mat-accent .mat-pseudo-checkbox-checked,\n  .mat-accent .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, accent));\n  }\n\n  .mat-warn .mat-pseudo-checkbox-checked,\n  .mat-warn .mat-pseudo-checkbox-indeterminate {\n    background: theming.get-color-from-palette(map.get($config, warn));\n  }\n\n  .mat-pseudo-checkbox-checked,\n  .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'theming/theming';\n@use './style/private';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/elevation';\n\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  // Wrapper element that provides the theme background when the user's content isn't\n  // inside of a `mat-sidenav-container`. Note that we need to exclude the ampersand\n  // selector in case the mixin is included at the top level.\n  .mat-app-background#{if(&, ', &.mat-app-background', '')} {\n    $background: map.get($config, background);\n    $foreground: map.get($config, foreground);\n\n    background-color: theming.get-color-from-palette($background, background);\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .#{elevation.$prefix}#{$zValue} {\n      @include private.private-theme-elevation($zValue, $config);\n    }\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  @at-root {\n    .mat-theme-loaded-marker {\n      display: none;\n    }\n  }\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @include ripple-theme.theme($theme);\n    @include option-theme.theme($theme);\n    @include optgroup-theme.theme($theme);\n    @include pseudo-checkbox-theme.theme($theme);\n\n    $color: theming.get-color-config($theme);\n    @if $color != null {\n      @include color($color);\n    }\n  }\n}\n","@use 'sass:map';\n@use 'sass:math';\n@use 'sass:meta';\n@use 'variables';\n\n\n// A collection of mixins and CSS classes that can be used to apply elevation to a material\n// element.\n// See: https://material.io/design/environment/elevation.html\n// Examples:\n//\n//\n// .mat-foo {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n// <div id=\"external-card\" class=\"mat-elevation-z2\"><p>Some content</p></div>\n//\n// For an explanation of the design behind how elevation is implemented, see the design doc at\n// https://goo.gl/Kq0k9Z.\n\n// Colors for umbra, penumbra, and ambient shadows. As described in the design doc, each elevation\n// level is created using a set of 3 shadow values, one for umbra (the shadow representing the\n// space completely obscured by an object relative to its light source), one for penumbra (the\n// space partially obscured by an object), and one for ambient (the space which contains the object\n// itself). For a further explanation of these terms and their meanings, see\n// https://en.wikipedia.org/wiki/Umbra,_penumbra_and_antumbra.\n\n// Maps for the different shadow sets and their values within each z-space. These values were\n// created by taking a few reference shadow sets created by Google's Designers and interpolating\n// all of the values between them.\n\n@function _get-umbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.2), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 2px 1px -1px #{$shadow-color}',\n    2: '0px 3px 1px -2px #{$shadow-color}',\n    3: '0px 3px 3px -2px #{$shadow-color}',\n    4: '0px 2px 4px -1px #{$shadow-color}',\n    5: '0px 3px 5px -1px #{$shadow-color}',\n    6: '0px 3px 5px -1px #{$shadow-color}',\n    7: '0px 4px 5px -2px #{$shadow-color}',\n    8: '0px 5px 5px -3px #{$shadow-color}',\n    9: '0px 5px 6px -3px #{$shadow-color}',\n    10: '0px 6px 6px -3px #{$shadow-color}',\n    11: '0px 6px 7px -4px #{$shadow-color}',\n    12: '0px 7px 8px -4px #{$shadow-color}',\n    13: '0px 7px 8px -4px #{$shadow-color}',\n    14: '0px 7px 9px -4px #{$shadow-color}',\n    15: '0px 8px 9px -5px #{$shadow-color}',\n    16: '0px 8px 10px -5px #{$shadow-color}',\n    17: '0px 8px 11px -5px #{$shadow-color}',\n    18: '0px 9px 11px -5px #{$shadow-color}',\n    19: '0px 9px 12px -6px #{$shadow-color}',\n    20: '0px 10px 13px -6px #{$shadow-color}',\n    21: '0px 10px 13px -6px #{$shadow-color}',\n    22: '0px 10px 14px -6px #{$shadow-color}',\n    23: '0px 11px 14px -7px #{$shadow-color}',\n    24: '0px 11px 15px -7px #{$shadow-color}'\n  );\n}\n\n@function _get-penumbra-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.14), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 1px 0px #{$shadow-color}',\n    2: '0px 2px 2px 0px #{$shadow-color}',\n    3: '0px 3px 4px 0px #{$shadow-color}',\n    4: '0px 4px 5px 0px #{$shadow-color}',\n    5: '0px 5px 8px 0px #{$shadow-color}',\n    6: '0px 6px 10px 0px #{$shadow-color}',\n    7: '0px 7px 10px 1px #{$shadow-color}',\n    8: '0px 8px 10px 1px #{$shadow-color}',\n    9: '0px 9px 12px 1px #{$shadow-color}',\n    10: '0px 10px 14px 1px #{$shadow-color}',\n    11: '0px 11px 15px 1px #{$shadow-color}',\n    12: '0px 12px 17px 2px #{$shadow-color}',\n    13: '0px 13px 19px 2px #{$shadow-color}',\n    14: '0px 14px 21px 2px #{$shadow-color}',\n    15: '0px 15px 22px 2px #{$shadow-color}',\n    16: '0px 16px 24px 2px #{$shadow-color}',\n    17: '0px 17px 26px 2px #{$shadow-color}',\n    18: '0px 18px 28px 2px #{$shadow-color}',\n    19: '0px 19px 29px 2px #{$shadow-color}',\n    20: '0px 20px 31px 3px #{$shadow-color}',\n    21: '0px 21px 33px 3px #{$shadow-color}',\n    22: '0px 22px 35px 3px #{$shadow-color}',\n    23: '0px 23px 36px 3px #{$shadow-color}',\n    24: '0px 24px 38px 3px #{$shadow-color}'\n  );\n}\n\n@function _get-ambient-map($color, $opacity) {\n  $shadow-color: if(meta.type-of($color) == color, rgba($color, $opacity * 0.12), $color);\n\n  @return (\n    0: '0px 0px 0px 0px #{$shadow-color}',\n    1: '0px 1px 3px 0px #{$shadow-color}',\n    2: '0px 1px 5px 0px #{$shadow-color}',\n    3: '0px 1px 8px 0px #{$shadow-color}',\n    4: '0px 1px 10px 0px #{$shadow-color}',\n    5: '0px 1px 14px 0px #{$shadow-color}',\n    6: '0px 1px 18px 0px #{$shadow-color}',\n    7: '0px 2px 16px 1px #{$shadow-color}',\n    8: '0px 3px 14px 2px #{$shadow-color}',\n    9: '0px 3px 16px 2px #{$shadow-color}',\n    10: '0px 4px 18px 3px #{$shadow-color}',\n    11: '0px 4px 20px 3px #{$shadow-color}',\n    12: '0px 5px 22px 4px #{$shadow-color}',\n    13: '0px 5px 24px 4px #{$shadow-color}',\n    14: '0px 5px 26px 4px #{$shadow-color}',\n    15: '0px 6px 28px 5px #{$shadow-color}',\n    16: '0px 6px 30px 5px #{$shadow-color}',\n    17: '0px 6px 32px 5px #{$shadow-color}',\n    18: '0px 7px 34px 6px #{$shadow-color}',\n    19: '0px 7px 36px 6px #{$shadow-color}',\n    20: '0px 8px 38px 7px #{$shadow-color}',\n    21: '0px 8px 40px 7px #{$shadow-color}',\n    22: '0px 8px 42px 7px #{$shadow-color}',\n    23: '0px 9px 44px 8px #{$shadow-color}',\n    24: '0px 9px 46px 8px #{$shadow-color}'\n  );\n}\n\n// The default duration value for elevation transitions.\n$transition-duration: 280ms !default;\n\n// The default easing value for elevation transitions.\n$transition-timing-function: variables.$fast-out-slow-in-timing-function;\n\n// The default color for elevation shadows.\n$color: black !default;\n\n// The default opacity scaling value for elevation shadows.\n$opacity: 1 !default;\n\n// Prefix for elevation-related selectors.\n$prefix: 'mat-elevation-z';\n\n// Applies the correct css rules to an element to give it the elevation specified by $zValue.\n// The $zValue must be between 0 and 24.\n@mixin elevation($zValue, $color: $color, $opacity: $opacity) {\n  @if meta.type-of($zValue) != number or not math.is-unitless($zValue) {\n    @error '$zValue must be a unitless number';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error '$zValue must be between 0 and 24';\n  }\n\n  box-shadow: #{map.get(_get-umbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-penumbra-map($color, $opacity), $zValue)},\n              #{map.get(_get-ambient-map($color, $opacity), $zValue)};\n}\n\n// Applies the elevation to an element in a manner that allows\n// consumers to override it via the Material elevation classes.\n@mixin overridable-elevation(\n    $zValue,\n    $color: $color,\n    $opacity: $opacity) {\n  &:not([class*='#{$prefix}']) {\n    @include elevation($zValue, $color, $opacity);\n  }\n}\n\n// Returns a string that can be used as the value for a transition property for elevation.\n// Calling this function directly is useful in situations where a component needs to transition\n// more than one property.\n//\n// .foo {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function private-transition-property-value(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n// Applies the correct css rules needed to have an element transition between elevations.\n// This mixin should be applied to elements whose elevation values will change depending on their\n// context (e.g. when active or disabled).\n//\n// NOTE(traviskaufman): Both this mixin and the above function use default parameters so they can\n// be used in the same way by clients.\n@mixin elevation-transition(\n    $duration: $transition-duration,\n    $easing: $transition-timing-function) {\n  transition: private-transition-property-value($duration, $easing);\n}\n","@use 'sass:map';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $background: map.get($config, background);\n\n  .mat-autocomplete-panel {\n    @include private.private-theme-overridable-elevation(4, $config);\n    background: theming.get-color-from-palette($background, card);\n    color: theming.get-color-from-palette($foreground, text);\n\n    // Selected options in autocompletes should not be gray, but we\n    // only want to override the background for selected options if\n    // they are *not* in hover or focus state. This change has to be\n    // made here because base option styles are shared between the\n    // autocomplete and the select.\n    .mat-option.mat-selected:not(.mat-active):not(:hover) {\n      background: theming.get-color-from-palette($background, card);\n\n      &:not(.mat-option-disabled) {\n        color: theming.get-color-from-palette($foreground, text);\n      }\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-autocomplete') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n\n  .mat-divider {\n    border-top-color: theming.get-color-from-palette($foreground, divider);\n  }\n\n  .mat-divider-vertical {\n    border-right-color: theming.get-color-from-palette($foreground, divider);\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-divider') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@mixin private-expansion-focus {\n  .mat-expansion-panel {\n    & .mat-expansion-panel-header.cdk-keyboard-focused,\n    & .mat-expansion-panel-header.cdk-program-focused,\n    &:not(.mat-expanded) .mat-expansion-panel-header:hover {\n      &:not([aria-disabled='true']) {\n        @content;\n      }\n    }\n  }\n}\n","@use 'sass:map';\n@use '../theming/theming';\n\n// Renders a gradient for showing the dashed line when the input is disabled.\n// Unlike using a border, a gradient allows us to adjust the spacing of the dotted line\n// to match the Material Design spec.\n@mixin private-control-disabled-underline($color) {\n  background-image: linear-gradient(to right, $color 0%, $color 33%, transparent 0%);\n  background-size: 4px 100%;\n  background-repeat: repeat-x;\n}\n\n// Figures out the color of the placeholder for a form control.\n// Used primarily to prevent the various form controls from\n// becoming out of sync since these colors aren't in a palette.\n@function private-control-placeholder-color($config) {\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  @return theming.get-color-from-palette($foreground, secondary-text,\n    if($is-dark-theme, 0.5, 0.42));\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/style/form-common';\n\n\n// Theme styles that only apply to the standard appearance of the form-field.\n\n@mixin standard-color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $foreground: map.get($config, foreground);\n  $is-dark-theme: map.get($config, is-dark);\n  $underline-color:\n    theming.get-color-from-palette($foreground, divider, if($is-dark-theme, 0.7, 0.42));\n\n  .mat-form-field-appearance-standard {\n    .mat-form-field-underline {\n      background-color: $underline-color;\n    }\n\n    &.mat-form-field-disabled .mat-form-field-underline {\n      @include form-common.private-control-disabled-underline($underline-color);\n    }\n  }\n}\n\n@mixin standard-typography($config-or-theme) {}\n\n@mixin private-form-field-standard-density($config-or-theme) {}\n\n@mixin standard-theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field-standard') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include standard-color($color);\n    }\n    @if $density != null {\n      @include private-form-field-standard-density($density);\n    }\n    @if $typography != null {\n      @include standard-typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: theming.get-color-from-palette($primary, text);\n    }\n\n    &.mat-accent {\n      color: theming.get-color-from-palette($accent, text);\n    }\n\n    &.mat-warn {\n      color: theming.get-color-from-palette($warn, text);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","// stylelint-disable material/no-prefixes\n@mixin user-select($value) {\n  -webkit-user-select: $value;\n  user-select: $value;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  // Note: this isn't necessary anymore since we don't support\n  // IE, but it caused some presubmit failures in #23416.\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin backface-visibility($value) {\n  -webkit-backface-visibility: $value;\n  backface-visibility: $value;\n}\n\n@mixin color-adjust($value) {\n  -webkit-print-color-adjust: $value;\n  color-adjust: $value;\n}\n\n@mixin private-background-clip($value) {\n  -webkit-background-clip: $value;\n  background-clip: $value;\n}\n\n@mixin clip-path($value) {\n  -webkit-clip-path: $value;\n  clip-path: $value;\n}\n// stylelint-enable\n","@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use '../core/theming/theming';\n\n// Approximates the correct buffer color by using a mix between the theme color\n// and the theme's background color.\n@function _get-buffer-color($theme, $background) {\n  $theme-color: theming.get-color-from-palette($theme);\n  // Return fallback color if the theme uses variables to define colors.\n  @if (meta.type-of($theme-color) != 'color' or meta.type-of($background) != 'color') {\n    @return theming.get-color-from-palette($theme, lighter);\n  }\n  @return color.mix($theme-color, $background, $weight: 25%);\n}\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get(map.get($config, background), background);\n\n  .mat-progress-bar-background {\n    fill: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: _get-buffer-color($primary, $background);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: theming.get-color-from-palette($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($accent, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      fill: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: _get-buffer-color($warn, $background);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n\n","@use 'sass:map';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    circle {\n      stroke: theming.get-color-from-palette($primary);\n    }\n\n    &.mat-accent circle {\n      stroke: theming.get-color-from-palette($accent);\n    }\n\n    &.mat-warn circle {\n      stroke: theming.get-color-from-palette($warn);\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/style/private';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $primary: map.get($config, primary);\n  $accent: map.get($config, accent);\n  $warn: map.get($config, warn);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  $drawer-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-container-background-color:  theming.get-color-from-palette($background, background);\n  $drawer-push-background-color: theming.get-color-from-palette($background, dialog);\n  $drawer-side-border: solid 1px theming.get-color-from-palette($foreground, divider);\n\n  .mat-drawer-container {\n    background-color: $drawer-container-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n  }\n\n  .mat-drawer {\n    background-color: $drawer-background-color;\n    color: theming.get-color-from-palette($foreground, text);\n\n    &.mat-drawer-push {\n      background-color: $drawer-push-background-color;\n    }\n\n    &:not(.mat-drawer-side) {\n      // The elevation of z-16 is noted in the design specifications.\n      // See https://material.io/design/components/navigation-drawer.html\n      @include private.private-theme-elevation(16, $config);\n    }\n  }\n\n  .mat-drawer-side {\n    border-right: $drawer-side-border;\n\n    &.mat-drawer-end {\n      border-left: $drawer-side-border;\n      border-right: none;\n    }\n  }\n\n  [dir='rtl'] .mat-drawer-side {\n    border-left: $drawer-side-border;\n    border-right: none;\n\n    &.mat-drawer-end {\n      border-left: none;\n      border-right: $drawer-side-border;\n    }\n  }\n\n  .mat-drawer-backdrop.mat-drawer-shown {\n    $opacity: 0.6;\n    $backdrop-color: theming.get-color-from-palette($background, card, $opacity);\n\n    @if (meta.type-of($backdrop-color) == color) {\n      // We use invert() here to have the darken the background color expected to be used. If the\n      // background is light, we use a dark backdrop. If the background is dark,\n      // we use a light backdrop.\n      background-color: color.invert($backdrop-color);\n    }\n    @else {\n      // If we couldn't resolve the backdrop color to a color value, fall back to using\n      // `opacity` to make it opaque since its end value could be a solid color.\n      background-color: $backdrop-color;\n      opacity: $opacity;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sidenav') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:color';\n@use 'sass:map';\n@use 'sass:meta';\n@use '../core/theming/theming';\n\n@mixin color($config-or-theme) {\n  $config: theming.get-color-config($config-or-theme);\n  $background: map.get($config, background);\n  $foreground: map.get($config, foreground);\n\n  .mat-sort-header-arrow {\n    $table-background: theming.get-color-from-palette($background, 'card');\n    $text-color: theming.get-color-from-palette($foreground, secondary-text);\n\n    // Because the arrow is made up of multiple elements that are stacked on top of each other,\n    // we can't use the semi-transparent color from the theme directly. If the value is a color\n    // *type*, we convert it into a solid color by taking the opacity from the rgba value and\n    // using the value to determine the percentage of the background to put into foreground\n    // when mixing the colors together. Otherwise, if it resolves to something different\n    // (e.g. it resolves to a CSS variable), we use the color directly.\n    @if (meta.type-of($table-background) == color and meta.type-of($text-color) == color) {\n      $text-opacity: opacity($text-color);\n      color: color.mix($table-background, rgba($text-color, 1), (1 - $text-opacity) * 100%);\n    }\n    @else {\n      color: $text-color;\n    }\n  }\n}\n\n@mixin typography($config-or-theme) {}\n\n@mixin _density($config-or-theme) {}\n\n@mixin theme($theme-or-color-config) {\n  $theme: theming.private-legacy-get-theme($theme-or-color-config);\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-sort') {\n    $color: theming.get-color-config($theme);\n    $density: theming.get-density-config($theme);\n    $typography: theming.get-typography-config($theme);\n\n    @if $color != null {\n      @include color($color);\n    }\n    @if $density != null {\n      @include _density($density);\n    }\n    @if $typography != null {\n      @include typography($typography);\n    }\n  }\n}\n","@use 'sass:map';\n// Color palettes from the Material Design spec.\n// See https://material.io/design/color/\n//\n// Contrast colors are hard-coded because it is too difficult (probably impossible) to\n// calculate them. These contrast colors are pulled from the public Material Design spec swatches.\n// While the contrast colors in the spec are not prescriptive, we use them for convenience.\n\n\n// @deprecated renamed to $dark-primary-text.\n// @breaking-change 8.0.0\n$black-87-opacity: rgba(black, 0.87);\n// @deprecated renamed to $light-primary-text.\n// @breaking-change 8.0.0\n$white-87-opacity: rgba(white, 0.87);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-12-opacity: rgba(black, 0.12);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-12-opacity: rgba(white, 0.12);\n// @deprecated use $dark-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$black-6-opacity: rgba(black, 0.06);\n// @deprecated use $light-[secondary-text,disabled-text,dividers,focused] instead.\n// @breaking-change 8.0.0\n$white-6-opacity: rgba(white, 0.06);\n\n$dark-primary-text: rgba(black, 0.87);\n$dark-secondary-text: rgba(black, 0.54);\n$dark-disabled-text: rgba(black, 0.38);\n$dark-dividers: rgba(black, 0.12);\n$dark-focused: rgba(black, 0.12);\n$light-primary-text: white;\n$light-secondary-text: rgba(white, 0.7);\n$light-disabled-text: rgba(white, 0.5);\n$light-dividers: rgba(white, 0.12);\n$light-focused: rgba(white, 0.12);\n\n$red-palette: (\n  50: #ffebee,\n  100: #ffcdd2,\n  200: #ef9a9a,\n  300: #e57373,\n  400: #ef5350,\n  500: #f44336,\n  600: #e53935,\n  700: #d32f2f,\n  800: #c62828,\n  900: #b71c1c,\n  A100: #ff8a80,\n  A200: #ff5252,\n  A400: #ff1744,\n  A700: #d50000,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$pink-palette: (\n  50: #fce4ec,\n  100: #f8bbd0,\n  200: #f48fb1,\n  300: #f06292,\n  400: #ec407a,\n  500: #e91e63,\n  600: #d81b60,\n  700: #c2185b,\n  800: #ad1457,\n  900: #880e4f,\n  A100: #ff80ab,\n  A200: #ff4081,\n  A400: #f50057,\n  A700: #c51162,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$purple-palette: (\n  50: #f3e5f5,\n  100: #e1bee7,\n  200: #ce93d8,\n  300: #ba68c8,\n  400: #ab47bc,\n  500: #9c27b0,\n  600: #8e24aa,\n  700: #7b1fa2,\n  800: #6a1b9a,\n  900: #4a148c,\n  A100: #ea80fc,\n  A200: #e040fb,\n  A400: #d500f9,\n  A700: #aa00ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$deep-purple-palette: (\n  50: #ede7f6,\n  100: #d1c4e9,\n  200: #b39ddb,\n  300: #9575cd,\n  400: #7e57c2,\n  500: #673ab7,\n  600: #5e35b1,\n  700: #512da8,\n  800: #4527a0,\n  900: #311b92,\n  A100: #b388ff,\n  A200: #7c4dff,\n  A400: #651fff,\n  A700: #6200ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$indigo-palette: (\n  50: #e8eaf6,\n  100: #c5cae9,\n  200: #9fa8da,\n  300: #7986cb,\n  400: #5c6bc0,\n  500: #3f51b5,\n  600: #3949ab,\n  700: #303f9f,\n  800: #283593,\n  900: #1a237e,\n  A100: #8c9eff,\n  A200: #536dfe,\n  A400: #3d5afe,\n  A700: #304ffe,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$blue-palette: (\n  50: #e3f2fd,\n  100: #bbdefb,\n  200: #90caf9,\n  300: #64b5f6,\n  400: #42a5f5,\n  500: #2196f3,\n  600: #1e88e5,\n  700: #1976d2,\n  800: #1565c0,\n  900: #0d47a1,\n  A100: #82b1ff,\n  A200: #448aff,\n  A400: #2979ff,\n  A700: #2962ff,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $light-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$light-blue-palette: (\n  50: #e1f5fe,\n  100: #b3e5fc,\n  200: #81d4fa,\n  300: #4fc3f7,\n  400: #29b6f6,\n  500: #03a9f4,\n  600: #039be5,\n  700: #0288d1,\n  800: #0277bd,\n  900: #01579b,\n  A100: #80d8ff,\n  A200: #40c4ff,\n  A400: #00b0ff,\n  A700: #0091ea,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$cyan-palette: (\n  50: #e0f7fa,\n  100: #b2ebf2,\n  200: #80deea,\n  300: #4dd0e1,\n  400: #26c6da,\n  500: #00bcd4,\n  600: #00acc1,\n  700: #0097a7,\n  800: #00838f,\n  900: #006064,\n  A100: #84ffff,\n  A200: #18ffff,\n  A400: #00e5ff,\n  A700: #00b8d4,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$teal-palette: (\n  50: #e0f2f1,\n  100: #b2dfdb,\n  200: #80cbc4,\n  300: #4db6ac,\n  400: #26a69a,\n  500: #009688,\n  600: #00897b,\n  700: #00796b,\n  800: #00695c,\n  900: #004d40,\n  A100: #a7ffeb,\n  A200: #64ffda,\n  A400: #1de9b6,\n  A700: #00bfa5,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$green-palette: (\n  50: #e8f5e9,\n  100: #c8e6c9,\n  200: #a5d6a7,\n  300: #81c784,\n  400: #66bb6a,\n  500: #4caf50,\n  600: #43a047,\n  700: #388e3c,\n  800: #2e7d32,\n  900: #1b5e20,\n  A100: #b9f6ca,\n  A200: #69f0ae,\n  A400: #00e676,\n  A700: #00c853,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$light-green-palette: (\n  50: #f1f8e9,\n  100: #dcedc8,\n  200: #c5e1a5,\n  300: #aed581,\n  400: #9ccc65,\n  500: #8bc34a,\n  600: #7cb342,\n  700: #689f38,\n  800: #558b2f,\n  900: #33691e,\n  A100: #ccff90,\n  A200: #b2ff59,\n  A400: #76ff03,\n  A700: #64dd17,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$lime-palette: (\n  50: #f9fbe7,\n  100: #f0f4c3,\n  200: #e6ee9c,\n  300: #dce775,\n  400: #d4e157,\n  500: #cddc39,\n  600: #c0ca33,\n  700: #afb42b,\n  800: #9e9d24,\n  900: #827717,\n  A100: #f4ff81,\n  A200: #eeff41,\n  A400: #c6ff00,\n  A700: #aeea00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$yellow-palette: (\n  50: #fffde7,\n  100: #fff9c4,\n  200: #fff59d,\n  300: #fff176,\n  400: #ffee58,\n  500: #ffeb3b,\n  600: #fdd835,\n  700: #fbc02d,\n  800: #f9a825,\n  900: #f57f17,\n  A100: #ffff8d,\n  A200: #ffff00,\n  A400: #ffea00,\n  A700: #ffd600,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$amber-palette: (\n  50: #fff8e1,\n  100: #ffecb3,\n  200: #ffe082,\n  300: #ffd54f,\n  400: #ffca28,\n  500: #ffc107,\n  600: #ffb300,\n  700: #ffa000,\n  800: #ff8f00,\n  900: #ff6f00,\n  A100: #ffe57f,\n  A200: #ffd740,\n  A400: #ffc400,\n  A700: #ffab00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $dark-primary-text,\n    900: $dark-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $dark-primary-text,\n  )\n);\n\n$orange-palette: (\n  50: #fff3e0,\n  100: #ffe0b2,\n  200: #ffcc80,\n  300: #ffb74d,\n  400: #ffa726,\n  500: #ff9800,\n  600: #fb8c00,\n  700: #f57c00,\n  800: #ef6c00,\n  900: #e65100,\n  A100: #ffd180,\n  A200: #ffab40,\n  A400: #ff9100,\n  A700: #ff6d00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $dark-primary-text,\n    700: $dark-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: black,\n  )\n);\n\n$deep-orange-palette: (\n  50: #fbe9e7,\n  100: #ffccbc,\n  200: #ffab91,\n  300: #ff8a65,\n  400: #ff7043,\n  500: #ff5722,\n  600: #f4511e,\n  700: #e64a19,\n  800: #d84315,\n  900: #bf360c,\n  A100: #ff9e80,\n  A200: #ff6e40,\n  A400: #ff3d00,\n  A700: #dd2c00,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$brown-palette: (\n  50: #efebe9,\n  100: #d7ccc8,\n  200: #bcaaa4,\n  300: #a1887f,\n  400: #8d6e63,\n  500: #795548,\n  600: #6d4c41,\n  700: #5d4037,\n  800: #4e342e,\n  900: #3e2723,\n  A100: #d7ccc8,\n  A200: #bcaaa4,\n  A400: #8d6e63,\n  A700: #5d4037,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $light-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n$grey-palette: (\n  50: #fafafa,\n  100: #f5f5f5,\n  200: #eeeeee,\n  300: #e0e0e0,\n  400: #bdbdbd,\n  500: #9e9e9e,\n  600: #757575,\n  700: #616161,\n  800: #424242,\n  900: #212121,\n  A100: #ffffff,\n  A200: #eeeeee,\n  A400: #bdbdbd,\n  A700: #616161,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $dark-primary-text,\n    500: $dark-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $dark-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$gray-palette: $grey-palette;\n\n$blue-grey-palette: (\n  50: #eceff1,\n  100: #cfd8dc,\n  200: #b0bec5,\n  300: #90a4ae,\n  400: #78909c,\n  500: #607d8b,\n  600: #546e7a,\n  700: #455a64,\n  800: #37474f,\n  900: #263238,\n  A100: #cfd8dc,\n  A200: #b0bec5,\n  A400: #78909c,\n  A700: #455a64,\n  contrast: (\n    50: $dark-primary-text,\n    100: $dark-primary-text,\n    200: $dark-primary-text,\n    300: $dark-primary-text,\n    400: $light-primary-text,\n    500: $light-primary-text,\n    600: $light-primary-text,\n    700: $light-primary-text,\n    800: $light-primary-text,\n    900: $light-primary-text,\n    A100: $dark-primary-text,\n    A200: $dark-primary-text,\n    A400: $light-primary-text,\n    A700: $light-primary-text,\n  )\n);\n\n// Alias for alternate spelling.\n$blue-gray-palette: $blue-grey-palette;\n\n\n// Background palette for light themes.\n$light-theme-background-palette: (\n  status-bar: map.get($grey-palette, 300),\n  app-bar:    map.get($grey-palette, 100),\n  background: map.get($grey-palette, 50),\n  hover:      rgba(black, 0.04), // TODO(kara): check style with Material Design UX\n  card:       white,\n  dialog:     white,\n  disabled-button: rgba(black, 0.12),\n  raised-button: white,\n  focused-button: $dark-focused,\n  selected-button: map.get($grey-palette, 300),\n  selected-disabled-button: map.get($grey-palette, 400),\n  disabled-button-toggle: map.get($grey-palette, 200),\n  unselected-chip: map.get($grey-palette, 300),\n  disabled-list-option: map.get($grey-palette, 200),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Background palette for dark themes.\n$dark-theme-background-palette: (\n  status-bar: black,\n  app-bar:    map.get($grey-palette, 900),\n  background: #303030,\n  hover:      rgba(white, 0.04), // TODO(kara): check style with Material Design UX\n  card:       map.get($grey-palette, 800),\n  dialog:     map.get($grey-palette, 800),\n  disabled-button: rgba(white, 0.12),\n  raised-button: map.get($grey-palette, 800),\n  focused-button: $light-focused,\n  selected-button: map.get($grey-palette, 900),\n  selected-disabled-button: map.get($grey-palette, 800),\n  disabled-button-toggle: black,\n  unselected-chip: map.get($grey-palette, 700),\n  disabled-list-option: rgba(white, 0.12),\n  tooltip: map.get($grey-palette, 700),\n);\n\n// Foreground palette for light themes.\n$light-theme-foreground-palette: (\n  base:              black,\n  divider:           $dark-dividers,\n  dividers:          $dark-dividers,\n  disabled:          $dark-disabled-text,\n  disabled-button:   rgba(black, 0.26),\n  disabled-text:     $dark-disabled-text,\n  elevation:         black,\n  hint-text:         $dark-disabled-text,\n  secondary-text:    $dark-secondary-text,\n  icon:              rgba(black, 0.54),\n  icons:             rgba(black, 0.54),\n  text:              rgba(black, 0.87),\n  slider-min:        rgba(black, 0.87),\n  slider-off:        rgba(black, 0.26),\n  slider-off-active: rgba(black, 0.38),\n);\n\n// Foreground palette for dark themes.\n$dark-theme-foreground-palette: (\n  base:              white,\n  divider:           $light-dividers,\n  dividers:          $light-dividers,\n  disabled:          $light-disabled-text,\n  disabled-button:   rgba(white, 0.3),\n  disabled-text:     $light-disabled-text,\n  elevation:         black,\n  hint-text:         $light-disabled-text,\n  secondary-text:    $light-secondary-text,\n  icon:              white,\n  icons:             white,\n  text:              white,\n  slider-min:        white,\n  slider-off:        rgba(white, 0.3),\n  slider-off-active: rgba(white, 0.3),\n);\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]}